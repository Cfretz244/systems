GCC(1)                                GNU                               GCC(1)



NNAAMMEE
       gcc - GNU project C and C++ compiler

SSYYNNOOPPSSIISS
       gcc [--cc|--SS|--EE] [--ssttdd==_s_t_a_n_d_a_r_d]
           [--gg] [--ppgg] [--OO_l_e_v_e_l]
           [--WW_w_a_r_n...] [--ppeeddaannttiicc]
           [--II_d_i_r...] [--LL_d_i_r...]
           [--DD_m_a_c_r_o[=_d_e_f_n]...] [--UU_m_a_c_r_o]
           [--ff_o_p_t_i_o_n...] [--mm_m_a_c_h_i_n_e_-_o_p_t_i_o_n...]
           [--oo _o_u_t_f_i_l_e] [@_f_i_l_e] _i_n_f_i_l_e...

       Only the most useful options are listed here; see below for the
       remainder.  gg++++ accepts mostly the same options as ggcccc.

DDEESSCCRRIIPPTTIIOONN
       When you invoke GCC, it normally does preprocessing, compilation,
       assembly and linking.  The "overall options" allow you to stop this
       process at an intermediate stage.  For example, the --cc option says not
       to run the linker.  Then the output consists of object files output by
       the assembler.

       Other options are passed on to one stage of processing.  Some options
       control the preprocessor and others the compiler itself.  Yet other
       options control the assembler and linker; most of these are not
       documented here, since you rarely need to use any of them.

       Most of the command line options that you can use with GCC are useful
       for C programs; when an option is only useful with another language
       (usually C++), the explanation says so explicitly.  If the description
       for a particular option does not mention a source language, you can use
       that option with all supported languages.

       The ggcccc program accepts options and file names as operands.  Many
       options have multi-letter names; therefore multiple single-letter
       options may _n_o_t be grouped: --ddvv is very different from --dd --vv.

       You can mix options and other arguments.  For the most part, the order
       you use doesnâ€™t matter.  Order does matter when you use several options
       of the same kind; for example, if you specify --LL more than once, the
       directories are searched in the order specified.  Also, the placement
       of the --ll option is significant.

       Many options have long names starting with --ff or with --WW---for example,
       --ffmmoovvee--lloooopp--iinnvvaarriiaannttss, --WWffoorrmmaatt and so on.  Most of these have both
       positive and negative forms; the negative form of --ffffoooo would be
       --ffnnoo--ffoooo.  This manual documents only one of these two forms, whichever
       one is not the default.

OOPPTTIIOONNSS
   OOppttiioonn SSuummmmaarryy
       Here is a summary of all the options, grouped by type.  Explanations
       are in the following sections.

       _O_v_e_r_a_l_l _O_p_t_i_o_n_s
           --cc  --SS  --EE  --oo _f_i_l_e  --ccoommbbiinnee  --ppiippee  --ppaassss--eexxiitt--ccooddeess --xx _l_a_n_g_u_a_g_e
           --vv  --######  ----hheellpp[==_c_l_a_s_s[,,......]]  ----ttaarrggeett--hheellpp ----vveerrssiioonn
           --wwrraappppeerr@@_f_i_l_e

       _C _L_a_n_g_u_a_g_e _O_p_t_i_o_n_s
           --aannssii  --ssttdd==_s_t_a_n_d_a_r_d  --ffggnnuu8899--iinnlliinnee --aauuxx--iinnffoo _f_i_l_e_n_a_m_e --ffnnoo--aassmm
           --ffnnoo--bbuuiillttiinn  --ffnnoo--bbuuiillttiinn--_f_u_n_c_t_i_o_n --ffhhoosstteedd  --ffffrreeeessttaannddiinngg
           --ffooppeennmmpp --ffmmss--eexxtteennssiioonnss --ttrriiggrraapphhss  --nnoo--iinntteeggrraatteedd--ccpppp
           --ttrraaddiittiioonnaall  --ttrraaddiittiioonnaall--ccpppp --ffaallllooww--ssiinnggllee--pprreecciissiioonn
           --ffccoonndd--mmiissmmaattcchh --ffllaaxx--vveeccttoorr--ccoonnvveerrssiioonnss --ffssiiggnneedd--bbiittffiieellddss
           --ffssiiggnneedd--cchhaarr --ffuunnssiiggnneedd--bbiittffiieellddss  --ffuunnssiiggnneedd--cchhaarr

       _C_+_+ _L_a_n_g_u_a_g_e _O_p_t_i_o_n_s
           --ffaabbii--vveerrssiioonn==_n  --ffnnoo--aacccceessss--ccoonnttrrooll  --ffcchheecckk--nneeww --ffccoonnsseerrvvee--ssppaaccee
           --ffffrriieenndd--iinnjjeeccttiioonn --ffnnoo--eelliiddee--ccoonnssttrruuccttoorrss --ffnnoo--eennffoorrccee--eehh--ssppeeccss
           --ffffoorr--ssccooppee  --ffnnoo--ffoorr--ssccooppee  --ffnnoo--ggnnuu--kkeeyywwoorrddss
           --ffnnoo--iimmpplliicciitt--tteemmppllaatteess --ffnnoo--iimmpplliicciitt--iinnlliinnee--tteemmppllaatteess
           --ffnnoo--iimmpplleemmeenntt--iinnlliinneess  --ffmmss--eexxtteennssiioonnss --ffnnoo--nnoonnaannssii--bbuuiillttiinnss
           --ffnnoo--ooppeerraattoorr--nnaammeess --ffnnoo--ooppttiioonnaall--ddiiaaggss  --ffppeerrmmiissssiivvee --ffrreeppoo
           --ffnnoo--rrttttii  --ffssttaattss  --fftteemmppllaattee--ddeepptthh--_n --ffnnoo--tthhrreeaaddssaaffee--ssttaattiiccss
           --ffuussee--ccxxaa--aatteexxiitt  --ffnnoo--wweeaakk  --nnoossttddiinncc++++ --ffnnoo--ddeeffaauulltt--iinnlliinnee
           --ffvviissiibbiilliittyy--iinnlliinneess--hhiiddddeenn --ffvviissiibbiilliittyy--mmss--ccoommppaatt --WWaabbii
           --WWccttoorr--ddttoorr--pprriivvaaccyy --WWnnoonn--vviirrttuuaall--ddttoorr  --WWrreeoorrddeerr --WWeeffffcc++++
           --WWssttrriicctt--nnuullll--sseennttiinneell --WWnnoo--nnoonn--tteemmppllaattee--ffrriieenndd  --WWoolldd--ssttyyllee--ccaasstt
           --WWoovveerrllooaaddeedd--vviirrttuuaall  --WWnnoo--ppmmff--ccoonnvveerrssiioonnss --WWssiiggnn--pprroommoo

       _O_b_j_e_c_t_i_v_e_-_C _a_n_d _O_b_j_e_c_t_i_v_e_-_C_+_+ _L_a_n_g_u_a_g_e _O_p_t_i_o_n_s
           --ffccoonnssttaanntt--ssttrriinngg--ccllaassss==_c_l_a_s_s_-_n_a_m_e --ffggnnuu--rruunnttiimmee  --ffnneexxtt--rruunnttiimmee
           --ffnnoo--nniill--rreecceeiivveerrss --ffoobbjjcc--ccaallll--ccxxxx--ccddttoorrss --ffoobbjjcc--ddiirreecctt--ddiissppaattcchh
           --ffoobbjjcc--eexxcceeppttiioonnss --ffoobbjjcc--ggcc --ffrreeppllaaccee--oobbjjcc--ccllaasssseess --ffzzeerroo--lliinnkk
           --ggeenn--ddeeccllss --WWaassssiiggnn--iinntteerrcceepptt --WWnnoo--pprroottooccooll  --WWsseelleeccttoorr
           --WWssttrriicctt--sseelleeccttoorr--mmaattcchh --WWuunnddeeccllaarreedd--sseelleeccttoorr

       _L_a_n_g_u_a_g_e _I_n_d_e_p_e_n_d_e_n_t _O_p_t_i_o_n_s
           --ffmmeessssaaggee--lleennggtthh==_n --ffddiiaaggnnoossttiiccss--sshhooww--llooccaattiioonn==[oonnccee|eevveerryy--lliinnee]
           --ffddiiaaggnnoossttiiccss--sshhooww--ooppttiioonn

       _W_a_r_n_i_n_g _O_p_t_i_o_n_s
           --ffssyynnttaaxx--oonnllyy  --ppeeddaannttiicc  --ppeeddaannttiicc--eerrrroorrss --ww  --WWeexxttrraa  --WWaallll
           --WWaaddddrreessss  --WWaaggggrreeggaattee--rreettuurrnn  --WWaarrrraayy--bboouunnddss --WWnnoo--aattttrriibbuutteess
           --WWnnoo--bbuuiillttiinn--mmaaccrroo--rreeddeeffiinneedd --WWcc++++--ccoommppaatt --WWcc++++00xx--ccoommppaatt
           --WWccaasstt--aalliiggnn  --WWccaasstt--qquuaall --WWcchhaarr--ssuubbssccrriippttss --WWcclloobbbbeerreedd  --WWccoommmmeenntt
           --WWccoonnvveerrssiioonn  --WWccoovveerraaggee--mmiissmmaattcchh  --WWnnoo--ddeepprreeccaatteedd
           --WWnnoo--ddeepprreeccaatteedd--ddeeccllaarraattiioonnss --WWddiissaabblleedd--ooppttiimmiizzaattiioonn
           --WWnnoo--ddiivv--bbyy--zzeerroo --WWeemmppttyy--bbooddyy  --WWeennuumm--ccoommppaarree --WWnnoo--eennddiiff--llaabbeellss
           --WWeerrrroorr  --WWeerrrroorr==** --WWffaattaall--eerrrroorrss  --WWffllooaatt--eeqquuaall  --WWffoorrmmaatt
           --WWffoorrmmaatt==22 --WWnnoo--ffoorrmmaatt--ccoonnttaaiinnss--nnuull --WWnnoo--ffoorrmmaatt--eexxttrraa--aarrggss
           --WWffoorrmmaatt--nnoonnlliitteerraall --WWffoorrmmaatt--sseeccuurriittyy  --WWffoorrmmaatt--yy22kk
           --WWffrraammee--llaarrggeerr--tthhaann==_l_e_n --WWiiggnnoorreedd--qquuaalliiffiieerrss --WWiimmpplliicciitt
           --WWiimmpplliicciitt--ffuunnccttiioonn--ddeeccllaarraattiioonn  --WWiimmpplliicciitt--iinntt --WWiinniitt--sseellff
           --WWiinnlliinnee --WWnnoo--iinntt--ttoo--ppooiinntteerr--ccaasstt --WWnnoo--iinnvvaalliidd--ooffffsseettooff
           --WWiinnvvaalliidd--ppcchh --WWllaarrggeerr--tthhaann==_l_e_n  --WWuunnssaaffee--lloooopp--ooppttiimmiizzaattiioonnss
           --WWllooggiiccaall--oopp --WWlloonngg--lloonngg --WWmmaaiinn  --WWmmiissssiinngg--bbrraacceess
           --WWmmiissssiinngg--ffiieelldd--iinniittiiaalliizzeerrss --WWmmiissssiinngg--ffoorrmmaatt--aattttrriibbuuttee
           --WWmmiissssiinngg--iinncclluuddee--ddiirrss --WWmmiissssiinngg--nnoorreettuurrnn  --WWnnoo--mmuuddffllaapp
           --WWnnoo--mmuullttiicchhaarr  --WWnnoonnnnuullll  --WWnnoo--oovveerrffllooww --WWoovveerrlleennggtthh--ssttrriinnggss
           --WWppaacckkeedd  --WWppaacckkeedd--bbiittffiieelldd--ccoommppaatt  --WWppaaddddeedd --WWppaarreenntthheesseess
           --WWppeeddaannttiicc--mmss--ffoorrmmaatt --WWnnoo--ppeeddaannttiicc--mmss--ffoorrmmaatt --WWppooiinntteerr--aarriitthh
           --WWnnoo--ppooiinntteerr--ttoo--iinntt--ccaasstt --WWrreedduunnddaanntt--ddeeccllss --WWrreettuurrnn--ttyyppee
           --WWsseeqquueennccee--ppooiinntt  --WWsshhaaddooww --WWssiiggnn--ccoommppaarree  --WWssiiggnn--ccoonnvveerrssiioonn
           --WWssttaacckk--pprrootteeccttoorr --WWssttrriicctt--aalliiaassiinngg --WWssttrriicctt--aalliiaassiinngg==nn
           --WWssttrriicctt--oovveerrffllooww --WWssttrriicctt--oovveerrffllooww==_n --WWsswwiittcchh  --WWsswwiittcchh--ddeeffaauulltt
           --WWsswwiittcchh--eennuumm --WWssyynncc--nnaanndd --WWssyysstteemm--hheeaaddeerrss  --WWttrriiggrraapphhss
           --WWttyyppee--lliimmiittss  --WWuunnddeeff  --WWuunniinniittiiaalliizzeedd --WWuunnkknnoowwnn--pprraaggmmaass
           --WWnnoo--pprraaggmmaass --WWuunnrreeaacchhaabbllee--ccooddee --WWuunnuusseedd  --WWuunnuusseedd--ffuunnccttiioonn
           --WWuunnuusseedd--llaabbeell  --WWuunnuusseedd--ppaarraammeetteerr --WWuunnuusseedd--vvaalluuee
           --WWuunnuusseedd--vvaarriiaabbllee --WWuunnuusseedd--bbuutt--sseett--ppaarraammeetteerr
           --WWuunnuusseedd--bbuutt--sseett--vvaarriiaabbllee --WWvvaarriiaaddiicc--mmaaccrrooss --WWvvllaa
           --WWvvoollaattiillee--rreeggiisstteerr--vvaarr  --WWwwrriittee--ssttrriinnggss

       _C _a_n_d _O_b_j_e_c_t_i_v_e_-_C_-_o_n_l_y _W_a_r_n_i_n_g _O_p_t_i_o_n_s
           --WWbbaadd--ffuunnccttiioonn--ccaasstt  --WWmmiissssiinngg--ddeeccllaarraattiioonnss
           --WWmmiissssiinngg--ppaarraammeetteerr--ttyyppee  --WWmmiissssiinngg--pprroottoottyyppeess  --WWnneesstteedd--eexxtteerrnnss
           --WWoolldd--ssttyyllee--ddeeccllaarraattiioonn  --WWoolldd--ssttyyllee--ddeeffiinniittiioonn --WWssttrriicctt--pprroottoottyyppeess
           --WWttrraaddiittiioonnaall  --WWttrraaddiittiioonnaall--ccoonnvveerrssiioonn
           --WWddeeccllaarraattiioonn--aafftteerr--ssttaatteemmeenntt --WWppooiinntteerr--ssiiggnn

       _D_e_b_u_g_g_i_n_g _O_p_t_i_o_n_s
           --dd_l_e_t_t_e_r_s  --dduummppssppeeccss  --dduummppmmaacchhiinnee  --dduummppvveerrssiioonn --ffddbbgg--ccnntt--lliisstt
           --ffddbbgg--ccnntt==_c_o_u_n_t_e_r_-_v_a_l_u_e_-_l_i_s_t --ffdduummpp--nnooaaddddrr --ffdduummpp--uunnnnuummbbeerreedd
           --ffdduummpp--uunnnnuummbbeerreedd--lliinnkkss --ffdduummpp--ttrraannssllaattiioonn--uunniitt[--_n]
           --ffdduummpp--ccllaassss--hhiieerraarrcchhyy[--_n] --ffdduummpp--iippaa--aallll --ffdduummpp--iippaa--ccggrraapphh
           --ffdduummpp--iippaa--iinnlliinnee --ffdduummpp--ssttaattiissttiiccss --ffdduummpp--ttrreeee--aallll
           --ffdduummpp--ttrreeee--oorriiggiinnaall[--_n] --ffdduummpp--ttrreeee--ooppttiimmiizzeedd[--_n] --ffdduummpp--ttrreeee--ccffgg
           --ffdduummpp--ttrreeee--vvccgg --ffdduummpp--ttrreeee--aalliiaass --ffdduummpp--ttrreeee--cchh
           --ffdduummpp--ttrreeee--ssssaa[--_n] --ffdduummpp--ttrreeee--pprree[--_n] --ffdduummpp--ttrreeee--ccccpp[--_n]
           --ffdduummpp--ttrreeee--ddccee[--_n] --ffdduummpp--ttrreeee--ggiimmppllee[--rraaww]
           --ffdduummpp--ttrreeee--mmuuddffllaapp[--_n] --ffdduummpp--ttrreeee--ddoomm[--_n] --ffdduummpp--ttrreeee--ddssee[--_n]
           --ffdduummpp--ttrreeee--pphhiioopptt[--_n] --ffdduummpp--ttrreeee--ffoorrwwpprroopp[--_n]
           --ffdduummpp--ttrreeee--ccooppyyrreennaammee[--_n] --ffdduummpp--ttrreeee--nnrrvv --ffdduummpp--ttrreeee--vveecctt
           --ffdduummpp--ttrreeee--ssiinnkk --ffdduummpp--ttrreeee--ssrraa[--_n] --ffdduummpp--ttrreeee--ffrree[--_n]
           --ffdduummpp--ttrreeee--vvrrpp[--_n] --ffttrreeee--vveeccttoorriizzeerr--vveerrbboossee==_n
           --ffdduummpp--ttrreeee--ssttoorreeccccpp[--_n] --ffdduummpp--ffiinnaall--iinnssnnss==_f_i_l_e
           --ffccoommppaarree--ddeebbuugg[==_o_p_t_s]  --ffccoommppaarree--ddeebbuugg--sseeccoonndd
           --ffeelliimmiinnaattee--ddwwaarrff22--dduuppss --ffeelliimmiinnaattee--uunnuusseedd--ddeebbuugg--ttyyppeess
           --ffeelliimmiinnaattee--uunnuusseedd--ddeebbuugg--ssyymmbboollss --ffeemmiitt--ccllaassss--ddeebbuugg--aallwwaayyss
           --ffmmeemm--rreeppoorrtt --ffpprree--iippaa--mmeemm--rreeppoorrtt --ffppoosstt--iippaa--mmeemm--rreeppoorrtt
           --ffpprrooffiillee--aarrccss --ffrraannddoomm--sseeeedd==_s_t_r_i_n_g --ffsscchheedd--vveerrbboossee==_n
           --ffsseell--sscchheedd--vveerrbboossee --ffsseell--sscchheedd--dduummpp--ccffgg
           --ffsseell--sscchheedd--ppiippeelliinniinngg--vveerrbboossee --fftteesstt--ccoovveerraaggee  --ffttiimmee--rreeppoorrtt
           --ffvvaarr--ttrraacckkiinngg --ffvvaarr--ttrraacckkiinngg--aassssiiggnnmmeennttss
           --ffvvaarr--ttrraacckkiinngg--aassssiiggnnmmeennttss--ttooggggllee --gg  --gg_l_e_v_e_l  --ggttooggggllee  --ggccooffff
           --ggddwwaarrff--_v_e_r_s_i_o_n --ggggddbb  --ggssttaabbss  --ggssttaabbss++  --ggssttrriicctt--ddwwaarrff
           --ggnnoo--ssttrriicctt--ddwwaarrff --ggvvmmss  --ggxxccooffff  --ggxxccooffff++ --ffnnoo--mmeerrggee--ddeebbuugg--ssttrriinnggss
           --ffnnoo--ddwwaarrff22--ccffii--aassmm --ffddeebbuugg--pprreeffiixx--mmaapp==_o_l_d==_n_e_w
           --ffeemmiitt--ssttrruucctt--ddeebbuugg--bbaasseeoonnllyy --ffeemmiitt--ssttrruucctt--ddeebbuugg--rreedduucceedd
           --ffeemmiitt--ssttrruucctt--ddeebbuugg--ddeettaaiilleedd[==_s_p_e_c_-_l_i_s_t] --pp  --ppgg
           --pprriinntt--ffiillee--nnaammee==_l_i_b_r_a_r_y  --pprriinntt--lliibbggcccc--ffiillee--nnaammee
           --pprriinntt--mmuullttii--ddiirreeccttoorryy  --pprriinntt--mmuullttii--lliibb  --pprriinntt--mmuullttii--ooss--ddiirreeccttoorryy
           --pprriinntt--pprroogg--nnaammee==_p_r_o_g_r_a_m  --pprriinntt--sseeaarrcchh--ddiirrss  --QQ --pprriinntt--ssyyssrroooott
           --pprriinntt--ssyyssrroooott--hheeaaddeerrss--ssuuffffiixx --ssaavvee--tteemmppss  --ttiimmee[==_f_i_l_e]

       _O_p_t_i_m_i_z_a_t_i_o_n _O_p_t_i_o_n_s
           --ffaalliiggnn--ffuunnccttiioonnss[[==_n]] --ffaalliiggnn--jjuummppss[[==_n]] --ffaalliiggnn--llaabbeellss[[==_n]]
           --ffaalliiggnn--llooooppss[[==_n]] --ffaassssoocciiaattiivvee--mmaatthh --ffaauuttoo--iinncc--ddeecc
           --ffbbrraanncchh--pprroobbaabbiilliittiieess --ffbbrraanncchh--ttaarrggeett--llooaadd--ooppttiimmiizzee
           --ffbbrraanncchh--ttaarrggeett--llooaadd--ooppttiimmiizzee22 --ffbbttrr--bbbb--eexxcclluussiivvee --ffccaalllleerr--ssaavveess
           --ffcchheecckk--ddaattaa--ddeeppss --ffccoonnsseerrvvee--ssttaacckk --ffccpprroopp--rreeggiisstteerrss --ffccrroossssjjuummppiinngg
           --ffccssee--ffoollllooww--jjuummppss --ffccssee--sskkiipp--bblloocckkss --ffccxx--ffoorrttrraann--rruulleess
           --ffccxx--lliimmiitteedd--rraannggee --ffddaattaa--sseeccttiioonnss --ffddccee --ffddccee --ffddeellaayyeedd--bbrraanncchh
           --ffddeelleettee--nnuullll--ppooiinntteerr--cchheecckkss --ffddssee --ffddssee --ffeeaarrllyy--iinnlliinniinngg
           --ffeexxppeennssiivvee--ooppttiimmiizzaattiioonnss --ffffaasstt--mmaatthh --ffffiinniittee--mmaatthh--oonnllyy
           --ffffllooaatt--ssttoorree --ffffoorrwwaarrdd--pprrooppaaggaattee --ffffuunnccttiioonn--sseeccttiioonnss --ffggccssee
           --ffggccssee--aafftteerr--rreellooaadd --ffggccssee--llaass --ffggccssee--llmm --ffggccssee--ssmm --ffiiff--ccoonnvveerrssiioonn
           --ffiiff--ccoonnvveerrssiioonn22 --ffiinnddiirreecctt--iinnlliinniinngg --ffiinnlliinnee--ffuunnccttiioonnss
           --ffiinnlliinnee--ffuunnccttiioonnss--ccaalllleedd--oonnccee --ffiinnlliinnee--lliimmiitt==_n
           --ffiinnlliinnee--ssmmaallll--ffuunnccttiioonnss --ffiippaa--ccpp --ffiippaa--ccpp--cclloonnee --ffiippaa--mmaattrriixx--rreeoorrgg
           --ffiippaa--ppttaa --ffiippaa--ppuurree--ccoonnsstt --ffiippaa--rreeffeerreennccee --ffiippaa--ssttrruucctt--rreeoorrgg
           --ffiippaa--ttyyppee--eessccaappee --ffiirraa--aallggoorriitthhmm==_a_l_g_o_r_i_t_h_m --ffiirraa--rreeggiioonn==_r_e_g_i_o_n
           --ffiirraa--ccooaalleessccee --ffnnoo--iirraa--sshhaarree--ssaavvee--sslloottss --ffnnoo--iirraa--sshhaarree--ssppiillll--sslloottss
           --ffiirraa--vveerrbboossee==_n --ffiivvooppttss --ffkkeeeepp--iinnlliinnee--ffuunnccttiioonnss
           --ffkkeeeepp--ssttaattiicc--ccoonnssttss --fflloooopp--bblloocckk --fflloooopp--iinntteerrcchhaannggee
           --fflloooopp--ssttrriipp--mmiinnee --ffmmeerrggee--aallll--ccoonnssttaannttss --ffmmeerrggee--ccoonnssttaannttss
           --ffmmoodduulloo--sscchheedd --ffmmoodduulloo--sscchheedd--aallllooww--rreeggmmoovveess --ffmmoovvee--lloooopp--iinnvvaarriiaannttss
           --ffmmuuddffllaapp --ffmmuuddffllaappiirr --ffmmuuddffllaapptthh --ffnnoo--bbrraanncchh--ccoouunntt--rreegg
           --ffnnoo--ddeeffaauulltt--iinnlliinnee --ffnnoo--ddeeffeerr--ppoopp --ffnnoo--ffuunnccttiioonn--ccssee
           --ffnnoo--gguueessss--bbrraanncchh--pprroobbaabbiilliittyy --ffnnoo--iinnlliinnee --ffnnoo--mmaatthh--eerrrrnnoo
           --ffnnoo--ppeeeepphhoollee --ffnnoo--ppeeeepphhoollee22 --ffnnoo--sscchheedd--iinntteerrbblloocckk --ffnnoo--sscchheedd--ssppeecc
           --ffnnoo--ssiiggnneedd--zzeerrooss --ffnnoo--ttoopplleevveell--rreeoorrddeerr --ffnnoo--ttrraappppiinngg--mmaatthh
           --ffnnoo--zzeerroo--iinniittiiaalliizzeedd--iinn--bbssss --ffoommiitt--ffrraammee--ppooiinntteerr
           --ffooppttiimmiizzee--rreeggiisstteerr--mmoovvee --ffooppttiimmiizzee--ssiibblliinngg--ccaallllss --ffppeeeell--llooooppss
           --ffpprreeddiiccttiivvee--ccoommmmoonniinngg --ffpprreeffeettcchh--lloooopp--aarrrraayyss --ffpprrooffiillee--ccoorrrreeccttiioonn
           --ffpprrooffiillee--ddiirr==_p_a_t_h --ffpprrooffiillee--ggeenneerraattee --ffpprrooffiillee--ggeenneerraattee==_p_a_t_h
           --ffpprrooffiillee--uussee --ffpprrooffiillee--uussee==_p_a_t_h --ffpprrooffiillee--vvaalluueess --ffrreecciipprrooccaall--mmaatthh
           --ffrreeggmmoovvee --ffrreennaammee--rreeggiisstteerrss --ffrreeoorrddeerr--bblloocckkss
           --ffrreeoorrddeerr--bblloocckkss--aanndd--ppaarrttiittiioonn --ffrreeoorrddeerr--ffuunnccttiioonnss
           --ffrreerruunn--ccssee--aafftteerr--lloooopp --ffrreesscchheedduullee--mmoodduulloo--sscchheedduulleedd--llooooppss
           --ffrroouunnddiinngg--mmaatthh --ffrrttll--aabbssttrraacctt--sseeqquueenncceess --ffsscchheedd22--uussee--ssuuppeerrbblloocckkss
           --ffsscchheedd22--uussee--ttrraacceess --ffsscchheedd--ssppeecc--llooaadd --ffsscchheedd--ssppeecc--llooaadd--ddaannggeerroouuss
           --ffsscchheedd--ssttaalllleedd--iinnssnnss--ddeepp[[==_n]] --ffsscchheedd--ssttaalllleedd--iinnssnnss[[==_n]]
           --ffsscchheedduullee--iinnssnnss --ffsscchheedduullee--iinnssnnss22 --ffsseeccttiioonn--aanncchhoorrss --ffsseeee
           --ffsseelleeccttiivvee--sscchheedduulliinngg --ffsseelleeccttiivvee--sscchheedduulliinngg22
           --ffsseell--sscchheedd--ppiippeelliinniinngg --ffsseell--sscchheedd--ppiippeelliinniinngg--oouutteerr--llooooppss
           --ffssiiggnnaalliinngg--nnaannss --ffssiinnggllee--pprreecciissiioonn--ccoonnssttaanntt
           --ffsspplliitt--iivvss--iinn--uunnrroolllleerr --ffsspplliitt--wwiiddee--ttyyppeess --ffssttaacckk--pprrootteeccttoorr
           --ffssttaacckk--pprrootteeccttoorr--aallll --ffssttrriicctt--aalliiaassiinngg --ffssttrriicctt--oovveerrffllooww
           --fftthhrreeaadd--jjuummppss --ffttrraacceerr --ffttrreeee--bbuuiillttiinn--ccaallll--ddccee --ffttrreeee--ccccpp
           --ffttrreeee--cchh --ffttrreeee--ccooaalleessccee--iinnlliinnee--vvaarrss --ffttrreeee--ccooaalleessccee--vvaarrss
           --ffttrreeee--ccooppyy--pprroopp --ffttrreeee--ccooppyyrreennaammee --ffttrreeee--ddccee --ffttrreeee--ddoommiinnaattoorr--ooppttss
           --ffttrreeee--ddssee --ffttrreeee--ffrree --ffttrreeee--lloooopp--iimm --ffttrreeee--lloooopp--ddiissttrriibbuuttiioonn
           --ffttrreeee--lloooopp--iivvccaannoonn --ffttrreeee--lloooopp--lliinneeaarr --ffttrreeee--lloooopp--ooppttiimmiizzee
           --ffttrreeee--ppaarraalllleelliizzee--llooooppss==_n --ffttrreeee--pprree --ffttrreeee--rreeaassssoocc --ffttrreeee--ssiinnkk
           --ffttrreeee--ssrraa --ffttrreeee--sswwiittcchh--ccoonnvveerrssiioonn --ffttrreeee--tteerr
           --ffttrreeee--vveecctt--lloooopp--vveerrssiioonn --ffttrreeee--vveeccttoorriizzee --ffttrreeee--vvrrpp
           --ffuunniitt--aatt--aa--ttiimmee --ffuunnrroollll--aallll--llooooppss --ffuunnrroollll--llooooppss
           --ffuunnssaaffee--lloooopp--ooppttiimmiizzaattiioonnss --ffuunnssaaffee--mmaatthh--ooppttiimmiizzaattiioonnss
           --ffuunnsswwiittcchh--llooooppss --ffvvaarriiaabbllee--eexxppaannssiioonn--iinn--uunnrroolllleerr --ffvveecctt--ccoosstt--mmooddeell
           --ffvvpptt --ffwweebb --ffwwhhoollee--pprrooggrraamm ----ppaarraamm _n_a_m_e==_v_a_l_u_e --OO  --OO00  --OO11  --OO22
           --OO33  --OOss

       _P_r_e_p_r_o_c_e_s_s_o_r _O_p_t_i_o_n_s
           --AA_q_u_e_s_t_i_o_n==_a_n_s_w_e_r --AA--_q_u_e_s_t_i_o_n[==_a_n_s_w_e_r] --CC  --ddDD  --ddII  --ddMM  --ddNN
           --DD_m_a_c_r_o[==_d_e_f_n]  --EE  --HH --iiddiirraafftteerr _d_i_r --iinncclluuddee _f_i_l_e  --iimmaaccrrooss _f_i_l_e
           --iipprreeffiixx _f_i_l_e  --iiwwiitthhpprreeffiixx _d_i_r --iiwwiitthhpprreeffiixxbbeeffoorree _d_i_r  --iissyysstteemm
           _d_i_r --iimmuullttiilliibb _d_i_r --iissyyssrroooott _d_i_r --MM  --MMMM  --MMFF  --MMGG  --MMPP  --MMQQ  --MMTT
           --nnoossttddiinncc --PP  --ffwwoorrkkiinngg--ddiirreeccttoorryy  --rreemmaapp --ttrriiggrraapphhss  --uunnddeeff
           --UU_m_a_c_r_o  --WWpp,,_o_p_t_i_o_n --XXpprreepprroocceessssoorr _o_p_t_i_o_n

       _A_s_s_e_m_b_l_e_r _O_p_t_i_o_n
           --WWaa,,_o_p_t_i_o_n  --XXaasssseemmbblleerr _o_p_t_i_o_n

       _L_i_n_k_e_r _O_p_t_i_o_n_s
           _o_b_j_e_c_t_-_f_i_l_e_-_n_a_m_e  --ll_l_i_b_r_a_r_y --nnoossttaarrttffiilleess  --nnooddeeffaauullttlliibbss
           --nnoossttddlliibb --ppiiee --rrddyynnaammiicc --ss  --ssttaattiicc  --ssttaattiicc--lliibbggcccc  --sshhaarreedd
           --sshhaarreedd--lliibbggcccc  --ssyymmbboolliicc --TT _s_c_r_i_p_t  --WWll,,_o_p_t_i_o_n  --XXlliinnkkeerr _o_p_t_i_o_n --uu
           _s_y_m_b_o_l

       _D_i_r_e_c_t_o_r_y _O_p_t_i_o_n_s
           --BB_p_r_e_f_i_x  --II_d_i_r  --iiqquuoottee_d_i_r  --LL_d_i_r --ssppeeccss==_f_i_l_e  --II-- ----ssyyssrroooott==_d_i_r

       _T_a_r_g_e_t _O_p_t_i_o_n_s
           --VV _v_e_r_s_i_o_n  --bb _m_a_c_h_i_n_e

       _M_a_c_h_i_n_e _D_e_p_e_n_d_e_n_t _O_p_t_i_o_n_s
           _A_R_C _O_p_t_i_o_n_s --EEBB  --EELL --mmmmaannggllee--ccppuu  --mmccppuu==_c_p_u  --mmtteexxtt==_t_e_x_t_-_s_e_c_t_i_o_n
           --mmddaattaa==_d_a_t_a_-_s_e_c_t_i_o_n  --mmrrooddaattaa==_r_e_a_d_o_n_l_y_-_d_a_t_a_-_s_e_c_t_i_o_n

           _A_R_M _O_p_t_i_o_n_s --mmaappccss--ffrraammee  --mmnnoo--aappccss--ffrraammee --mmaabbii==_n_a_m_e
           --mmaappccss--ssttaacckk--cchheecckk  --mmnnoo--aappccss--ssttaacckk--cchheecckk --mmaappccss--ffllooaatt
           --mmnnoo--aappccss--ffllooaatt --mmaappccss--rreeeennttrraanntt  --mmnnoo--aappccss--rreeeennttrraanntt
           --mmsscchheedd--pprroolloogg  --mmnnoo--sscchheedd--pprroolloogg --mmlliittttllee--eennddiiaann  --mmbbiigg--eennddiiaann
           --mmwwoorrddss--lliittttllee--eennddiiaann --mmffllooaatt--aabbii==_n_a_m_e  --mmssoofftt--ffllooaatt  --mmhhaarrdd--ffllooaatt
           --mmffppee --mmtthhuummbb--iinntteerrwwoorrkk  --mmnnoo--tthhuummbb--iinntteerrwwoorrkk --mmccppuu==_n_a_m_e
           --mmaarrcchh==_n_a_m_e  --mmffppuu==_n_a_m_e --mmssttrruuccttuurree--ssiizzee--bboouunnddaarryy==_n
           --mmaabboorrtt--oonn--nnoorreettuurrnn --mmlloonngg--ccaallllss  --mmnnoo--lloonngg--ccaallllss --mmssiinnggllee--ppiicc--bbaassee
           --mmnnoo--ssiinnggllee--ppiicc--bbaassee --mmppiicc--rreeggiisstteerr==_r_e_g --mmnnoopp--ffuunn--ddlllliimmppoorrtt
           --mmcciirrrruuss--ffiixx--iinnvvaalliidd--iinnssnnss --mmnnoo--cciirrrruuss--ffiixx--iinnvvaalliidd--iinnssnnss
           --mmppookkee--ffuunnccttiioonn--nnaammee --mmtthhuummbb  --mmaarrmm --mmttppccss--ffrraammee  --mmttppccss--lleeaaff--ffrraammee
           --mmccaalllleerr--ssuuppeerr--iinntteerrwwoorrkkiinngg  --mmccaalllleeee--ssuuppeerr--iinntteerrwwoorrkkiinngg --mmttpp==_n_a_m_e
           --mmwwoorrdd--rreellooccaattiioonnss --mmffiixx--ccoorrtteexx--mm33--llddrrdd

           _A_V_R _O_p_t_i_o_n_s --mmmmccuu==_m_c_u  --mmssiizzee  --mmnnoo--iinntteerrrruuppttss --mmccaallll--pprroolloogguueess
           --mmnnoo--ttaabblleejjuummpp  --mmttiinnyy--ssttaacckk  --mmiinntt88

           _B_l_a_c_k_f_i_n _O_p_t_i_o_n_s --mmccppuu==_c_p_u[--_s_i_r_e_v_i_s_i_o_n] --mmssiimm
           --mmoommiitt--lleeaaff--ffrraammee--ppooiinntteerr  --mmnnoo--oommiitt--lleeaaff--ffrraammee--ppooiinntteerr
           --mmssppeecclldd--aannoommaallyy  --mmnnoo--ssppeecclldd--aannoommaallyy  --mmccssyynncc--aannoommaallyy
           --mmnnoo--ccssyynncc--aannoommaallyy --mmllooww--6644kk --mmnnoo--llooww6644kk  --mmssttaacckk--cchheecckk--ll11
           --mmiidd--sshhaarreedd--lliibbrraarryy --mmnnoo--iidd--sshhaarreedd--lliibbrraarryy  --mmsshhaarreedd--lliibbrraarryy--iidd==_n
           --mmlleeaaff--iidd--sshhaarreedd--lliibbrraarryy  --mmnnoo--lleeaaff--iidd--sshhaarreedd--lliibbrraarryy --mmsseepp--ddaattaa
           --mmnnoo--sseepp--ddaattaa  --mmlloonngg--ccaallllss  --mmnnoo--lloonngg--ccaallllss --mmffaasstt--ffpp --mmiinnlliinnee--pplltt
           --mmmmuullttiiccoorree  --mmccoorreeaa  --mmccoorreebb  --mmssddrraamm --mmiiccppllbb

           _C_R_I_S _O_p_t_i_o_n_s --mmccppuu==_c_p_u  --mmaarrcchh==_c_p_u  --mmttuunnee==_c_p_u --mmmmaaxx--ssttaacckk--ffrraammee==_n
           --mmeelliinnuuxx--ssttaacckkssiizzee==_n --mmeettrraaxx44  --mmeettrraaxx110000  --mmppddeebbuugg  --mmcccc--iinniitt
           --mmnnoo--ssiiddee--eeffffeeccttss --mmssttaacckk--aalliiggnn  --mmddaattaa--aalliiggnn  --mmccoonnsstt--aalliiggnn
           --mm3322--bbiitt  --mm1166--bbiitt  --mm88--bbiitt  --mmnnoo--pprroolloogguuee--eeppiilloogguuee  --mmnnoo--ggoottpplltt
           --mmeellff  --mmaaoouutt  --mmeelliinnuuxx  --mmlliinnuuxx  --ssiimm  --ssiimm22 --mmmmuull--bbuugg--wwoorrkkaarroouunndd
           --mmnnoo--mmuull--bbuugg--wwoorrkkaarroouunndd

           _C_R_X _O_p_t_i_o_n_s --mmmmaacc --mmppuusshh--aarrggss

           _D_a_r_w_i_n _O_p_t_i_o_n_s --aallll__llooaadd  --aalllloowwaabbllee__cclliieenntt  --aarrcchh
           --aarrcchh__eerrrroorrss__ffaattaall --aarrcchh__oonnllyy  --bbiinndd__aatt__llooaadd  --bbuunnddllee
           --bbuunnddllee__llooaaddeerr --cclliieenntt__nnaammee  --ccoommppaattiibbiilliittyy__vveerrssiioonn
           --ccuurrrreenntt__vveerrssiioonn --ddeeaadd__ssttrriipp --ddeeppeennddeennccyy--ffiillee  --ddyylliibb__ffiillee
           --ddyylliinnkkeerr__iinnssttaallll__nnaammee --ddyynnaammiicc  --ddyynnaammiicclliibb
           --eexxppoorrtteedd__ssyymmbboollss__lliisstt --ffiilleelliisstt  --ffllaatt__nnaammeessppaaccee
           --ffoorrccee__ccppuussuubbttyyppee__AALLLL --ffoorrccee__ffllaatt__nnaammeessppaaccee
           --hheeaaddeerrppaadd__mmaaxx__iinnssttaallll__nnaammeess --iiffrraammeewwoorrkk --iimmaaggee__bbaassee  --iinniitt
           --iinnssttaallll__nnaammee  --kkeeeepp__pprriivvaattee__eexxtteerrnnss --mmuullttii__mmoodduullee
           --mmuullttiippllyy__ddeeffiinneedd  --mmuullttiippllyy__ddeeffiinneedd__uunnuusseedd --nnooaallll__llooaadd
           --nnoo__ddeeaadd__ssttrriipp__iinniittss__aanndd__tteerrmmss --nnooffiixxpprreebbiinnddiinngg --nnoommuullttiiddeeffss
           --nnoopprreebbiinndd  --nnoosseegglliinnkkeeddiitt --ppaaggeezzeerroo__ssiizzee  --pprreebbiinndd
           --pprreebbiinndd__aallll__ttwwoolleevveell__mmoodduulleess --pprriivvaattee__bbuunnddllee  --rreeaadd__oonnllyy__rreellooccss
           --sseeccttaalliiggnn --sseeccttoobbjjeeccttssyymmbboollss  --wwhhyyllooaadd  --sseegg11aaddddrr --sseeccttccrreeaattee
           --sseeccttoobbjjeeccttssyymmbboollss  --sseeccttoorrddeerr --sseeggaaddddrr --sseeggss__rreeaadd__oonnllyy__aaddddrr
           --sseeggss__rreeaadd__wwrriittee__aaddddrr --sseegg__aaddddrr__ttaabbllee  --sseegg__aaddddrr__ttaabbllee__ffiilleennaammee
           --sseegglliinnkkeeddiitt --sseeggpprroott  --sseeggss__rreeaadd__oonnllyy__aaddddrr  --sseeggss__rreeaadd__wwrriittee__aaddddrr
           --ssiinnggllee__mmoodduullee  --ssttaattiicc  --ssuubb__lliibbrraarryy  --ssuubb__uummbbrreellllaa
           --ttwwoolleevveell__nnaammeessppaaccee  --uummbbrreellllaa  --uunnddeeffiinneedd --uunneexxppoorrtteedd__ssyymmbboollss__lliisstt
           --wweeaakk__rreeffeerreennccee__mmiissmmaattcchheess --wwhhaattssllooaaddeedd --FF --gguusseedd --ggffuullll
           --mmmmaaccoossxx--vveerrssiioonn--mmiinn==_v_e_r_s_i_o_n --mmkkeerrnneell --mmoonnee--bbyyttee--bbooooll

           _D_E_C _A_l_p_h_a _O_p_t_i_o_n_s --mmnnoo--ffpp--rreeggss  --mmssoofftt--ffllooaatt  --mmaallpphhaa--aass  --mmggaass
           --mmiieeeeee  --mmiieeeeee--wwiitthh--iinneexxaacctt  --mmiieeeeee--ccoonnffoorrmmaanntt --mmffpp--ttrraapp--mmooddee==_m_o_d_e
           --mmffpp--rroouunnddiinngg--mmooddee==_m_o_d_e --mmttrraapp--pprreecciissiioonn==_m_o_d_e  --mmbbuuiilldd--ccoonnssttaannttss
           --mmccppuu==_c_p_u_-_t_y_p_e  --mmttuunnee==_c_p_u_-_t_y_p_e --mmbbwwxx  --mmmmaaxx  --mmffiixx  --mmcciixx
           --mmffllooaatt--vvaaxx  --mmffllooaatt--iieeeeee --mmeexxpplliicciitt--rreellooccss  --mmssmmaallll--ddaattaa
           --mmllaarrggee--ddaattaa --mmssmmaallll--tteexxtt  --mmllaarrggee--tteexxtt --mmmmeemmoorryy--llaatteennccyy==_t_i_m_e

           _D_E_C _A_l_p_h_a_/_V_M_S _O_p_t_i_o_n_s --mmvvmmss--rreettuurrnn--ccooddeess

           _F_R_3_0 _O_p_t_i_o_n_s --mmssmmaallll--mmooddeell --mmnnoo--llssiimm

           _F_R_V _O_p_t_i_o_n_s --mmggpprr--3322  --mmggpprr--6644  --mmffpprr--3322  --mmffpprr--6644 --mmhhaarrdd--ffllooaatt
           --mmssoofftt--ffllooaatt --mmaalllloocc--cccc  --mmffiixxeedd--cccc  --mmddwwoorrdd  --mmnnoo--ddwwoorrdd --mmddoouubbllee
           --mmnnoo--ddoouubbllee --mmmmeeddiiaa  --mmnnoo--mmeeddiiaa  --mmmmuullaadddd  --mmnnoo--mmuullaadddd --mmffddppiicc
           --mmiinnlliinnee--pplltt --mmggpprreell--rroo  --mmuullttiilliibb--lliibbrraarryy--ppiicc --mmlliinnkkeedd--ffpp
           --mmlloonngg--ccaallllss  --mmaalliiggnn--llaabbeellss --mmlliibbrraarryy--ppiicc  --mmaacccc--44  --mmaacccc--88 --mmppaacckk
           --mmnnoo--ppaacckk  --mmnnoo--eeffllaaggss  --mmccoonndd--mmoovvee  --mmnnoo--ccoonndd--mmoovvee
           --mmooppttiimmiizzee--mmeemmbbaarr --mmnnoo--ooppttiimmiizzee--mmeemmbbaarr --mmsscccc  --mmnnoo--sscccc  --mmccoonndd--eexxeecc
           --mmnnoo--ccoonndd--eexxeecc --mmvvlliiww--bbrraanncchh  --mmnnoo--vvlliiww--bbrraanncchh --mmmmuullttii--ccoonndd--eexxeecc
           --mmnnoo--mmuullttii--ccoonndd--eexxeecc  --mmnneesstteedd--ccoonndd--eexxeecc --mmnnoo--nneesstteedd--ccoonndd--eexxeecc
           --mmttoommccaatt--ssttaattss --mmTTLLSS --mmttllss --mmccppuu==_c_p_u

           _G_N_U_/_L_i_n_u_x _O_p_t_i_o_n_s --mmuucclliibbcc

           _H_8_/_3_0_0 _O_p_t_i_o_n_s --mmrreellaaxx  --mmhh  --mmss  --mmnn  --mmiinntt3322  --mmaalliiggnn--330000

           _H_P_P_A _O_p_t_i_o_n_s --mmaarrcchh==_a_r_c_h_i_t_e_c_t_u_r_e_-_t_y_p_e --mmbbiigg--sswwiittcchh
           --mmddiissaabbllee--ffpprreeggss  --mmddiissaabbllee--iinnddeexxiinngg --mmffaasstt--iinnddiirreecctt--ccaallllss  --mmggaass
           --mmggnnuu--lldd   --mmhhpp--lldd --mmffiixxeedd--rraannggee==_r_e_g_i_s_t_e_r_-_r_a_n_g_e --mmjjuummpp--iinn--ddeellaayy
           --mmlliinnkkeerr--oopptt --mmlloonngg--ccaallllss --mmlloonngg--llooaadd--ssttoorree  --mmnnoo--bbiigg--sswwiittcchh
           --mmnnoo--ddiissaabbllee--ffpprreeggss --mmnnoo--ddiissaabbllee--iinnddeexxiinngg  --mmnnoo--ffaasstt--iinnddiirreecctt--ccaallllss
           --mmnnoo--ggaass --mmnnoo--jjuummpp--iinn--ddeellaayy  --mmnnoo--lloonngg--llooaadd--ssttoorree
           --mmnnoo--ppoorrttaabbllee--rruunnttiimmee  --mmnnoo--ssoofftt--ffllooaatt --mmnnoo--ssppaaccee--rreeggss
           --mmssoofftt--ffllooaatt  --mmppaa--rriisscc--11--00 --mmppaa--rriisscc--11--11  --mmppaa--rriisscc--22--00
           --mmppoorrttaabbllee--rruunnttiimmee --mmsscchheedduullee==_c_p_u_-_t_y_p_e  --mmssppaaccee--rreeggss  --mmssiioo  --mmwwssiioo
           --mmuunniixx==_u_n_i_x_-_s_t_d  --nnoolliibbddlldd  --ssttaattiicc  --tthhrreeaaddss

           _i_3_8_6 _a_n_d _x_8_6_-_6_4 _O_p_t_i_o_n_s --mmttuunnee==_c_p_u_-_t_y_p_e  --mmaarrcchh==_c_p_u_-_t_y_p_e
           --mmffppmmaatthh==_u_n_i_t --mmaassmm==_d_i_a_l_e_c_t  --mmnnoo--ffaannccyy--mmaatthh--338877 --mmnnoo--ffpp--rreett--iinn--338877
           --mmssoofftt--ffllooaatt --mmnnoo--wwiiddee--mmuullttiippllyy  --mmrrttdd  --mmaalliiggnn--ddoouubbllee
           --mmpprreeffeerrrreedd--ssttaacckk--bboouunnddaarryy==_n_u_m --mmiinnccoommiinngg--ssttaacckk--bboouunnddaarryy==_n_u_m --mmcclldd
           --mmccxx1166 --mmssaahhff --mmmmoovvbbee --mmccrrcc3322 --mmrreecciipp --mmmmmmxx  --mmssssee  --mmssssee22 --mmssssee33
           --mmssssssee33 --mmssssee44..11 --mmssssee44..22 --mmssssee44 --mmaavvxx --mmaaeess --mmppccllmmuull --mmffssggssbbaassee
           --mmrrddrrnndd --mmff1166cc --mmffuusseedd--mmaadddd --mmssssee44aa --mm33ddnnooww --mmppooppccnntt --mmaabbmm --mmbbmmii
           --mmttbbmm --mmffmmaa44 --mmxxoopp --mmllwwpp --mmtthhrreeaaddss  --mmnnoo--aalliiggnn--ssttrriinnggooppss
           --mmiinnlliinnee--aallll--ssttrriinnggooppss --mmiinnlliinnee--ssttrriinnggooppss--ddyynnaammiiccaallllyy
           --mmssttrriinnggoopp--ssttrraatteeggyy==_a_l_g --mmppuusshh--aarrggss  --mmaaccccuummuullaattee--oouuttggooiinngg--aarrggss
           --mm112288bbiitt--lloonngg--ddoouubbllee --mm9966bbiitt--lloonngg--ddoouubbllee  --mmrreeggppaarrmm==_n_u_m
           --mmsssseerreeggppaarrmm --mmvveecclliibbaabbii==_t_y_p_e --mmppcc3322 --mmppcc6644 --mmppcc8800 --mmssttaacckkrreeaalliiggnn
           --mmoommiitt--lleeaaff--ffrraammee--ppooiinntteerr  --mmnnoo--rreedd--zzoonnee --mmnnoo--ttllss--ddiirreecctt--sseegg--rreeffss
           --mmccmmooddeell==_c_o_d_e_-_m_o_d_e_l --mm3322  --mm6644 --mmllaarrggee--ddaattaa--tthhrreesshhoolldd==_n_u_m --mmssssee22aavvxx

           _i_3_8_6 _a_n_d _x_8_6_-_6_4 _W_i_n_d_o_w_s _O_p_t_i_o_n_s --mmccoonnssoollee --mmccyyggwwiinn --mmnnoo--ccyyggwwiinn
           --mmddllll --mmnnoopp--ffuunn--ddlllliimmppoorrtt --mmtthhrreeaadd --mmwwiinn3322 --mmwwiinnddoowwss

           _I_A_-_6_4 _O_p_t_i_o_n_s --mmbbiigg--eennddiiaann  --mmlliittttllee--eennddiiaann  --mmggnnuu--aass  --mmggnnuu--lldd
           --mmnnoo--ppiicc --mmvvoollaattiillee--aassmm--ssttoopp  --mmrreeggiisstteerr--nnaammeess  --mmnnoo--ssddaattaa
           --mmccoonnssttaanntt--ggpp  --mmaauuttoo--ppiicc  --mmiinnlliinnee--ffllooaatt--ddiivviiddee--mmiinn--llaatteennccyy
           --mmiinnlliinnee--ffllooaatt--ddiivviiddee--mmaaxx--tthhrroouugghhppuutt
           --mmiinnlliinnee--iinntt--ddiivviiddee--mmiinn--llaatteennccyy --mmiinnlliinnee--iinntt--ddiivviiddee--mmaaxx--tthhrroouugghhppuutt
           --mmiinnlliinnee--ssqqrrtt--mmiinn--llaatteennccyy --mmiinnlliinnee--ssqqrrtt--mmaaxx--tthhrroouugghhppuutt
           --mmnnoo--ddwwaarrff22--aassmm --mmeeaarrllyy--ssttoopp--bbiittss --mmffiixxeedd--rraannggee==_r_e_g_i_s_t_e_r_-_r_a_n_g_e
           --mmttllss--ssiizzee==_t_l_s_-_s_i_z_e --mmttuunnee==_c_p_u_-_t_y_p_e --mmtt --pptthhrreeaadd --mmiillpp3322 --mmllpp6644
           --mmnnoo--sscchheedd--bbrr--ddaattaa--ssppeecc --mmsscchheedd--aarr--ddaattaa--ssppeecc
           --mmnnoo--sscchheedd--ccoonnttrrooll--ssppeecc --mmsscchheedd--bbrr--iinn--ddaattaa--ssppeecc
           --mmsscchheedd--aarr--iinn--ddaattaa--ssppeecc --mmsscchheedd--iinn--ccoonnttrrooll--ssppeecc --mmsscchheedd--llddcc
           --mmnnoo--sscchheedd--ccoonnttrrooll--llddcc --mmnnoo--sscchheedd--ssppeecc--vveerrbboossee
           --mmnnoo--sscchheedd--pprreeffeerr--nnoonn--ddaattaa--ssppeecc--iinnssnnss
           --mmnnoo--sscchheedd--pprreeffeerr--nnoonn--ccoonnttrrooll--ssppeecc--iinnssnnss
           --mmnnoo--sscchheedd--ccoouunntt--ssppeecc--iinn--ccrriittiiccaall--ppaatthh

           _M_3_2_R_/_D _O_p_t_i_o_n_s --mm3322rr22 --mm3322rrxx --mm3322rr --mmddeebbuugg --mmaalliiggnn--llooooppss
           --mmnnoo--aalliiggnn--llooooppss --mmiissssuuee--rraattee==_n_u_m_b_e_r --mmbbrraanncchh--ccoosstt==_n_u_m_b_e_r
           --mmmmooddeell==_c_o_d_e_-_s_i_z_e_-_m_o_d_e_l_-_t_y_p_e --mmssddaattaa==_s_d_a_t_a_-_t_y_p_e --mmnnoo--fflluusshh--ffuunncc
           --mmfflluusshh--ffuunncc==_n_a_m_e --mmnnoo--fflluusshh--ttrraapp --mmfflluusshh--ttrraapp==_n_u_m_b_e_r --GG _n_u_m

           _M_3_2_C _O_p_t_i_o_n_s --mmccppuu==_c_p_u --mmssiimm --mmeemmrreeggss==_n_u_m_b_e_r

           _M_6_8_0_x_0 _O_p_t_i_o_n_s --mmaarrcchh==_a_r_c_h  --mmccppuu==_c_p_u  --mmttuunnee==_t_u_n_e --mm6688000000  --mm6688002200
           --mm6688002200--4400  --mm6688002200--6600  --mm6688003300  --mm6688004400 --mm6688006600  --mmccppuu3322  --mm55220000
           --mm55220066ee  --mm552288xx  --mm55330077  --mm55440077 --mmccffvv44ee  --mmbbiittffiieelldd  --mmnnoo--bbiittffiieelldd
           --mmcc6688000000  --mmcc6688002200 --mmnnoobbiittffiieelldd  --mmrrttdd  --mmnnoo--rrttdd  --mmddiivv  --mmnnoo--ddiivv
           --mmsshhoorrtt --mmnnoo--sshhoorrtt  --mmhhaarrdd--ffllooaatt  --mm6688888811  --mmssoofftt--ffllooaatt  --mmppccrreell
           --mmaalliiggnn--iinntt  --mmssttrriicctt--aalliiggnn  --mmsseepp--ddaattaa  --mmnnoo--sseepp--ddaattaa
           --mmsshhaarreedd--lliibbrraarryy--iidd==nn  --mmiidd--sshhaarreedd--lliibbrraarryy  --mmnnoo--iidd--sshhaarreedd--lliibbrraarryy
           --mmxxggoott --mmnnoo--xxggoott

           _M_6_8_h_c_1_x _O_p_t_i_o_n_s --mm66881111  --mm66881122  --mm6688hhcc1111  --mm6688hhcc1122   --mm6688hhccss1122
           --mmaauuttoo--iinnccddeecc  --mmiinnmmaaxx  --mmlloonngg--ccaallllss  --mmsshhoorrtt
           --mmssoofftt--rreegg--ccoouunntt==_c_o_u_n_t

           _M_C_o_r_e _O_p_t_i_o_n_s --mmhhaarrddlliitt  --mmnnoo--hhaarrddlliitt  --mmddiivv  --mmnnoo--ddiivv
           --mmrreellaaxx--iimmmmeeddiiaatteess --mmnnoo--rreellaaxx--iimmmmeeddiiaatteess  --mmwwiiddee--bbiittffiieellddss
           --mmnnoo--wwiiddee--bbiittffiieellddss --mm44bbyyttee--ffuunnccttiioonnss  --mmnnoo--44bbyyttee--ffuunnccttiioonnss
           --mmccaallllggrraapphh--ddaattaa --mmnnoo--ccaallllggrraapphh--ddaattaa  --mmssllooww--bbyytteess  --mmnnoo--ssllooww--bbyytteess
           --mmnnoo--llssiimm --mmlliittttllee--eennddiiaann  --mmbbiigg--eennddiiaann  --mm221100  --mm334400
           --mmssttaacckk--iinnccrreemmeenntt

           _M_I_P_S _O_p_t_i_o_n_s --EELL  --EEBB  --mmaarrcchh==_a_r_c_h  --mmttuunnee==_a_r_c_h --mmiippss11  --mmiippss22
           --mmiippss33  --mmiippss44  --mmiippss3322  --mmiippss3322rr22 --mmiippss6644  --mmiippss6644rr22 --mmiippss1166
           --mmnnoo--mmiippss1166  --mmfflliipp--mmiippss1166 --mmiinntteerrlliinnkk--mmiippss1166
           --mmnnoo--iinntteerrlliinnkk--mmiippss1166 --mmaabbii==_a_b_i  --mmaabbiiccaallllss  --mmnnoo--aabbiiccaallllss --mmsshhaarreedd
           --mmnnoo--sshhaarreedd  --mmpplltt  --mmnnoo--pplltt  --mmxxggoott  --mmnnoo--xxggoott --mmggpp3322  --mmggpp6644
           --mmffpp3322  --mmffpp6644  --mmhhaarrdd--ffllooaatt  --mmssoofftt--ffllooaatt --mmssiinnggllee--ffllooaatt
           --mmddoouubbllee--ffllooaatt  --mmddsspp  --mmnnoo--ddsspp  --mmddsspprr22  --mmnnoo--ddsspprr22 --mmffppuu==_f_p_u_-_t_y_p_e
           --mmssmmaarrttmmiippss  --mmnnoo--ssmmaarrttmmiippss --mmppaaiirreedd--ssiinnggllee  --mmnnoo--ppaaiirreedd--ssiinnggllee
           --mmddmmxx  --mmnnoo--mmddmmxx --mmiippss33dd  --mmnnoo--mmiippss33dd  --mmmmtt  --mmnnoo--mmtt  --mmllllsscc
           --mmnnoo--llllsscc --mmlloonngg6644  --mmlloonngg3322  --mmssyymm3322  --mmnnoo--ssyymm3322 --GG_n_u_m
           --mmllooccaall--ssddaattaa  --mmnnoo--llooccaall--ssddaattaa --mmeexxtteerrnn--ssddaattaa  --mmnnoo--eexxtteerrnn--ssddaattaa
           --mmggppoopptt  --mmnnoo--ggoopptt --mmeemmbbeeddddeedd--ddaattaa  --mmnnoo--eemmbbeeddddeedd--ddaattaa
           --mmuunniinniitt--ccoonnsstt--iinn--rrooddaattaa  --mmnnoo--uunniinniitt--ccoonnsstt--iinn--rrooddaattaa
           --mmccooddee--rreeaaddaabbllee==_s_e_t_t_i_n_g --mmsspplliitt--aaddddrreesssseess  --mmnnoo--sspplliitt--aaddddrreesssseess
           --mmeexxpplliicciitt--rreellooccss  --mmnnoo--eexxpplliicciitt--rreellooccss --mmcchheecckk--zzeerroo--ddiivviissiioonn
           --mmnnoo--cchheecckk--zzeerroo--ddiivviissiioonn --mmddiivviiddee--ttrraappss  --mmddiivviiddee--bbrreeaakkss --mmmmeemmccppyy
           --mmnnoo--mmeemmccppyy  --mmlloonngg--ccaallllss  --mmnnoo--lloonngg--ccaallllss --mmmmaadd  --mmnnoo--mmaadd
           --mmffuusseedd--mmaadddd  --mmnnoo--ffuusseedd--mmaadddd  --nnooccpppp --mmffiixx--rr44000000  --mmnnoo--ffiixx--rr44000000
           --mmffiixx--rr44440000  --mmnnoo--ffiixx--rr44440000 --mmffiixx--rr1100000000 --mmnnoo--ffiixx--rr1100000000
           --mmffiixx--vvrr44112200  --mmnnoo--ffiixx--vvrr44112200 --mmffiixx--vvrr44113300  --mmnnoo--ffiixx--vvrr44113300
           --mmffiixx--ssbb11  --mmnnoo--ffiixx--ssbb11 --mmfflluusshh--ffuunncc==_f_u_n_c  --mmnnoo--fflluusshh--ffuunncc
           --mmbbrraanncchh--ccoosstt==_n_u_m  --mmbbrraanncchh--lliikkeellyy  --mmnnoo--bbrraanncchh--lliikkeellyy
           --mmffpp--eexxcceeppttiioonnss --mmnnoo--ffpp--eexxcceeppttiioonnss --mmvvrr44113300--aalliiggnn --mmnnoo--vvrr44113300--aalliiggnn

           _M_M_I_X _O_p_t_i_o_n_s --mmlliibbffuunnccss  --mmnnoo--lliibbffuunnccss  --mmeeppssiilloonn  --mmnnoo--eeppssiilloonn
           --mmaabbii==ggnnuu --mmaabbii==mmmmiixxwwaarree  --mmzzeerroo--eexxtteenndd  --mmkknnuutthhddiivv
           --mmttoopplleevveell--ssyymmbboollss --mmeellff  --mmbbrraanncchh--pprreeddiicctt  --mmnnoo--bbrraanncchh--pprreeddiicctt
           --mmbbaassee--aaddddrreesssseess --mmnnoo--bbaassee--aaddddrreesssseess  --mmssiinnggllee--eexxiitt
           --mmnnoo--ssiinnggllee--eexxiitt

           _M_N_1_0_3_0_0 _O_p_t_i_o_n_s --mmmmuulltt--bbuugg  --mmnnoo--mmuulltt--bbuugg --mmaamm3333  --mmnnoo--aamm3333
           --mmaamm3333--22  --mmnnoo--aamm3333--22 --mmrreettuurrnn--ppooiinntteerr--oonn--dd00 --mmnnoo--ccrrtt00  --mmrreellaaxx

           _P_D_P_-_1_1 _O_p_t_i_o_n_s --mmffppuu  --mmssoofftt--ffllooaatt  --mmaacc00  --mmnnoo--aacc00  --mm4400  --mm4455
           --mm1100 --mmbbccooppyy  --mmbbccooppyy--bbuuiillttiinn  --mmiinntt3322  --mmnnoo--iinntt1166 --mmiinntt1166
           --mmnnoo--iinntt3322  --mmffllooaatt3322  --mmnnoo--ffllooaatt6644 --mmffllooaatt6644  --mmnnoo--ffllooaatt3322
           --mmaabbsshhii  --mmnnoo--aabbsshhii --mmbbrraanncchh--eexxppeennssiivvee  --mmbbrraanncchh--cchheeaapp --mmsspplliitt
           --mmnnoo--sspplliitt  --mmuunniixx--aassmm  --mmddeecc--aassmm

           _p_i_c_o_C_h_i_p _O_p_t_i_o_n_s --mmaaee==_a_e___t_y_p_e --mmvvlliiww--llooookkaahheeaadd==_N
           --mmssyymmbbooll--aass--aaddddrreessss --mmnnoo--iinneeffffiicciieenntt--wwaarrnniinnggss

           _P_o_w_e_r_P_C _O_p_t_i_o_n_s See RS/6000 and PowerPC Options.

           _R_S_/_6_0_0_0 _a_n_d _P_o_w_e_r_P_C _O_p_t_i_o_n_s --mmccppuu==_c_p_u_-_t_y_p_e --mmttuunnee==_c_p_u_-_t_y_p_e
           --mmccmmooddeell==_c_o_d_e_-_m_o_d_e_l --mmppoowweerr  --mmnnoo--ppoowweerr  --mmppoowweerr22  --mmnnoo--ppoowweerr22
           --mmppoowweerrppcc  --mmppoowweerrppcc6644  --mmnnoo--ppoowweerrppcc --mmaallttiivveecc  --mmnnoo--aallttiivveecc
           --mmppoowweerrppcc--ggppoopptt  --mmnnoo--ppoowweerrppcc--ggppoopptt --mmppoowweerrppcc--ggffxxoopptt
           --mmnnoo--ppoowweerrppcc--ggffxxoopptt --mmmmffccrrff  --mmnnoo--mmffccrrff  --mmppooppccnnttbb  --mmnnoo--ppooppccnnttbb
           --mmppooppccnnttdd --mmnnoo--ppooppccnnttdd --mmffpprrnndd  --mmnnoo--ffpprrnndd --mmccmmppbb --mmnnoo--ccmmppbb
           --mmmmffppggpprr --mmnnoo--mmffppggpprr --mmhhaarrdd--ddffpp --mmnnoo--hhaarrdd--ddffpp --mmnneeww--mmnneemmoonniiccss
           --mmoolldd--mmnneemmoonniiccss --mmffuullll--ttoocc   --mmmmiinniimmaall--ttoocc  --mmnnoo--ffpp--iinn--ttoocc
           --mmnnoo--ssuumm--iinn--ttoocc --mm6644  --mm3322  --mmxxll--ccoommppaatt  --mmnnoo--xxll--ccoommppaatt  --mmppee
           --mmaalliiggnn--ppoowweerr  --mmaalliiggnn--nnaattuurraall --mmssoofftt--ffllooaatt  --mmhhaarrdd--ffllooaatt
           --mmmmuullttiippllee  --mmnnoo--mmuullttiippllee --mmssiinnggllee--ffllooaatt --mmddoouubbllee--ffllooaatt
           --mmssiimmppllee--ffppuu --mmssttrriinngg  --mmnnoo--ssttrriinngg  --mmuuppddaattee  --mmnnoo--uuppddaattee
           --mmaavvooiidd--iinnddeexxeedd--aaddddrreesssseess  --mmnnoo--aavvooiidd--iinnddeexxeedd--aaddddrreesssseess
           --mmffuusseedd--mmaadddd  --mmnnoo--ffuusseedd--mmaadddd  --mmbbiitt--aalliiggnn  --mmnnoo--bbiitt--aalliiggnn
           --mmssttrriicctt--aalliiggnn  --mmnnoo--ssttrriicctt--aalliiggnn  --mmrreellooccaattaabbllee --mmnnoo--rreellooccaattaabbllee
           --mmrreellooccaattaabbllee--lliibb  --mmnnoo--rreellooccaattaabbllee--lliibb --mmttoocc  --mmnnoo--ttoocc  --mmlliittttllee
           --mmlliittttllee--eennddiiaann  --mmbbiigg  --mmbbiigg--eennddiiaann --mmddyynnaammiicc--nnoo--ppiicc  --mmaallttiivveecc
           --mmsswwddiivv --mmpprriioorriittiizzee--rreessttrriicctteedd--iinnssnnss==_p_r_i_o_r_i_t_y
           --mmsscchheedd--ccoossttllyy--ddeepp==_d_e_p_e_n_d_e_n_c_e___t_y_p_e --mmiinnsseerrtt--sscchheedd--nnooppss==_s_c_h_e_m_e
           --mmccaallll--ssyyssvv  --mmccaallll--nneettbbssdd --mmaaiixx--ssttrruucctt--rreettuurrnn
           --mmssvvrr44--ssttrruucctt--rreettuurrnn --mmaabbii==_a_b_i_-_t_y_p_e --mmsseeccuurree--pplltt --mmbbssss--pplltt --mmiisseell
           --mmnnoo--iisseell --mmiisseell==yyeess  --mmiisseell==nnoo --mmssppee --mmnnoo--ssppee --mmssppee==yyeess  --mmssppee==nnoo
           --mmppaaiirreedd --mmggeenn--cceellll--mmiiccrrooccooddee --mmwwaarrnn--cceellll--mmiiccrrooccooddee --mmvvrrssaavvee
           --mmnnoo--vvrrssaavvee --mmmmuullhhww --mmnnoo--mmuullhhww --mmddllmmzzbb --mmnnoo--ddllmmzzbb --mmffllooaatt--ggpprrss==yyeess
           --mmffllooaatt--ggpprrss==nnoo --mmffllooaatt--ggpprrss==ssiinnggllee --mmffllooaatt--ggpprrss==ddoouubbllee --mmpprroottoottyyppee
           --mmnnoo--pprroottoottyyppee --mmssiimm  --mmmmvvmmee  --mmaaddss  --mmyyeelllloowwkknniiffee  --mmeemmbb  --mmssddaattaa
           --mmssddaattaa==_o_p_t  --mmvvxxwwoorrkkss  --GG _n_u_m  --pptthhrreeaadd

           _S_/_3_9_0 _a_n_d _z_S_e_r_i_e_s _O_p_t_i_o_n_s --mmttuunnee==_c_p_u_-_t_y_p_e  --mmaarrcchh==_c_p_u_-_t_y_p_e
           --mmhhaarrdd--ffllooaatt  --mmssoofftt--ffllooaatt  --mmhhaarrdd--ddffpp --mmnnoo--hhaarrdd--ddffpp
           --mmlloonngg--ddoouubbllee--6644 --mmlloonngg--ddoouubbllee--112288 --mmbbaacckkcchhaaiinn  --mmnnoo--bbaacckkcchhaaiinn
           --mmppaacckkeedd--ssttaacckk  --mmnnoo--ppaacckkeedd--ssttaacckk --mmssmmaallll--eexxeecc  --mmnnoo--ssmmaallll--eexxeecc
           --mmmmvvccllee --mmnnoo--mmvvccllee --mm6644  --mm3311  --mmddeebbuugg  --mmnnoo--ddeebbuugg  --mmeessaa  --mmzzaarrcchh
           --mmttppff--ttrraaccee --mmnnoo--ttppff--ttrraaccee  --mmffuusseedd--mmaadddd  --mmnnoo--ffuusseedd--mmaadddd
           --mmwwaarrnn--ffrraammeessiizzee  --mmwwaarrnn--ddyynnaammiiccssttaacckk  --mmssttaacckk--ssiizzee --mmssttaacckk--gguuaarrdd

           _S_c_o_r_e _O_p_t_i_o_n_s --mmeebb --mmeell --mmnnhhwwlloooopp --mmuullss --mmmmaacc --mmssccoorree55 --mmssccoorree55uu
           --mmssccoorree77 --mmssccoorree77dd

           _S_H _O_p_t_i_o_n_s --mm11  --mm22  --mm22ee  --mm33  --mm33ee --mm44--nnooffppuu  --mm44--ssiinnggllee--oonnllyy
           --mm44--ssiinnggllee  --mm44 --mm44aa--nnooffppuu --mm44aa--ssiinnggllee--oonnllyy --mm44aa--ssiinnggllee --mm44aa --mm44aall
           --mm55--6644mmeeddiiaa  --mm55--6644mmeeddiiaa--nnooffppuu --mm55--3322mmeeddiiaa  --mm55--3322mmeeddiiaa--nnooffppuu
           --mm55--ccoommppaacctt  --mm55--ccoommppaacctt--nnooffppuu --mmbb  --mmll  --mmddaalliiggnn  --mmrreellaaxx
           --mmbbiiggttaabbllee  --mmffmmoovvdd  --mmhhiittaacchhii --mmrreenneessaass --mmnnoo--rreenneessaass --mmnnoommaaccssaavvee
           --mmiieeeeee  --mmbbiittooppss  --mmiissiizzee  --mmiinnlliinnee--iicc__iinnvvaalliiddaattee --mmppaaddssttrruucctt
           --mmssppaaccee --mmpprreeffeerrggoott  --mmuusseerrmmooddee --mmuullttccoosstt==_n_u_m_b_e_r --mmddiivv==_s_t_r_a_t_e_g_y
           --mmddiivvssii33__lliibbffuunncc==_n_a_m_e --mmffiixxeedd--rraannggee==_r_e_g_i_s_t_e_r_-_r_a_n_g_e --mmaaddjjuusstt--uunnrroollll
           --mmiinnddeexxeedd--aaddddrreessssiinngg --mmggeettttrrccoosstt==_n_u_m_b_e_r --mmpptt--ffiixxeedd
           --mmiinnvvaalliidd--ssyymmbboollss

           _S_P_A_R_C _O_p_t_i_o_n_s --mmccppuu==_c_p_u_-_t_y_p_e --mmttuunnee==_c_p_u_-_t_y_p_e --mmccmmooddeell==_c_o_d_e_-_m_o_d_e_l
           --mm3322  --mm6644  --mmaapppp--rreeggss  --mmnnoo--aapppp--rreeggss --mmffaasstteerr--ssttrruuccttss
           --mmnnoo--ffaasstteerr--ssttrruuccttss --mmffppuu  --mmnnoo--ffppuu  --mmhhaarrdd--ffllooaatt  --mmssoofftt--ffllooaatt
           --mmhhaarrdd--qquuaadd--ffllooaatt  --mmssoofftt--qquuaadd--ffllooaatt --mmiimmppuurree--tteexxtt
           --mmnnoo--iimmppuurree--tteexxtt  --mmlliittttllee--eennddiiaann --mmssttaacckk--bbiiaass  --mmnnoo--ssttaacckk--bbiiaass
           --mmuunnaalliiggnneedd--ddoouubblleess  --mmnnoo--uunnaalliiggnneedd--ddoouubblleess --mmvv88pplluuss  --mmnnoo--vv88pplluuss
           --mmvviiss  --mmnnoo--vviiss --tthhrreeaaddss --pptthhrreeaaddss --pptthhrreeaadd

           _S_P_U _O_p_t_i_o_n_s --mmwwaarrnn--rreelloocc --mmeerrrroorr--rreelloocc --mmssaaffee--ddmmaa --mmuunnssaaffee--ddmmaa
           --mmbbrraanncchh--hhiinnttss --mmssmmaallll--mmeemm --mmllaarrggee--mmeemm --mmssttddmmaaiinn
           --mmffiixxeedd--rraannggee==_r_e_g_i_s_t_e_r_-_r_a_n_g_e

           _S_y_s_t_e_m _V _O_p_t_i_o_n_s --QQyy  --QQnn  --YYPP,,_p_a_t_h_s  --YYmm,,_d_i_r

           _V_8_5_0 _O_p_t_i_o_n_s --mmlloonngg--ccaallllss  --mmnnoo--lloonngg--ccaallllss  --mmeepp  --mmnnoo--eepp
           --mmpprroolloogg--ffuunnccttiioonn  --mmnnoo--pprroolloogg--ffuunnccttiioonn  --mmssppaaccee --mmttddaa==_n  --mmssddaa==_n
           --mmzzddaa==_n --mmaapppp--rreeggss  --mmnnoo--aapppp--rreeggss --mmddiissaabbllee--ccaalllltt
           --mmnnoo--ddiissaabbllee--ccaalllltt --mmvv885500ee11 --mmvv885500ee --mmvv885500  --mmbbiigg--sswwiittcchh

           _V_A_X _O_p_t_i_o_n_s --mmgg  --mmggnnuu  --mmuunniixx

           _V_x_W_o_r_k_s _O_p_t_i_o_n_s --mmrrttpp  --nnoonn--ssttaattiicc  --BBssttaattiicc  --BBddyynnaammiicc --XXbbiinndd--llaazzyy
           --XXbbiinndd--nnooww

           _x_8_6_-_6_4 _O_p_t_i_o_n_s See i386 and x86-64 Options.

           _X_s_t_o_r_m_y_1_6 _O_p_t_i_o_n_s --mmssiimm

           _X_t_e_n_s_a _O_p_t_i_o_n_s --mmccoonnsstt1166 --mmnnoo--ccoonnsstt1166 --mmffuusseedd--mmaadddd  --mmnnoo--ffuusseedd--mmaadddd
           --mmsseerriiaalliizzee--vvoollaattiillee  --mmnnoo--sseerriiaalliizzee--vvoollaattiillee
           --mmtteexxtt--sseeccttiioonn--lliitteerraallss  --mmnnoo--tteexxtt--sseeccttiioonn--lliitteerraallss --mmttaarrggeett--aalliiggnn
           --mmnnoo--ttaarrggeett--aalliiggnn --mmlloonnggccaallllss  --mmnnoo--lloonnggccaallllss

           _z_S_e_r_i_e_s _O_p_t_i_o_n_s See S/390 and zSeries Options.

       _C_o_d_e _G_e_n_e_r_a_t_i_o_n _O_p_t_i_o_n_s
           --ffccaallll--ssaavveedd--_r_e_g  --ffccaallll--uusseedd--_r_e_g --ffffiixxeedd--_r_e_g  --ffeexxcceeppttiioonnss
           --ffnnoonn--ccaallll--eexxcceeppttiioonnss  --ffuunnwwiinndd--ttaabblleess --ffaassyynncchhrroonnoouuss--uunnwwiinndd--ttaabblleess
           --ffiinnhhiibbiitt--ssiizzee--ddiirreeccttiivvee  --ffiinnssttrruummeenntt--ffuunnccttiioonnss
           --ffiinnssttrruummeenntt--ffuunnccttiioonnss--eexxcclluuddee--ffuunnccttiioonn--lliisstt==_s_y_m,,_s_y_m,,......
           --ffiinnssttrruummeenntt--ffuunnccttiioonnss--eexxcclluuddee--ffiillee--lliisstt==_f_i_l_e,,_f_i_l_e,,......  --ffnnoo--ccoommmmoonn
           --ffnnoo--iiddeenntt --ffppcccc--ssttrruucctt--rreettuurrnn  --ffppiicc  --ffPPIICC --ffppiiee --ffPPIIEE
           --ffnnoo--jjuummpp--ttaabblleess --ffrreeccoorrdd--ggcccc--sswwiittcchheess --ffrreegg--ssttrruucctt--rreettuurrnn
           --ffsshhoorrtt--eennuummss --ffsshhoorrtt--ddoouubbllee  --ffsshhoorrtt--wwcchhaarr --ffvveerrbboossee--aassmm
           --ffppaacckk--ssttrruucctt[[==_n]]  --ffssttaacckk--cchheecckk --ffssttaacckk--lliimmiitt--rreeggiisstteerr==_r_e_g
           --ffssttaacckk--lliimmiitt--ssyymmbbooll==_s_y_m --ffnnoo--ssttaacckk--lliimmiitt  --ffaarrgguummeenntt--aalliiaass
           --ffaarrgguummeenntt--nnooaalliiaass --ffaarrgguummeenntt--nnooaalliiaass--gglloobbaall
           --ffaarrgguummeenntt--nnooaalliiaass--aannyytthhiinngg --fflleeaaddiinngg--uunnddeerrssccoorree  --ffttllss--mmooddeell==_m_o_d_e_l
           --ffttrraappvv  --ffwwrraappvv  --ffbboouunnddss--cchheecckk --ffvviissiibbiilliittyy

   OOppttiioonnss CCoonnttrroolllliinngg tthhee KKiinndd ooff OOuuttppuutt
       Compilation can involve up to four stages: preprocessing, compilation
       proper, assembly and linking, always in that order.  GCC is capable of
       preprocessing and compiling several files either into several assembler
       input files, or into one assembler input file; then each assembler
       input file produces an object file, and linking combines all the object
       files (those newly compiled, and those specified as input) into an
       executable file.

       For any given input file, the file name suffix determines what kind of
       compilation is done:

       _f_i_l_e..cc
           C source code which must be preprocessed.

       _f_i_l_e..ii
           C source code which should not be preprocessed.

       _f_i_l_e..iiii
           C++ source code which should not be preprocessed.

       _f_i_l_e..mm
           Objective-C source code.  Note that you must link with the _l_i_b_o_b_j_c
           library to make an Objective-C program work.

       _f_i_l_e..mmii
           Objective-C source code which should not be preprocessed.

       _f_i_l_e..mmmm
       _f_i_l_e..MM
           Objective-C++ source code.  Note that you must link with the
           _l_i_b_o_b_j_c library to make an Objective-C++ program work.  Note that
           ..MM refers to a literal capital M.

       _f_i_l_e..mmiiii
           Objective-C++ source code which should not be preprocessed.

       _f_i_l_e..hh
           C, C++, Objective-C or Objective-C++ header file to be turned into
           a precompiled header.

       _f_i_l_e..cccc
       _f_i_l_e..ccpp
       _f_i_l_e..ccxxxx
       _f_i_l_e..ccpppp
       _f_i_l_e..CCPPPP
       _f_i_l_e..cc++++
       _f_i_l_e..CC
           C++ source code which must be preprocessed.  Note that in ..ccxxxx, the
           last two letters must both be literally xx.  Likewise, ..CC refers to
           a literal capital C.

       _f_i_l_e..mmmm
       _f_i_l_e..MM
           Objective-C++ source code which must be preprocessed.

       _f_i_l_e..mmiiii
           Objective-C++ source code which should not be preprocessed.

       _f_i_l_e..hhhh
       _f_i_l_e..HH
       _f_i_l_e..hhpp
       _f_i_l_e..hhxxxx
       _f_i_l_e..hhpppp
       _f_i_l_e..HHPPPP
       _f_i_l_e..hh++++
       _f_i_l_e..ttcccc
           C++ header file to be turned into a precompiled header.

       _f_i_l_e..ff
       _f_i_l_e..ffoorr
       _f_i_l_e..ffttnn
           Fixed form Fortran source code which should not be preprocessed.

       _f_i_l_e..FF
       _f_i_l_e..FFOORR
       _f_i_l_e..ffpppp
       _f_i_l_e..FFPPPP
       _f_i_l_e..FFTTNN
           Fixed form Fortran source code which must be preprocessed (with the
           traditional preprocessor).

       _f_i_l_e..ff9900
       _f_i_l_e..ff9955
       _f_i_l_e..ff0033
       _f_i_l_e..ff0088
           Free form Fortran source code which should not be preprocessed.

       _f_i_l_e..FF9900
       _f_i_l_e..FF9955
       _f_i_l_e..FF0033
       _f_i_l_e..FF0088
           Free form Fortran source code which must be preprocessed (with the
           traditional preprocessor).

       _f_i_l_e..aaddss
           Ada source code file which contains a library unit declaration (a
           declaration of a package, subprogram, or generic, or a generic
           instantiation), or a library unit renaming declaration (a package,
           generic, or subprogram renaming declaration).  Such files are also
           called _s_p_e_c_s.

       _f_i_l_e..aaddbb
           Ada source code file containing a library unit body (a subprogram
           or package body).  Such files are also called _b_o_d_i_e_s.

       _f_i_l_e..ss
           Assembler code.

       _f_i_l_e..SS
       _f_i_l_e..ssxx
           Assembler code which must be preprocessed.

       _o_t_h_e_r
           An object file to be fed straight into linking.  Any file name with
           no recognized suffix is treated this way.

       You can specify the input language explicitly with the --xx option:

       --xx _l_a_n_g_u_a_g_e
           Specify explicitly the _l_a_n_g_u_a_g_e for the following input files
           (rather than letting the compiler choose a default based on the
           file name suffix).  This option applies to all following input
           files until the next --xx option.  Possible values for _l_a_n_g_u_a_g_e are:

                   c  c-header  c-cpp-output
                   c++  c++-header  c++-cpp-output
                   objective-c  objective-c-header  objective-c-cpp-output
                   objective-c++ objective-c++-header objective-c++-cpp-output
                   assembler  assembler-with-cpp
                   ada
                   f77  f77-cpp-input f95  f95-cpp-input
                   java

       --xx nnoonnee
           Turn off any specification of a language, so that subsequent files
           are handled according to their file name suffixes (as they are if
           --xx has not been used at all).

       --ppaassss--eexxiitt--ccooddeess
           Normally the ggcccc program will exit with the code of 1 if any phase
           of the compiler returns a non-success return code.  If you specify
           --ppaassss--eexxiitt--ccooddeess, the ggcccc program will instead return with
           numerically highest error produced by any phase that returned an
           error indication.  The C, C++, and Fortran frontends return 4, if
           an internal compiler error is encountered.

       If you only want some of the stages of compilation, you can use --xx (or
       filename suffixes) to tell ggcccc where to start, and one of the options
       --cc, --SS, or --EE to say where ggcccc is to stop.  Note that some combinations
       (for example, --xx ccpppp--oouuttppuutt --EE) instruct ggcccc to do nothing at all.

       --cc  Compile or assemble the source files, but do not link.  The linking
           stage simply is not done.  The ultimate output is in the form of an
           object file for each source file.

           By default, the object file name for a source file is made by
           replacing the suffix ..cc, ..ii, ..ss, etc., with ..oo.

           Unrecognized input files, not requiring compilation or assembly,
           are ignored.

       --SS  Stop after the stage of compilation proper; do not assemble.  The
           output is in the form of an assembler code file for each non-
           assembler input file specified.

           By default, the assembler file name for a source file is made by
           replacing the suffix ..cc, ..ii, etc., with ..ss.

           Input files that donâ€™t require compilation are ignored.

       --EE  Stop after the preprocessing stage; do not run the compiler proper.
           The output is in the form of preprocessed source code, which is
           sent to the standard output.

           Input files which donâ€™t require preprocessing are ignored.

       --oo _f_i_l_e
           Place output in file _f_i_l_e.  This applies regardless to whatever
           sort of output is being produced, whether it be an executable file,
           an object file, an assembler file or preprocessed C code.

           If --oo is not specified, the default is to put an executable file in
           _a_._o_u_t, the object file for _s_o_u_r_c_e_._s_u_f_f_i_x in _s_o_u_r_c_e_._o, its assembler
           file in _s_o_u_r_c_e_._s, a precompiled header file in _s_o_u_r_c_e_._s_u_f_f_i_x_._g_c_h,
           and all preprocessed C source on standard output.

       --vv  Print (on standard error output) the commands executed to run the
           stages of compilation.  Also print the version number of the
           compiler driver program and of the preprocessor and the compiler
           proper.

       --######
           Like --vv except the commands are not executed and all command
           arguments are quoted.  This is useful for shell scripts to capture
           the driver-generated command lines.

       --ppiippee
           Use pipes rather than temporary files for communication between the
           various stages of compilation.  This fails to work on some systems
           where the assembler is unable to read from a pipe; but the GNU
           assembler has no trouble.

       --ccoommbbiinnee
           If you are compiling multiple source files, this option tells the
           driver to pass all the source files to the compiler at once (for
           those languages for which the compiler can handle this).  This will
           allow intermodule analysis (IMA) to be performed by the compiler.
           Currently the only language for which this is supported is C.  If
           you pass source files for multiple languages to the driver, using
           this option, the driver will invoke the compiler(s) that support
           IMA once each, passing each compiler all the source files
           appropriate for it.  For those languages that do not support IMA
           this option will be ignored, and the compiler will be invoked once
           for each source file in that language.  If you use this option in
           conjunction with --ssaavvee--tteemmppss, the compiler will generate multiple
           pre-processed files (one for each source file), but only one
           (combined) _._o or _._s file.

       ----hheellpp
           Print (on the standard output) a description of the command line
           options understood by ggcccc.  If the --vv option is also specified then
           ----hheellpp will also be passed on to the various processes invoked by
           ggcccc, so that they can display the command line options they accept.
           If the --WWeexxttrraa option has also been specified (prior to the ----hheellpp
           option), then command line options which have no documentation
           associated with them will also be displayed.

       ----ttaarrggeett--hheellpp
           Print (on the standard output) a description of target-specific
           command line options for each tool.  For some targets extra target-
           specific information may also be printed.

       ----hheellpp=={{_c_l_a_s_s|[^^]_q_u_a_l_i_f_i_e_r}}[,,......]
           Print (on the standard output) a description of the command line
           options understood by the compiler that fit into all specified
           classes and qualifiers.  These are the supported classes:

           ooppttiimmiizzeerrss
               This will display all of the optimization options supported by
               the compiler.

           wwaarrnniinnggss
               This will display all of the options controlling warning
               messages produced by the compiler.

           ttaarrggeett
               This will display target-specific options.  Unlike the
               ----ttaarrggeett--hheellpp option however, target-specific options of the
               linker and assembler will not be displayed.  This is because
               those tools do not currently support the extended ----hheellpp==
               syntax.

           ppaarraammss
               This will display the values recognized by the ----ppaarraamm option.

           _l_a_n_g_u_a_g_e
               This will display the options supported for _l_a_n_g_u_a_g_e, where
               _l_a_n_g_u_a_g_e is the name of one of the languages supported in this
               version of GCC.

           ccoommmmoonn
               This will display the options that are common to all languages.

           These are the supported qualifiers:

           uunnddooccuummeenntteedd
               Display only those options which are undocumented.

           jjooiinneedd
               Display options which take an argument that appears after an
               equal sign in the same continuous piece of text, such as:
               ----hheellpp==ttaarrggeett.

           sseeppaarraattee
               Display options which take an argument that appears as a
               separate word following the original option, such as: --oo
               oouuttppuutt--ffiillee.

           Thus for example to display all the undocumented target-specific
           switches supported by the compiler the following can be used:

                   --help=target,undocumented

           The sense of a qualifier can be inverted by prefixing it with the ^^
           character, so for example to display all binary warning options
           (i.e., ones that are either on or off and that do not take an
           argument), which have a description the following can be used:

                   --help=warnings,^joined,^undocumented

           The argument to ----hheellpp== should not consist solely of inverted
           qualifiers.

           Combining several classes is possible, although this usually
           restricts the output by so much that there is nothing to display.
           One case where it does work however is when one of the classes is
           _t_a_r_g_e_t.  So for example to display all the target-specific
           optimization options the following can be used:

                   --help=target,optimizers

           The ----hheellpp== option can be repeated on the command line.  Each
           successive use will display its requested class of options,
           skipping those that have already been displayed.

           If the --QQ option appears on the command line before the ----hheellpp==
           option, then the descriptive text displayed by ----hheellpp== is changed.
           Instead of describing the displayed options, an indication is given
           as to whether the option is enabled, disabled or set to a specific
           value (assuming that the compiler knows this at the point where the
           ----hheellpp== option is used).

           Here is a truncated example from the ARM port of ggcccc:

                     % gcc -Q -mabi=2 --help=target -c
                     The following options are target specific:
                     -mabi=                                2
                     -mabort-on-noreturn                   [disabled]
                     -mapcs                                [disabled]

           The output is sensitive to the effects of previous command line
           options, so for example it is possible to find out which
           optimizations are enabled at --OO22 by using:

                   -Q -O2 --help=optimizers

           Alternatively you can discover which binary optimizations are
           enabled by --OO33 by using:

                   gcc -c -Q -O3 --help=optimizers > /tmp/O3-opts
                   gcc -c -Q -O2 --help=optimizers > /tmp/O2-opts
                   diff /tmp/O2-opts /tmp/O3-opts | grep enabled

       ----vveerrssiioonn
           Display the version number and copyrights of the invoked GCC.

       --wwrraappppeerr
           Invoke all subcommands under a wrapper program. It takes a single
           comma separated list as an argument, which will be used to invoke
           the wrapper:

                   gcc -c t.c -wrapper gdb,--args

           This will invoke all subprograms of gcc under "gdb --args", thus
           cc1 invocation will be "gdb --args cc1 ...".

       @@_f_i_l_e
           Read command-line options from _f_i_l_e.  The options read are inserted
           in place of the original @_f_i_l_e option.  If _f_i_l_e does not exist, or
           cannot be read, then the option will be treated literally, and not
           removed.

           Options in _f_i_l_e are separated by whitespace.  A whitespace
           character may be included in an option by surrounding the entire
           option in either single or double quotes.  Any character (including
           a backslash) may be included by prefixing the character to be
           included with a backslash.  The _f_i_l_e may itself contain additional
           @_f_i_l_e options; any such options will be processed recursively.

   CCoommppiilliinngg CC++++ PPrrooggrraammss
       C++ source files conventionally use one of the suffixes ..CC, ..cccc, ..ccpppp,
       ..CCPPPP, ..cc++++, ..ccpp, or ..ccxxxx; C++ header files often use ..hhhh, ..hhpppp, ..HH, or
       (for shared template code) ..ttcccc; and preprocessed C++ files use the
       suffix ..iiii.  GCC recognizes files with these names and compiles them as
       C++ programs even if you call the compiler the same way as for
       compiling C programs (usually with the name ggcccc).

       However, the use of ggcccc does not add the C++ library.  gg++++ is a program
       that calls GCC and treats ..cc, ..hh and ..ii files as C++ source files
       instead of C source files unless --xx is used, and automatically
       specifies linking against the C++ library.  This program is also useful
       when precompiling a C header file with a ..hh extension for use in C++
       compilations.  On many systems, gg++++ is also installed with the name
       cc++++.

       When you compile C++ programs, you may specify many of the same
       command-line options that you use for compiling programs in any
       language; or command-line options meaningful for C and related
       languages; or options that are meaningful only for C++ programs.

   OOppttiioonnss CCoonnttrroolllliinngg CC DDiiaalleecctt
       The following options control the dialect of C (or languages derived
       from C, such as C++, Objective-C and Objective-C++) that the compiler
       accepts:

       --aannssii
           In C mode, this is equivalent to --ssttdd==cc8899. In C++ mode, it is
           equivalent to --ssttdd==cc++++9988.

           This turns off certain features of GCC that are incompatible with
           ISO C90 (when compiling C code), or of standard C++ (when compiling
           C++ code), such as the "asm" and "typeof" keywords, and predefined
           macros such as "unix" and "vax" that identify the type of system
           you are using.  It also enables the undesirable and rarely used ISO
           trigraph feature.  For the C compiler, it disables recognition of
           C++ style //// comments as well as the "inline" keyword.

           The alternate keywords "__asm__", "__extension__", "__inline__" and
           "__typeof__" continue to work despite --aannssii.  You would not want to
           use them in an ISO C program, of course, but it is useful to put
           them in header files that might be included in compilations done
           with --aannssii.  Alternate predefined macros such as "__unix__" and
           "__vax__" are also available, with or without --aannssii.

           The --aannssii option does not cause non-ISO programs to be rejected
           gratuitously.  For that, --ppeeddaannttiicc is required in addition to
           --aannssii.

           The macro "__STRICT_ANSI__" is predefined when the --aannssii option is
           used.  Some header files may notice this macro and refrain from
           declaring certain functions or defining certain macros that the ISO
           standard doesnâ€™t call for; this is to avoid interfering with any
           programs that might use these names for other things.

           Functions that would normally be built in but do not have semantics
           defined by ISO C (such as "alloca" and "ffs") are not built-in
           functions when --aannssii is used.

       --ssttdd==
           Determine the language standard.   This option is currently only
           supported when compiling C or C++.

           The compiler can accept several base standards, such as cc8899 or
           cc++++9988, and GNU dialects of those standards, such as ggnnuu8899 or
           ggnnuu++++9988.  By specifying a base standard, the compiler will accept
           all programs following that standard and those using GNU extensions
           that do not contradict it.  For example, --ssttdd==cc8899 turns off certain
           features of GCC that are incompatible with ISO C90, such as the
           "asm" and "typeof" keywords, but not other GNU extensions that do
           not have a meaning in ISO C90, such as omitting the middle term of
           a "?:" expression. On the other hand, by specifying a GNU dialect
           of a standard, all features the compiler support are enabled, even
           when those features change the meaning of the base standard and
           some strict-conforming programs may be rejected.  The particular
           standard is used by --ppeeddaannttiicc to identify which features are GNU
           extensions given that version of the standard. For example
           --ssttdd==ggnnuu8899 --ppeeddaannttiicc would warn about C++ style //// comments, while
           --ssttdd==ggnnuu9999 --ppeeddaannttiicc would not.

           A value for this option must be provided; possible values are

           cc8899
           iissoo99889999::11999900
               Support all ISO C90 programs (certain GNU extensions that
               conflict with ISO C90 are disabled). Same as --aannssii for C code.

           iissoo99889999::119999440099
               ISO C90 as modified in amendment 1.

           cc9999
           cc99xx
           iissoo99889999::11999999
           iissoo99889999::119999xx
               ISO C99.  Note that this standard is not yet fully supported;
               see <hhttttpp::////ggcccc..ggnnuu..oorrgg//ggcccc--44..44//cc9999ssttaattuuss..hhttmmll> for more
               information.  The names cc99xx and iissoo99889999::119999xx are deprecated.

           ggnnuu8899
               GNU dialect of ISO C90 (including some C99 features). This is
               the default for C code.

           ggnnuu9999
           ggnnuu99xx
               GNU dialect of ISO C99.  When ISO C99 is fully implemented in
               GCC, this will become the default.  The name ggnnuu99xx is
               deprecated.

           cc++++9988
               The 1998 ISO C++ standard plus amendments. Same as --aannssii for
               C++ code.

           ggnnuu++++9988
               GNU dialect of --ssttdd==cc++++9988.  This is the default for C++ code.

           cc++++00xx
               The working draft of the upcoming ISO C++0x standard. This
               option enables experimental features that are likely to be
               included in C++0x. The working draft is constantly changing,
               and any feature that is enabled by this flag may be removed
               from future versions of GCC if it is not part of the C++0x
               standard.

           ggnnuu++++00xx
               GNU dialect of --ssttdd==cc++++00xx. This option enables experimental
               features that may be removed in future versions of GCC.

       --ffggnnuu8899--iinnlliinnee
           The option --ffggnnuu8899--iinnlliinnee tells GCC to use the traditional GNU
           semantics for "inline" functions when in C99 mode.
             This option is accepted and ignored by GCC versions 4.1.3 up to
           but not including 4.3.  In GCC versions 4.3 and later it changes
           the behavior of GCC in C99 mode.  Using this option is roughly
           equivalent to adding the "gnu_inline" function attribute to all
           inline functions.

           The option --ffnnoo--ggnnuu8899--iinnlliinnee explicitly tells GCC to use the C99
           semantics for "inline" when in C99 or gnu99 mode (i.e., it
           specifies the default behavior).  This option was first supported
           in GCC 4.3.  This option is not supported in C89 or gnu89 mode.

           The preprocessor macros "__GNUC_GNU_INLINE__" and
           "__GNUC_STDC_INLINE__" may be used to check which semantics are in
           effect for "inline" functions.

       --aauuxx--iinnffoo _f_i_l_e_n_a_m_e
           Output to the given filename prototyped declarations for all
           functions declared and/or defined in a translation unit, including
           those in header files.  This option is silently ignored in any
           language other than C.

           Besides declarations, the file indicates, in comments, the origin
           of each declaration (source file and line), whether the declaration
           was implicit, prototyped or unprototyped (II, NN for new or OO for
           old, respectively, in the first character after the line number and
           the colon), and whether it came from a declaration or a definition
           (CC or FF, respectively, in the following character).  In the case of
           function definitions, a K&R-style list of arguments followed by
           their declarations is also provided, inside comments, after the
           declaration.

       --ffnnoo--aassmm
           Do not recognize "asm", "inline" or "typeof" as a keyword, so that
           code can use these words as identifiers.  You can use the keywords
           "__asm__", "__inline__" and "__typeof__" instead.  --aannssii implies
           --ffnnoo--aassmm.

           In C++, this switch only affects the "typeof" keyword, since "asm"
           and "inline" are standard keywords.  You may want to use the
           --ffnnoo--ggnnuu--kkeeyywwoorrddss flag instead, which has the same effect.  In C99
           mode (--ssttdd==cc9999 or --ssttdd==ggnnuu9999), this switch only affects the "asm"
           and "typeof" keywords, since "inline" is a standard keyword in ISO
           C99.

       --ffnnoo--bbuuiillttiinn
       --ffnnoo--bbuuiillttiinn--_f_u_n_c_t_i_o_n
           Donâ€™t recognize built-in functions that do not begin with
           ____bbuuiillttiinn__ as prefix.

           GCC normally generates special code to handle certain built-in
           functions more efficiently; for instance, calls to "alloca" may
           become single instructions that adjust the stack directly, and
           calls to "memcpy" may become inline copy loops.  The resulting code
           is often both smaller and faster, but since the function calls no
           longer appear as such, you cannot set a breakpoint on those calls,
           nor can you change the behavior of the functions by linking with a
           different library.  In addition, when a function is recognized as a
           built-in function, GCC may use information about that function to
           warn about problems with calls to that function, or to generate
           more efficient code, even if the resulting code still contains
           calls to that function.  For example, warnings are given with
           --WWffoorrmmaatt for bad calls to "printf", when "printf" is built in, and
           "strlen" is known not to modify global memory.

           With the --ffnnoo--bbuuiillttiinn--_f_u_n_c_t_i_o_n option only the built-in function
           _f_u_n_c_t_i_o_n is disabled.  _f_u_n_c_t_i_o_n must not begin with ____bbuuiillttiinn__.  If
           a function is named that is not built-in in this version of GCC,
           this option is ignored.  There is no corresponding
           --ffbbuuiillttiinn--_f_u_n_c_t_i_o_n option; if you wish to enable built-in functions
           selectively when using --ffnnoo--bbuuiillttiinn or --ffffrreeeessttaannddiinngg, you may
           define macros such as:

                   #define abs(n)          __builtin_abs ((n))
                   #define strcpy(d, s)    __builtin_strcpy ((d), (s))

       --ffhhoosstteedd
           Assert that compilation takes place in a hosted environment.  This
           implies --ffbbuuiillttiinn.  A hosted environment is one in which the entire
           standard library is available, and in which "main" has a return
           type of "int".  Examples are nearly everything except a kernel.
           This is equivalent to --ffnnoo--ffrreeeessttaannddiinngg.

       --ffffrreeeessttaannddiinngg
           Assert that compilation takes place in a freestanding environment.
           This implies --ffnnoo--bbuuiillttiinn.  A freestanding environment is one in
           which the standard library may not exist, and program startup may
           not necessarily be at "main".  The most obvious example is an OS
           kernel.  This is equivalent to --ffnnoo--hhoosstteedd.

       --ffooppeennmmpp
           Enable handling of OpenMP directives "#pragma omp" in C/C++ and
           "!$omp" in Fortran.  When --ffooppeennmmpp is specified, the compiler
           generates parallel code according to the OpenMP Application Program
           Interface v2.5 <hhttttpp::////wwwwww..ooppeennmmpp..oorrgg//>.  This option implies
           --pptthhrreeaadd, and thus is only supported on targets that have support
           for --pptthhrreeaadd.

       --ffmmss--eexxtteennssiioonnss
           Accept some non-standard constructs used in Microsoft header files.

           Some cases of unnamed fields in structures and unions are only
           accepted with this option.

       --ttrriiggrraapphhss
           Support ISO C trigraphs.  The --aannssii option (and --ssttdd options for
           strict ISO C conformance) implies --ttrriiggrraapphhss.

       --nnoo--iinntteeggrraatteedd--ccpppp
           Performs a compilation in two passes: preprocessing and compiling.
           This option allows a user supplied "cc1", "cc1plus", or "cc1obj"
           via the --BB option.  The user supplied compilation step can then add
           in an additional preprocessing step after normal preprocessing but
           before compiling.  The default is to use the integrated cpp
           (internal cpp)

           The semantics of this option will change if "cc1", "cc1plus", and
           "cc1obj" are merged.

       --ttrraaddiittiioonnaall
       --ttrraaddiittiioonnaall--ccpppp
           Formerly, these options caused GCC to attempt to emulate a pre-
           standard C compiler.  They are now only supported with the --EE
           switch.  The preprocessor continues to support a pre-standard mode.
           See the GNU CPP manual for details.

       --ffccoonndd--mmiissmmaattcchh
           Allow conditional expressions with mismatched types in the second
           and third arguments.  The value of such an expression is void.
           This option is not supported for C++.

       --ffllaaxx--vveeccttoorr--ccoonnvveerrssiioonnss
           Allow implicit conversions between vectors with differing numbers
           of elements and/or incompatible element types.  This option should
           not be used for new code.

       --ffuunnssiiggnneedd--cchhaarr
           Let the type "char" be unsigned, like "unsigned char".

           Each kind of machine has a default for what "char" should be.  It
           is either like "unsigned char" by default or like "signed char" by
           default.

           Ideally, a portable program should always use "signed char" or
           "unsigned char" when it depends on the signedness of an object.
           But many programs have been written to use plain "char" and expect
           it to be signed, or expect it to be unsigned, depending on the
           machines they were written for.  This option, and its inverse, let
           you make such a program work with the opposite default.

           The type "char" is always a distinct type from each of "signed
           char" or "unsigned char", even though its behavior is always just
           like one of those two.

       --ffssiiggnneedd--cchhaarr
           Let the type "char" be signed, like "signed char".

           Note that this is equivalent to --ffnnoo--uunnssiiggnneedd--cchhaarr, which is the
           negative form of --ffuunnssiiggnneedd--cchhaarr.  Likewise, the option
           --ffnnoo--ssiiggnneedd--cchhaarr is equivalent to --ffuunnssiiggnneedd--cchhaarr.

       --ffssiiggnneedd--bbiittffiieellddss
       --ffuunnssiiggnneedd--bbiittffiieellddss
       --ffnnoo--ssiiggnneedd--bbiittffiieellddss
       --ffnnoo--uunnssiiggnneedd--bbiittffiieellddss
           These options control whether a bit-field is signed or unsigned,
           when the declaration does not use either "signed" or "unsigned".
           By default, such a bit-field is signed, because this is consistent:
           the basic integer types such as "int" are signed types.

   OOppttiioonnss CCoonnttrroolllliinngg CC++++ DDiiaalleecctt
       This section describes the command-line options that are only
       meaningful for C++ programs; but you can also use most of the GNU
       compiler options regardless of what language your program is in.  For
       example, you might compile a file "firstClass.C" like this:

               g++ -g -frepo -O -c firstClass.C

       In this example, only --ffrreeppoo is an option meant only for C++ programs;
       you can use the other options with any language supported by GCC.

       Here is a list of options that are _o_n_l_y for compiling C++ programs:

       --ffaabbii--vveerrssiioonn==_n
           Use version _n of the C++ ABI.  Version 2 is the version of the C++
           ABI that first appeared in G++ 3.4.  Version 1 is the version of
           the C++ ABI that first appeared in G++ 3.2.  Version 0 will always
           be the version that conforms most closely to the C++ ABI
           specification.  Therefore, the ABI obtained using version 0 will
           change as ABI bugs are fixed.

           The default is version 2.

       --ffnnoo--aacccceessss--ccoonnttrrooll
           Turn off all access checking.  This switch is mainly useful for
           working around bugs in the access control code.

       --ffcchheecckk--nneeww
           Check that the pointer returned by "operator new" is non-null
           before attempting to modify the storage allocated.  This check is
           normally unnecessary because the C++ standard specifies that
           "operator new" will only return 0 if it is declared _tt_hh_rr_oo_ww_((_)), in
           which case the compiler will always check the return value even
           without this option.  In all other cases, when "operator new" has a
           non-empty exception specification, memory exhaustion is signalled
           by throwing "std::bad_alloc".  See also nneeww ((nnootthhrrooww)).

       --ffccoonnsseerrvvee--ssppaaccee
           Put uninitialized or runtime-initialized global variables into the
           common segment, as C does.  This saves space in the executable at
           the cost of not diagnosing duplicate definitions.  If you compile
           with this flag and your program mysteriously crashes after "main()"
           has completed, you may have an object that is being destroyed twice
           because two definitions were merged.

           This option is no longer useful on most targets, now that support
           has been added for putting variables into BSS without making them
           common.

       --ffnnoo--ddeedduuccee--iinniitt--lliisstt
           Disable deduction of a template type parameter as
           std::initializer_list from a brace-enclosed initializer list, i.e.

                   template <class T> auto forward(T t) -> decltype (realfn (t))
                   {
                     return realfn (t);
                   }

                   void f()
                   {
                     forward({1,2}); // call forward<std::initializer_list<int>>
                   }

           This option is present because this deduction is an extension to
           the current specification in the C++0x working draft, and there was
           some concern about potential overload resolution problems.

       --ffffrriieenndd--iinnjjeeccttiioonn
           Inject friend functions into the enclosing namespace, so that they
           are visible outside the scope of the class in which they are
           declared.  Friend functions were documented to work this way in the
           old Annotated C++ Reference Manual, and versions of G++ before 4.1
           always worked that way.  However, in ISO C++ a friend function
           which is not declared in an enclosing scope can only be found using
           argument dependent lookup.  This option causes friends to be
           injected as they were in earlier releases.

           This option is for compatibility, and may be removed in a future
           release of G++.

       --ffnnoo--eelliiddee--ccoonnssttrruuccttoorrss
           The C++ standard allows an implementation to omit creating a
           temporary which is only used to initialize another object of the
           same type.  Specifying this option disables that optimization, and
           forces G++ to call the copy constructor in all cases.

       --ffnnoo--eennffoorrccee--eehh--ssppeeccss
           Donâ€™t generate code to check for violation of exception
           specifications at runtime.  This option violates the C++ standard,
           but may be useful for reducing code size in production builds, much
           like defining NNDDEEBBUUGG.  This does not give user code permission to
           throw exceptions in violation of the exception specifications; the
           compiler will still optimize based on the specifications, so
           throwing an unexpected exception will result in undefined behavior.

       --ffffoorr--ssccooppee
       --ffnnoo--ffoorr--ssccooppee
           If --ffffoorr--ssccooppee is specified, the scope of variables declared in a
           _f_o_r_-_i_n_i_t_-_s_t_a_t_e_m_e_n_t is limited to the ffoorr loop itself, as specified
           by the C++ standard.  If --ffnnoo--ffoorr--ssccooppee is specified, the scope of
           variables declared in a _f_o_r_-_i_n_i_t_-_s_t_a_t_e_m_e_n_t extends to the end of
           the enclosing scope, as was the case in old versions of G++, and
           other (traditional) implementations of C++.

           The default if neither flag is given to follow the standard, but to
           allow and give a warning for old-style code that would otherwise be
           invalid, or have different behavior.

       --ffnnoo--ggnnuu--kkeeyywwoorrddss
           Do not recognize "typeof" as a keyword, so that code can use this
           word as an identifier.  You can use the keyword "__typeof__"
           instead.  --aannssii implies --ffnnoo--ggnnuu--kkeeyywwoorrddss.

       --ffnnoo--iimmpplliicciitt--tteemmppllaatteess
           Never emit code for non-inline templates which are instantiated
           implicitly (i.e. by use); only emit code for explicit
           instantiations.

       --ffnnoo--iimmpplliicciitt--iinnlliinnee--tteemmppllaatteess
           Donâ€™t emit code for implicit instantiations of inline templates,
           either.  The default is to handle inlines differently so that
           compiles with and without optimization will need the same set of
           explicit instantiations.

       --ffnnoo--iimmpplleemmeenntt--iinnlliinneess
           To save space, do not emit out-of-line copies of inline functions
           controlled by ##pprraaggmmaa iimmpplleemmeennttaattiioonn.  This will cause linker
           errors if these functions are not inlined everywhere they are
           called.

       --ffmmss--eexxtteennssiioonnss
           Disable pedantic warnings about constructs used in MFC, such as
           implicit int and getting a pointer to member function via non-
           standard syntax.

       --ffnnoo--nnoonnaannssii--bbuuiillttiinnss
           Disable built-in declarations of functions that are not mandated by
           ANSI/ISO C.  These include "ffs", "alloca", "_exit", "index",
           "bzero", "conjf", and other related functions.

       --ffnnoo--ooppeerraattoorr--nnaammeess
           Do not treat the operator name keywords "and", "bitand", "bitor",
           "compl", "not", "or" and "xor" as synonyms as keywords.

       --ffnnoo--ooppttiioonnaall--ddiiaaggss
           Disable diagnostics that the standard says a compiler does not need
           to issue.  Currently, the only such diagnostic issued by G++ is the
           one for a name having multiple meanings within a class.

       --ffppeerrmmiissssiivvee
           Downgrade some diagnostics about nonconformant code from errors to
           warnings.  Thus, using --ffppeerrmmiissssiivvee will allow some nonconforming
           code to compile.

       --ffrreeppoo
           Enable automatic template instantiation at link time.  This option
           also implies --ffnnoo--iimmpplliicciitt--tteemmppllaatteess.

       --ffnnoo--rrttttii
           Disable generation of information about every class with virtual
           functions for use by the C++ runtime type identification features
           (ddyynnaammiicc__ccaasstt and ttyyppeeiidd).  If you donâ€™t use those parts of the
           language, you can save some space by using this flag.  Note that
           exception handling uses the same information, but it will generate
           it as needed. The ddyynnaammiicc__ccaasstt operator can still be used for casts
           that do not require runtime type information, i.e. casts to "void
           *" or to unambiguous base classes.

       --ffssttaattss
           Emit statistics about front-end processing at the end of the
           compilation.  This information is generally only useful to the G++
           development team.

       --ffssttrriicctt--eennuummss
           Allow the compiler to optimize using the assumption that a value of
           enumeration type can only be one of the values of the enumeration
           (as defined in the C++ standard; basically, a value which can be
           represented in the minimum number of bits needed to represent all
           the enumerators).  This assumption may not be valid if the program
           uses a cast to convert an arbitrary integer value to the
           enumeration type.

       --fftteemmppllaattee--ddeepptthh--_n
           Set the maximum instantiation depth for template classes to _n.  A
           limit on the template instantiation depth is needed to detect
           endless recursions during template class instantiation.  ANSI/ISO
           C++ conforming programs must not rely on a maximum depth greater
           than 17.

       --ffnnoo--tthhrreeaaddssaaffee--ssttaattiiccss
           Do not emit the extra code to use the routines specified in the C++
           ABI for thread-safe initialization of local statics.  You can use
           this option to reduce code size slightly in code that doesnâ€™t need
           to be thread-safe.

       --ffuussee--ccxxaa--aatteexxiitt
           Register destructors for objects with static storage duration with
           the "__cxa_atexit" function rather than the "atexit" function.
           This option is required for fully standards-compliant handling of
           static destructors, but will only work if your C library supports
           "__cxa_atexit".

       --ffnnoo--uussee--ccxxaa--ggeett--eexxcceeppttiioonn--ppttrr
           Donâ€™t use the "__cxa_get_exception_ptr" runtime routine.  This will
           cause "std::uncaught_exception" to be incorrect, but is necessary
           if the runtime routine is not available.

       --ffvviissiibbiilliittyy--iinnlliinneess--hhiiddddeenn
           This switch declares that the user does not attempt to compare
           pointers to inline methods where the addresses of the two functions
           were taken in different shared objects.

           The effect of this is that GCC may, effectively, mark inline
           methods with "__attribute__ ((visibility ("hidden")))" so that they
           do not appear in the export table of a DSO and do not require a PLT
           indirection when used within the DSO.  Enabling this option can
           have a dramatic effect on load and link times of a DSO as it
           massively reduces the size of the dynamic export table when the
           library makes heavy use of templates.

           The behavior of this switch is not quite the same as marking the
           methods as hidden directly, because it does not affect static
           variables local to the function or cause the compiler to deduce
           that the function is defined in only one shared object.

           You may mark a method as having a visibility explicitly to negate
           the effect of the switch for that method.  For example, if you do
           want to compare pointers to a particular inline method, you might
           mark it as having default visibility.  Marking the enclosing class
           with explicit visibility will have no effect.

           Explicitly instantiated inline methods are unaffected by this
           option as their linkage might otherwise cross a shared library
           boundary.

       --ffvviissiibbiilliittyy--mmss--ccoommppaatt
           This flag attempts to use visibility settings to make GCCâ€™s C++
           linkage model compatible with that of Microsoft Visual Studio.

           The flag makes these changes to GCCâ€™s linkage model:

           1.  It sets the default visibility to "hidden", like
               --ffvviissiibbiilliittyy==hhiiddddeenn.

           2.  Types, but not their members, are not hidden by default.

           3.  The One Definition Rule is relaxed for types without explicit
               visibility specifications which are defined in more than one
               different shared object: those declarations are permitted if
               they would have been permitted when this option was not used.

           In new code it is better to use --ffvviissiibbiilliittyy==hhiiddddeenn and export
           those classes which are intended to be externally visible.
           Unfortunately it is possible for code to rely, perhaps
           accidentally, on the Visual Studio behavior.

           Among the consequences of these changes are that static data
           members of the same type with the same name but defined in
           different shared objects will be different, so changing one will
           not change the other; and that pointers to function members defined
           in different shared objects may not compare equal.  When this flag
           is given, it is a violation of the ODR to define types with the
           same name differently.

       --ffnnoo--wweeaakk
           Do not use weak symbol support, even if it is provided by the
           linker.  By default, G++ will use weak symbols if they are
           available.  This option exists only for testing, and should not be
           used by end-users; it will result in inferior code and has no
           benefits.  This option may be removed in a future release of G++.

       --nnoossttddiinncc++++
           Do not search for header files in the standard directories specific
           to C++, but do still search the other standard directories.  (This
           option is used when building the C++ library.)

       In addition, these optimization, warning, and code generation options
       have meanings only for C++ programs:

       --ffnnoo--ddeeffaauulltt--iinnlliinnee
           Do not assume iinnlliinnee for functions defined inside a class scope.
             Note that these functions will have linkage like inline
           functions; they just wonâ€™t be inlined by default.

       --WWaabbii (C, Objective-C, C++ and Objective-C++ only)
           Warn when G++ generates code that is probably not compatible with
           the vendor-neutral C++ ABI.  Although an effort has been made to
           warn about all such cases, there are probably some cases that are
           not warned about, even though G++ is generating incompatible code.
           There may also be cases where warnings are emitted even though the
           code that is generated will be compatible.

           You should rewrite your code to avoid these warnings if you are
           concerned about the fact that code generated by G++ may not be
           binary compatible with code generated by other compilers.

           The known incompatibilities at this point include:

           Â·   Incorrect handling of tail-padding for bit-fields.  G++ may
               attempt to pack data into the same byte as a base class.  For
               example:

                       struct A { virtual void f(); int f1 : 1; };
                       struct B : public A { int f2 : 1; };

               In this case, G++ will place "B::f2" into the same byte
               as"A::f1"; other compilers will not.  You can avoid this
               problem by explicitly padding "A" so that its size is a
               multiple of the byte size on your platform; that will cause G++
               and other compilers to layout "B" identically.

           Â·   Incorrect handling of tail-padding for virtual bases.  G++ does
               not use tail padding when laying out virtual bases.  For
               example:

                       struct A { virtual void f(); char c1; };
                       struct B { B(); char c2; };
                       struct C : public A, public virtual B {};

               In this case, G++ will not place "B" into the tail-padding for
               "A"; other compilers will.  You can avoid this problem by
               explicitly padding "A" so that its size is a multiple of its
               alignment (ignoring virtual base classes); that will cause G++
               and other compilers to layout "C" identically.

           Â·   Incorrect handling of bit-fields with declared widths greater
               than that of their underlying types, when the bit-fields appear
               in a union.  For example:

                       union U { int i : 4096; };

               Assuming that an "int" does not have 4096 bits, G++ will make
               the union too small by the number of bits in an "int".

           Â·   Empty classes can be placed at incorrect offsets.  For example:

                       struct A {};

                       struct B {
                         A a;
                         virtual void f ();
                       };

                       struct C : public B, public A {};

               G++ will place the "A" base class of "C" at a nonzero offset;
               it should be placed at offset zero.  G++ mistakenly believes
               that the "A" data member of "B" is already at offset zero.

           Â·   Names of template functions whose types involve "typename" or
               template template parameters can be mangled incorrectly.

                       template <typename Q>
                       void f(typename Q::X) {}

                       template <template <typename> class Q>
                       void f(typename Q<int>::X) {}

               Instantiations of these templates may be mangled incorrectly.

           It also warns psABI related changes.  The known psABI changes at
           this point include:

           Â·   For SYSV/x86-64, when passing union with long double, it is
               changed to pass in memory as specified in psABI.  For example:

                       union U {
                         long double ld;
                         int i;
                       };

               "union U" will always be passed in memory.

       --WWccttoorr--ddttoorr--pprriivvaaccyy (C++ and Objective-C++ only)
           Warn when a class seems unusable because all the constructors or
           destructors in that class are private, and it has neither friends
           nor public static member functions.

       --WWnnoonn--vviirrttuuaall--ddttoorr (C++ and Objective-C++ only)
           Warn when a class has virtual functions and accessible non-virtual
           destructor, in which case it would be possible but unsafe to delete
           an instance of a derived class through a pointer to the base class.
           This warning is also enabled if -Weffc++ is specified.

       --WWrreeoorrddeerr (C++ and Objective-C++ only)
           Warn when the order of member initializers given in the code does
           not match the order in which they must be executed.  For instance:

                   struct A {
                     int i;
                     int j;
                     A(): j (0), i (1) { }
                   };

           The compiler will rearrange the member initializers for ii and jj to
           match the declaration order of the members, emitting a warning to
           that effect.  This warning is enabled by --WWaallll.

       The following --WW...... options are not affected by --WWaallll.

       --WWeeffffcc++++ (C++ and Objective-C++ only)
           Warn about violations of the following style guidelines from Scott
           Meyersâ€™ _E_f_f_e_c_t_i_v_e _C_+_+ book:

           Â·   Item 11:  Define a copy constructor and an assignment operator
               for classes with dynamically allocated memory.

           Â·   Item 12:  Prefer initialization to assignment in constructors.

           Â·   Item 14:  Make destructors virtual in base classes.

           Â·   Item 15:  Have "operator=" return a reference to *this.

           Â·   Item 23:  Donâ€™t try to return a reference when you must return
               an object.

           Also warn about violations of the following style guidelines from
           Scott Meyersâ€™ _M_o_r_e _E_f_f_e_c_t_i_v_e _C_+_+ book:

           Â·   Item 6:  Distinguish between prefix and postfix forms of
               increment and decrement operators.

           Â·   Item 7:  Never overload "&&", "||", or ",".

           When selecting this option, be aware that the standard library
           headers do not obey all of these guidelines; use ggrreepp --vv to filter
           out those warnings.

       --WWssttrriicctt--nnuullll--sseennttiinneell (C++ and Objective-C++ only)
           Warn also about the use of an uncasted "NULL" as sentinel.  When
           compiling only with GCC this is a valid sentinel, as "NULL" is
           defined to "__null".  Although it is a null pointer constant not a
           null pointer, it is guaranteed to be of the same size as a pointer.
           But this use is not portable across different compilers.

       --WWnnoo--nnoonn--tteemmppllaattee--ffrriieenndd (C++ and Objective-C++ only)
           Disable warnings when non-templatized friend functions are declared
           within a template.  Since the advent of explicit template
           specification support in G++, if the name of the friend is an
           unqualified-id (i.e., ffrriieenndd ffoooo((iinntt))), the C++ language
           specification demands that the friend declare or define an
           ordinary, nontemplate function.  (Section 14.5.3).  Before G++
           implemented explicit specification, unqualified-ids could be
           interpreted as a particular specialization of a templatized
           function.  Because this non-conforming behavior is no longer the
           default behavior for G++, --WWnnoonn--tteemmppllaattee--ffrriieenndd allows the compiler
           to check existing code for potential trouble spots and is on by
           default.  This new compiler behavior can be turned off with
           --WWnnoo--nnoonn--tteemmppllaattee--ffrriieenndd which keeps the conformant compiler code
           but disables the helpful warning.

       --WWoolldd--ssttyyllee--ccaasstt (C++ and Objective-C++ only)
           Warn if an old-style (C-style) cast to a non-void type is used
           within a C++ program.  The new-style casts (ddyynnaammiicc__ccaasstt,
           ssttaattiicc__ccaasstt, rreeiinntteerrpprreett__ccaasstt, and ccoonnsstt__ccaasstt) are less vulnerable
           to unintended effects and much easier to search for.

       --WWoovveerrllooaaddeedd--vviirrttuuaall (C++ and Objective-C++ only)
           Warn when a function declaration hides virtual functions from a
           base class.  For example, in:

                   struct A {
                     virtual void f();
                   };

                   struct B: public A {
                     void f(int);
                   };

           the "A" class version of "f" is hidden in "B", and code like:

                   B* b;
                   b->f();

           will fail to compile.

       --WWnnoo--ppmmff--ccoonnvveerrssiioonnss (C++ and Objective-C++ only)
           Disable the diagnostic for converting a bound pointer to member
           function to a plain pointer.

       --WWssiiggnn--pprroommoo (C++ and Objective-C++ only)
           Warn when overload resolution chooses a promotion from unsigned or
           enumerated type to a signed type, over a conversion to an unsigned
           type of the same size.  Previous versions of G++ would try to
           preserve unsignedness, but the standard mandates the current
           behavior.

                   struct A {
                     operator int ();
                     A& operator = (int);
                   };

                   main ()
                   {
                     A a,b;
                     a = b;
                   }

           In this example, G++ will synthesize a default AA&& ooppeerraattoorr == ((ccoonnsstt
           AA&&));;, while cfront will use the user-defined ooppeerraattoorr ==.

   OOppttiioonnss CCoonnttrroolllliinngg OObbjjeeccttiivvee--CC aanndd OObbjjeeccttiivvee--CC++++ DDiiaalleeccttss
       (NOTE: This manual does not describe the Objective-C and Objective-C++
       languages themselves.  See

       This section describes the command-line options that are only
       meaningful for Objective-C and Objective-C++ programs, but you can also
       use most of the language-independent GNU compiler options.  For
       example, you might compile a file "some_class.m" like this:

               gcc -g -fgnu-runtime -O -c some_class.m

       In this example, --ffggnnuu--rruunnttiimmee is an option meant only for Objective-C
       and Objective-C++ programs; you can use the other options with any
       language supported by GCC.

       Note that since Objective-C is an extension of the C language,
       Objective-C compilations may also use options specific to the C front-
       end (e.g., --WWttrraaddiittiioonnaall).  Similarly, Objective-C++ compilations may
       use C++-specific options (e.g., --WWaabbii).

       Here is a list of options that are _o_n_l_y for compiling Objective-C and
       Objective-C++ programs:

       --ffccoonnssttaanntt--ssttrriinngg--ccllaassss==_c_l_a_s_s_-_n_a_m_e
           Use _c_l_a_s_s_-_n_a_m_e as the name of the class to instantiate for each
           literal string specified with the syntax "@"..."".  The default
           class name is "NXConstantString" if the GNU runtime is being used,
           and "NSConstantString" if the NeXT runtime is being used (see
           below).  The --ffccoonnssttaanntt--ccffssttrriinnggss option, if also present, will
           override the --ffccoonnssttaanntt--ssttrriinngg--ccllaassss setting and cause "@"...""
           literals to be laid out as constant CoreFoundation strings.

       --ffggnnuu--rruunnttiimmee
           Generate object code compatible with the standard GNU Objective-C
           runtime.  This is the default for most types of systems.

       --ffnneexxtt--rruunnttiimmee
           Generate output compatible with the NeXT runtime.  This is the
           default for NeXT-based systems, including Darwin and Mac OS X.  The
           macro "__NEXT_RUNTIME__" is predefined if (and only if) this option
           is used.

       --ffnnoo--nniill--rreecceeiivveerrss
           Assume that all Objective-C message dispatches (e.g., "[receiver
           message:arg]") in this translation unit ensure that the receiver is
           not "nil".  This allows for more efficient entry points in the
           runtime to be used.  Currently, this option is only available in
           conjunction with the NeXT runtime on Mac OS X 10.3 and later.

       --ffoobbjjcc--ccaallll--ccxxxx--ccddttoorrss
           For each Objective-C class, check if any of its instance variables
           is a C++ object with a non-trivial default constructor.  If so,
           synthesize a special "- (id) .cxx_construct" instance method that
           will run non-trivial default constructors on any such instance
           variables, in order, and then return "self".  Similarly, check if
           any instance variable is a C++ object with a non-trivial
           destructor, and if so, synthesize a special "- (void)
           .cxx_destruct" method that will run all such default destructors,
           in reverse order.

           The "- (id) .cxx_construct" and/or "- (void) .cxx_destruct" methods
           thusly generated will only operate on instance variables declared
           in the current Objective-C class, and not those inherited from
           superclasses.  It is the responsibility of the Objective-C runtime
           to invoke all such methods in an objectâ€™s inheritance hierarchy.
           The "- (id) .cxx_construct" methods will be invoked by the runtime
           immediately after a new object instance is allocated; the "- (void)
           .cxx_destruct" methods will be invoked immediately before the
           runtime deallocates an object instance.

           As of this writing, only the NeXT runtime on Mac OS X 10.4 and
           later has support for invoking the "- (id) .cxx_construct" and "-
           (void) .cxx_destruct" methods.

       --ffoobbjjcc--ddiirreecctt--ddiissppaattcchh
           Allow fast jumps to the message dispatcher.  On Darwin this is
           accomplished via the comm page.

       --ffoobbjjcc--eexxcceeppttiioonnss
           Enable syntactic support for structured exception handling in
           Objective-C, similar to what is offered by C++ and Java.  This
           option is unavailable in conjunction with the NeXT runtime on Mac
           OS X 10.2 and earlier.

                     @try {
                       ...
                          @throw expr;
                       ...
                     }
                     @catch (AnObjCClass *exc) {
                       ...
                         @throw expr;
                       ...
                         @throw;
                       ...
                     }
                     @catch (AnotherClass *exc) {
                       ...
                     }
                     @catch (id allOthers) {
                       ...
                     }
                     @finally {
                       ...
                         @throw expr;
                       ...
                     }

           The @throw statement may appear anywhere in an Objective-C or
           Objective-C++ program; when used inside of a @catch block, the
           @throw may appear without an argument (as shown above), in which
           case the object caught by the @catch will be rethrown.

           Note that only (pointers to) Objective-C objects may be thrown and
           caught using this scheme.  When an object is thrown, it will be
           caught by the nearest @catch clause capable of handling objects of
           that type, analogously to how "catch" blocks work in C++ and Java.
           A "@catch(id ...)" clause (as shown above) may also be provided to
           catch any and all Objective-C exceptions not caught by previous
           @catch clauses (if any).

           The @finally clause, if present, will be executed upon exit from
           the immediately preceding "@try ... @catch" section.  This will
           happen regardless of whether any exceptions are thrown, caught or
           rethrown inside the "@try ... @catch" section, analogously to the
           behavior of the "finally" clause in Java.

           There are several caveats to using the new exception mechanism:

           Â·   Although currently designed to be binary compatible with
               "NS_HANDLER"-style idioms provided by the "NSException" class,
               the new exceptions can only be used on Mac OS X 10.3 (Panther)
               and later systems, due to additional functionality needed in
               the (NeXT) Objective-C runtime.

           Â·   As mentioned above, the new exceptions do not support handling
               types other than Objective-C objects.   Furthermore, when used
               from Objective-C++, the Objective-C exception model does not
               interoperate with C++ exceptions at this time.  This means you
               cannot @throw an exception from Objective-C and "catch" it in
               C++, or vice versa (i.e., "throw ... @catch").

           The --ffoobbjjcc--eexxcceeppttiioonnss switch also enables the use of
           synchronization blocks for thread-safe execution:

                     @synchronized (ObjCClass *guard) {
                       ...
                     }

           Upon entering the @synchronized block, a thread of execution shall
           first check whether a lock has been placed on the corresponding
           "guard" object by another thread.  If it has, the current thread
           shall wait until the other thread relinquishes its lock.  Once
           "guard" becomes available, the current thread will place its own
           lock on it, execute the code contained in the @synchronized block,
           and finally relinquish the lock (thereby making "guard" available
           to other threads).

           Unlike Java, Objective-C does not allow for entire methods to be
           marked @synchronized.  Note that throwing exceptions out of
           @synchronized blocks is allowed, and will cause the guarding object
           to be unlocked properly.

       --ffoobbjjcc--ggcc
           Enable garbage collection (GC) in Objective-C and Objective-C++
           programs.

       --ffrreeppllaaccee--oobbjjcc--ccllaasssseess
           Emit a special marker instructing _ll_dd((11)) not to statically link in
           the resulting object file, and allow _dd_yy_ll_dd((11)) to load it in at run
           time instead.  This is used in conjunction with the Fix-and-
           Continue debugging mode, where the object file in question may be
           recompiled and dynamically reloaded in the course of program
           execution, without the need to restart the program itself.
           Currently, Fix-and-Continue functionality is only available in
           conjunction with the NeXT runtime on Mac OS X 10.3 and later.

       --ffzzeerroo--lliinnkk
           When compiling for the NeXT runtime, the compiler ordinarily
           replaces calls to "objc_getClass("...")" (when the name of the
           class is known at compile time) with static class references that
           get initialized at load time, which improves run-time performance.
           Specifying the --ffzzeerroo--lliinnkk flag suppresses this behavior and causes
           calls to "objc_getClass("...")"  to be retained.  This is useful in
           Zero-Link debugging mode, since it allows for individual class
           implementations to be modified during program execution.

       --ggeenn--ddeeccllss
           Dump interface declarations for all classes seen in the source file
           to a file named _s_o_u_r_c_e_n_a_m_e_._d_e_c_l.

       --WWaassssiiggnn--iinntteerrcceepptt (Objective-C and Objective-C++ only)
           Warn whenever an Objective-C assignment is being intercepted by the
           garbage collector.

       --WWnnoo--pprroottooccooll (Objective-C and Objective-C++ only)
           If a class is declared to implement a protocol, a warning is issued
           for every method in the protocol that is not implemented by the
           class.  The default behavior is to issue a warning for every method
           not explicitly implemented in the class, even if a method
           implementation is inherited from the superclass.  If you use the
           --WWnnoo--pprroottooccooll option, then methods inherited from the superclass
           are considered to be implemented, and no warning is issued for
           them.

       --WWsseelleeccttoorr (Objective-C and Objective-C++ only)
           Warn if multiple methods of different types for the same selector
           are found during compilation.  The check is performed on the list
           of methods in the final stage of compilation.  Additionally, a
           check is performed for each selector appearing in a
           "@selector(...)"  expression, and a corresponding method for that
           selector has been found during compilation.  Because these checks
           scan the method table only at the end of compilation, these
           warnings are not produced if the final stage of compilation is not
           reached, for example because an error is found during compilation,
           or because the --ffssyynnttaaxx--oonnllyy option is being used.

       --WWssttrriicctt--sseelleeccttoorr--mmaattcchh (Objective-C and Objective-C++ only)
           Warn if multiple methods with differing argument and/or return
           types are found for a given selector when attempting to send a
           message using this selector to a receiver of type "id" or "Class".
           When this flag is off (which is the default behavior), the compiler
           will omit such warnings if any differences found are confined to
           types which share the same size and alignment.

       --WWuunnddeeccllaarreedd--sseelleeccttoorr (Objective-C and Objective-C++ only)
           Warn if a "@selector(...)" expression referring to an undeclared
           selector is found.  A selector is considered undeclared if no
           method with that name has been declared before the "@selector(...)"
           expression, either explicitly in an @interface or @protocol
           declaration, or implicitly in an @implementation section.  This
           option always performs its checks as soon as a "@selector(...)"
           expression is found, while --WWsseelleeccttoorr only performs its checks in
           the final stage of compilation.  This also enforces the coding
           style convention that methods and selectors must be declared before
           being used.

       --pprriinntt--oobbjjcc--rruunnttiimmee--iinnffoo
           Generate C header describing the largest structure that is passed
           by value, if any.

   OOppttiioonnss ttoo CCoonnttrrooll DDiiaaggnnoossttiicc MMeessssaaggeess FFoorrmmaattttiinngg
       Traditionally, diagnostic messages have been formatted irrespective of
       the output deviceâ€™s aspect (e.g. its width, ...).  The options
       described below can be used to control the diagnostic messages
       formatting algorithm, e.g. how many characters per line, how often
       source location information should be reported.  Right now, only the
       C++ front end can honor these options.  However it is expected, in the
       near future, that the remaining front ends would be able to digest them
       correctly.

       --ffmmeessssaaggee--lleennggtthh==_n
           Try to format error messages so that they fit on lines of about _n
           characters.  The default is 72 characters for gg++++ and 0 for the
           rest of the front ends supported by GCC.  If _n is zero, then no
           line-wrapping will be done; each error message will appear on a
           single line.

       --ffddiiaaggnnoossttiiccss--sshhooww--llooccaattiioonn==oonnccee
           Only meaningful in line-wrapping mode.  Instructs the diagnostic
           messages reporter to emit _o_n_c_e source location information; that
           is, in case the message is too long to fit on a single physical
           line and has to be wrapped, the source location wonâ€™t be emitted
           (as prefix) again, over and over, in subsequent continuation lines.
           This is the default behavior.

       --ffddiiaaggnnoossttiiccss--sshhooww--llooccaattiioonn==eevveerryy--lliinnee
           Only meaningful in line-wrapping mode.  Instructs the diagnostic
           messages reporter to emit the same source location information (as
           prefix) for physical lines that result from the process of breaking
           a message which is too long to fit on a single line.

       --ffddiiaaggnnoossttiiccss--sshhooww--ooppttiioonn
           This option instructs the diagnostic machinery to add text to each
           diagnostic emitted, which indicates which command line option
           directly controls that diagnostic, when such an option is known to
           the diagnostic machinery.

       --WWccoovveerraaggee--mmiissmmaattcchh
           Warn if feedback profiles do not match when using the --ffpprrooffiillee--uussee
           option.  If a source file was changed between --ffpprrooffiillee--ggeenn and
           --ffpprrooffiillee--uussee, the files with the profile feedback can fail to
           match the source file and GCC can not use the profile feedback
           information.  By default, GCC emits an error message in this case.
           The option --WWccoovveerraaggee--mmiissmmaattcchh emits a warning instead of an error.
           GCC does not use appropriate feedback profiles, so using this
           option can result in poorly optimized code.  This option is useful
           only in the case of very minor changes such as bug fixes to an
           existing code-base.

   OOppttiioonnss ttoo RReeqquueesstt oorr SSuupppprreessss WWaarrnniinnggss
       Warnings are diagnostic messages that report constructions which are
       not inherently erroneous but which are risky or suggest there may have
       been an error.

       The following language-independent options do not enable specific
       warnings but control the kinds of diagnostics produced by GCC.

       --ffssyynnttaaxx--oonnllyy
           Check the code for syntax errors, but donâ€™t do anything beyond
           that.

       --ww  Inhibit all warning messages.

       --WWeerrrroorr
           Make all warnings into errors.

       --WWeerrrroorr==
           Make the specified warning into an error.  The specifier for a
           warning is appended, for example --WWeerrrroorr==sswwiittcchh turns the warnings
           controlled by --WWsswwiittcchh into errors.  This switch takes a negative
           form, to be used to negate --WWeerrrroorr for specific warnings, for
           example --WWnnoo--eerrrroorr==sswwiittcchh makes --WWsswwiittcchh warnings not be errors,
           even when --WWeerrrroorr is in effect.  You can use the
           --ffddiiaaggnnoossttiiccss--sshhooww--ooppttiioonn option to have each controllable warning
           amended with the option which controls it, to determine what to use
           with this option.

           Note that specifying --WWeerrrroorr==_f_o_o automatically implies --WW_f_o_o.
           However, --WWnnoo--eerrrroorr==_f_o_o does not imply anything.

       --WWffaattaall--eerrrroorrss
           This option causes the compiler to abort compilation on the first
           error occurred rather than trying to keep going and printing
           further error messages.

       You can request many specific warnings with options beginning --WW, for
       example --WWiimmpplliicciitt to request warnings on implicit declarations.  Each
       of these specific warning options also has a negative form beginning
       --WWnnoo-- to turn off warnings; for example, --WWnnoo--iimmpplliicciitt.  This manual
       lists only one of the two forms, whichever is not the default.  For
       further, language-specific options also refer to CC++++ DDiiaalleecctt OOppttiioonnss
       and OObbjjeeccttiivvee--CC aanndd OObbjjeeccttiivvee--CC++++ DDiiaalleecctt OOppttiioonnss.

       --ppeeddaannttiicc
           Issue all the warnings demanded by strict ISO C and ISO C++; reject
           all programs that use forbidden extensions, and some other programs
           that do not follow ISO C and ISO C++.  For ISO C, follows the
           version of the ISO C standard specified by any --ssttdd option used.

           Valid ISO C and ISO C++ programs should compile properly with or
           without this option (though a rare few will require --aannssii or a --ssttdd
           option specifying the required version of ISO C).  However, without
           this option, certain GNU extensions and traditional C and C++
           features are supported as well.  With this option, they are
           rejected.

           --ppeeddaannttiicc does not cause warning messages for use of the alternate
           keywords whose names begin and end with ____.  Pedantic warnings are
           also disabled in the expression that follows "__extension__".
           However, only system header files should use these escape routes;
           application programs should avoid them.

           Some users try to use --ppeeddaannttiicc to check programs for strict ISO C
           conformance.  They soon find that it does not do quite what they
           want: it finds some non-ISO practices, but not all---only those for
           which ISO C _r_e_q_u_i_r_e_s a diagnostic, and some others for which
           diagnostics have been added.

           A feature to report any failure to conform to ISO C might be useful
           in some instances, but would require considerable additional work
           and would be quite different from --ppeeddaannttiicc.  We donâ€™t have plans
           to support such a feature in the near future.

           Where the standard specified with --ssttdd represents a GNU extended
           dialect of C, such as ggnnuu8899 or ggnnuu9999, there is a corresponding _b_a_s_e
           _s_t_a_n_d_a_r_d, the version of ISO C on which the GNU extended dialect is
           based.  Warnings from --ppeeddaannttiicc are given where they are required
           by the base standard.  (It would not make sense for such warnings
           to be given only for features not in the specified GNU C dialect,
           since by definition the GNU dialects of C include all features the
           compiler supports with the given option, and there would be nothing
           to warn about.)

       --ppeeddaannttiicc--eerrrroorrss
           Like --ppeeddaannttiicc, except that errors are produced rather than
           warnings.

       --WWaallll
           This enables all the warnings about constructions that some users
           consider questionable, and that are easy to avoid (or modify to
           prevent the warning), even in conjunction with macros.  This also
           enables some language-specific warnings described in CC++++ DDiiaalleecctt
           OOppttiioonnss and OObbjjeeccttiivvee--CC aanndd OObbjjeeccttiivvee--CC++++ DDiiaalleecctt OOppttiioonnss.

           --WWaallll turns on the following warning flags:

           --WWaaddddrreessss --WWaarrrraayy--bboouunnddss (only with --OO22) --WWcc++++00xx--ccoommppaatt
           --WWcchhaarr--ssuubbssccrriippttss --WWiimmpplliicciitt--iinntt --WWiimmpplliicciitt--ffuunnccttiioonn--ddeeccllaarraattiioonn
           --WWccoommmmeenntt --WWffoorrmmaatt --WWmmaaiinn (only for C/ObjC and unless
           --ffffrreeeessttaannddiinngg) --WWmmiissssiinngg--bbrraacceess --WWnnoonnnnuullll --WWppaarreenntthheesseess
           --WWppooiinntteerr--ssiiggnn --WWrreeoorrddeerr --WWrreettuurrnn--ttyyppee --WWsseeqquueennccee--ppooiinntt
           --WWssiiggnn--ccoommppaarree (only in C++) --WWssttrriicctt--aalliiaassiinngg --WWssttrriicctt--oovveerrffllooww==11
           --WWsswwiittcchh --WWttrriiggrraapphhss --WWuunniinniittiiaalliizzeedd --WWuunnkknnoowwnn--pprraaggmmaass
           --WWuunnuusseedd--ffuunnccttiioonn --WWuunnuusseedd--llaabbeell --WWuunnuusseedd--vvaalluuee --WWuunnuusseedd--vvaarriiaabbllee
           --WWvvoollaattiillee--rreeggiisstteerr--vvaarr

           Note that some warning flags are not implied by --WWaallll.  Some of
           them warn about constructions that users generally do not consider
           questionable, but which occasionally you might wish to check for;
           others warn about constructions that are necessary or hard to avoid
           in some cases, and there is no simple way to modify the code to
           suppress the warning. Some of them are enabled by --WWeexxttrraa but many
           of them must be enabled individually.

       --WWeexxttrraa
           This enables some extra warning flags that are not enabled by
           --WWaallll. (This option used to be called --WW.  The older name is still
           supported, but the newer name is more descriptive.)

           --WWcclloobbbbeerreedd --WWeemmppttyy--bbooddyy --WWiiggnnoorreedd--qquuaalliiffiieerrss
           --WWmmiissssiinngg--ffiieelldd--iinniittiiaalliizzeerrss --WWmmiissssiinngg--ppaarraammeetteerr--ttyyppee (C only)
           --WWoolldd--ssttyyllee--ddeeccllaarraattiioonn (C only) --WWoovveerrrriiddee--iinniitt --WWssiiggnn--ccoommppaarree
           --WWttyyppee--lliimmiittss --WWuunniinniittiiaalliizzeedd --WWuunnuusseedd--ppaarraammeetteerr (only with
           --WWuunnuusseedd or --WWaallll)

           The option --WWeexxttrraa also prints warning messages for the following
           cases:

           Â·   A pointer is compared against integer zero with <<, <<==, >>, or
               >>==.

           Â·   (C++ only) An enumerator and a non-enumerator both appear in a
               conditional expression.

           Â·   (C++ only) Ambiguous virtual bases.

           Â·   (C++ only) Subscripting an array which has been declared
               rreeggiisstteerr.

           Â·   (C++ only) Taking the address of a variable which has been
               declared rreeggiisstteerr.

           Â·   (C++ only) A base class is not initialized in a derived classâ€™
               copy constructor.

       --WWcchhaarr--ssuubbssccrriippttss
           Warn if an array subscript has type "char".  This is a common cause
           of error, as programmers often forget that this type is signed on
           some machines.  This warning is enabled by --WWaallll.

       --WWccoommmmeenntt
           Warn whenever a comment-start sequence //** appears in a //** comment,
           or whenever a Backslash-Newline appears in a //// comment.  This
           warning is enabled by --WWaallll.

       --WWffoorrmmaatt
           Check calls to "printf" and "scanf", etc., to make sure that the
           arguments supplied have types appropriate to the format string
           specified, and that the conversions specified in the format string
           make sense.  This includes standard functions, and others specified
           by format attributes, in the "printf", "scanf", "strftime" and
           "strfmon" (an X/Open extension, not in the C standard) families (or
           other target-specific families).  Which functions are checked
           without format attributes having been specified depends on the
           standard version selected, and such checks of functions without the
           attribute specified are disabled by --ffffrreeeessttaannddiinngg or --ffnnoo--bbuuiillttiinn.

           The formats are checked against the format features supported by
           GNU libc version 2.2.  These include all ISO C90 and C99 features,
           as well as features from the Single Unix Specification and some BSD
           and GNU extensions.  Other library implementations may not support
           all these features; GCC does not support warning about features
           that go beyond a particular libraryâ€™s limitations.  However, if
           --ppeeddaannttiicc is used with --WWffoorrmmaatt, warnings will be given about
           format features not in the selected standard version (but not for
           "strfmon" formats, since those are not in any version of the C
           standard).

           Since --WWffoorrmmaatt also checks for null format arguments for several
           functions, --WWffoorrmmaatt also implies --WWnnoonnnnuullll.

           --WWffoorrmmaatt is included in --WWaallll.  For more control over some aspects
           of format checking, the options --WWffoorrmmaatt--yy22kk,
           --WWnnoo--ffoorrmmaatt--eexxttrraa--aarrggss, --WWnnoo--ffoorrmmaatt--zzeerroo--lleennggtthh,
           --WWffoorrmmaatt--nnoonnlliitteerraall, --WWffoorrmmaatt--sseeccuurriittyy, and --WWffoorrmmaatt==22 are
           available, but are not included in --WWaallll.

       --WWffoorrmmaatt--yy22kk
           If --WWffoorrmmaatt is specified, also warn about "strftime" formats which
           may yield only a two-digit year.

       --WWnnoo--ffoorrmmaatt--ccoonnttaaiinnss--nnuull
           If --WWffoorrmmaatt is specified, do not warn about format strings that
           contain NUL bytes.

       --WWnnoo--ffoorrmmaatt--eexxttrraa--aarrggss
           If --WWffoorrmmaatt is specified, do not warn about excess arguments to a
           "printf" or "scanf" format function.  The C standard specifies that
           such arguments are ignored.

           Where the unused arguments lie between used arguments that are
           specified with $$ operand number specifications, normally warnings
           are still given, since the implementation could not know what type
           to pass to "va_arg" to skip the unused arguments.  However, in the
           case of "scanf" formats, this option will suppress the warning if
           the unused arguments are all pointers, since the Single Unix
           Specification says that such unused arguments are allowed.

       --WWnnoo--ffoorrmmaatt--zzeerroo--lleennggtthh (C and Objective-C only)
           If --WWffoorrmmaatt is specified, do not warn about zero-length formats.
           The C standard specifies that zero-length formats are allowed.

       --WWffoorrmmaatt--nnoonnlliitteerraall
           If --WWffoorrmmaatt is specified, also warn if the format string is not a
           string literal and so cannot be checked, unless the format function
           takes its format arguments as a "va_list".

       --WWffoorrmmaatt--sseeccuurriittyy
           If --WWffoorrmmaatt is specified, also warn about uses of format functions
           that represent possible security problems.  At present, this warns
           about calls to "printf" and "scanf" functions where the format
           string is not a string literal and there are no format arguments,
           as in "printf (foo);".  This may be a security hole if the format
           string came from untrusted input and contains %%nn.  (This is
           currently a subset of what --WWffoorrmmaatt--nnoonnlliitteerraall warns about, but in
           future warnings may be added to --WWffoorrmmaatt--sseeccuurriittyy that are not
           included in --WWffoorrmmaatt--nnoonnlliitteerraall.)

       --WWffoorrmmaatt==22
           Enable --WWffoorrmmaatt plus format checks not included in --WWffoorrmmaatt.
           Currently equivalent to --WWffoorrmmaatt --WWffoorrmmaatt--nnoonnlliitteerraall
           --WWffoorrmmaatt--sseeccuurriittyy --WWffoorrmmaatt--yy22kk.

       --WWnnoonnnnuullll (C and Objective-C only)
           Warn about passing a null pointer for arguments marked as requiring
           a non-null value by the "nonnull" function attribute.

           --WWnnoonnnnuullll is included in --WWaallll and --WWffoorrmmaatt.  It can be disabled
           with the --WWnnoo--nnoonnnnuullll option.

       --WWiinniitt--sseellff (C, C++, Objective-C and Objective-C++ only)
           Warn about uninitialized variables which are initialized with
           themselves.  Note this option can only be used with the
           --WWuunniinniittiiaalliizzeedd option.

           For example, GCC will warn about "i" being uninitialized in the
           following snippet only when --WWiinniitt--sseellff has been specified:

                   int f()
                   {
                     int i = i;
                     return i;
                   }

       --WWiimmpplliicciitt--iinntt (C and Objective-C only)
           Warn when a declaration does not specify a type.  This warning is
           enabled by --WWaallll.

       --WWiimmpplliicciitt--ffuunnccttiioonn--ddeeccllaarraattiioonn (C and Objective-C only)
           Give a warning whenever a function is used before being declared.
           In C99 mode (--ssttdd==cc9999 or --ssttdd==ggnnuu9999), this warning is enabled by
           default and it is made into an error by --ppeeddaannttiicc--eerrrroorrss. This
           warning is also enabled by --WWaallll.

       --WWiimmpplliicciitt
           Same as --WWiimmpplliicciitt--iinntt and --WWiimmpplliicciitt--ffuunnccttiioonn--ddeeccllaarraattiioonn.  This
           warning is enabled by --WWaallll.

       --WWiiggnnoorreedd--qquuaalliiffiieerrss (C and C++ only)
           Warn if the return type of a function has a type qualifier such as
           "const".  For ISO C such a type qualifier has no effect, since the
           value returned by a function is not an lvalue.  For C++, the
           warning is only emitted for scalar types or "void".  ISO C
           prohibits qualified "void" return types on function definitions, so
           such return types always receive a warning even without this
           option.

           This warning is also enabled by --WWeexxttrraa.

       --WWmmaaiinn
           Warn if the type of mmaaiinn is suspicious.  mmaaiinn should be a function
           with external linkage, returning int, taking either zero arguments,
           two, or three arguments of appropriate types.  This warning is
           enabled by default in C++ and is enabled by either --WWaallll or
           --ppeeddaannttiicc.

       --WWmmiissssiinngg--bbrraacceess
           Warn if an aggregate or union initializer is not fully bracketed.
           In the following example, the initializer for aa is not fully
           bracketed, but that for bb is fully bracketed.

                   int a[2][2] = { 0, 1, 2, 3 };
                   int b[2][2] = { { 0, 1 }, { 2, 3 } };

           This warning is enabled by --WWaallll.

       --WWmmiissssiinngg--iinncclluuddee--ddiirrss (C, C++, Objective-C and Objective-C++ only)
           Warn if a user-supplied include directory does not exist.

       --WWppaarreenntthheesseess
           Warn if parentheses are omitted in certain contexts, such as when
           there is an assignment in a context where a truth value is
           expected, or when operators are nested whose precedence people
           often get confused about.

           Also warn if a comparison like xx<<==yy<<==zz appears; this is equivalent
           to ((xx<<==yy ?? 11 :: 00)) <<== zz, which is a different interpretation from
           that of ordinary mathematical notation.

           Also warn about constructions where there may be confusion to which
           "if" statement an "else" branch belongs.  Here is an example of
           such a case:

                   {
                     if (a)
                       if (b)
                         foo ();
                     else
                       bar ();
                   }

           In C/C++, every "else" branch belongs to the innermost possible
           "if" statement, which in this example is "if (b)".  This is often
           not what the programmer expected, as illustrated in the above
           example by indentation the programmer chose.  When there is the
           potential for this confusion, GCC will issue a warning when this
           flag is specified.  To eliminate the warning, add explicit braces
           around the innermost "if" statement so there is no way the "else"
           could belong to the enclosing "if".  The resulting code would look
           like this:

                   {
                     if (a)
                       {
                         if (b)
                           foo ();
                         else
                           bar ();
                       }
                   }

           This warning is enabled by --WWaallll.

       --WWsseeqquueennccee--ppooiinntt
           Warn about code that may have undefined semantics because of
           violations of sequence point rules in the C and C++ standards.

           The C and C++ standards defines the order in which expressions in a
           C/C++ program are evaluated in terms of _s_e_q_u_e_n_c_e _p_o_i_n_t_s, which
           represent a partial ordering between the execution of parts of the
           program: those executed before the sequence point, and those
           executed after it.  These occur after the evaluation of a full
           expression (one which is not part of a larger expression), after
           the evaluation of the first operand of a "&&", "||", "? :" or ","
           (comma) operator, before a function is called (but after the
           evaluation of its arguments and the expression denoting the called
           function), and in certain other places.  Other than as expressed by
           the sequence point rules, the order of evaluation of subexpressions
           of an expression is not specified.  All these rules describe only a
           partial order rather than a total order, since, for example, if two
           functions are called within one expression with no sequence point
           between them, the order in which the functions are called is not
           specified.  However, the standards committee have ruled that
           function calls do not overlap.

           It is not specified when between sequence points modifications to
           the values of objects take effect.  Programs whose behavior depends
           on this have undefined behavior; the C and C++ standards specify
           that "Between the previous and next sequence point an object shall
           have its stored value modified at most once by the evaluation of an
           expression.  Furthermore, the prior value shall be read only to
           determine the value to be stored.".  If a program breaks these
           rules, the results on any particular implementation are entirely
           unpredictable.

           Examples of code with undefined behavior are "a = a++;", "a[n] =
           b[n++]" and "a[i++] = i;".  Some more complicated cases are not
           diagnosed by this option, and it may give an occasional false
           positive result, but in general it has been found fairly effective
           at detecting this sort of problem in programs.

           The standard is worded confusingly, therefore there is some debate
           over the precise meaning of the sequence point rules in subtle
           cases.  Links to discussions of the problem, including proposed
           formal definitions, may be found on the GCC readings page, at
           <hhttttpp::////ggcccc..ggnnuu..oorrgg//rreeaaddiinnggss..hhttmmll>.

           This warning is enabled by --WWaallll for C and C++.

       --WWrreettuurrnn--ttyyppee
           Warn whenever a function is defined with a return-type that
           defaults to "int".  Also warn about any "return" statement with no
           return-value in a function whose return-type is not "void" (falling
           off the end of the function body is considered returning without a
           value), and about a "return" statement with a expression in a
           function whose return-type is "void".

           For C++, a function without return type always produces a
           diagnostic message, even when --WWnnoo--rreettuurrnn--ttyyppee is specified.  The
           only exceptions are mmaaiinn and functions defined in system headers.

           This warning is enabled by --WWaallll.

       --WWsswwiittcchh
           Warn whenever a "switch" statement has an index of enumerated type
           and lacks a "case" for one or more of the named codes of that
           enumeration.  (The presence of a "default" label prevents this
           warning.)  "case" labels outside the enumeration range also provoke
           warnings when this option is used.  This warning is enabled by
           --WWaallll.

       --WWsswwiittcchh--ddeeffaauulltt
           Warn whenever a "switch" statement does not have a "default" case.

       --WWsswwiittcchh--eennuumm
           Warn whenever a "switch" statement has an index of enumerated type
           and lacks a "case" for one or more of the named codes of that
           enumeration.  "case" labels outside the enumeration range also
           provoke warnings when this option is used.

       --WWssyynncc--nnaanndd (C and C++ only)
           Warn when "__sync_fetch_and_nand" and "__sync_nand_and_fetch"
           built-in functions are used.  These functions changed semantics in
           GCC 4.4.

       --WWttrriiggrraapphhss
           Warn if any trigraphs are encountered that might change the meaning
           of the program (trigraphs within comments are not warned about).
           This warning is enabled by --WWaallll.

       --WWuunnuusseedd--bbuutt--sseett--ppaarraammeetteerr
           Warn whenever a function parameter is assigned to, but otherwise
           unused (aside from its declaration).

           To suppress this warning use the uunnuusseedd attribute.

       --WWuunnuusseedd--bbuutt--sseett--vvaarriiaabbllee
           Warn whenever a local variable is assigned to, but otherwise unused
           (aside from its declaration).

           To suppress this warning use the uunnuusseedd attribute.

       --WWuunnuusseedd--ffuunnccttiioonn
           Warn whenever a static function is declared but not defined or a
           non-inline static function is unused.  This warning is enabled by
           --WWaallll.

       --WWuunnuusseedd--llaabbeell
           Warn whenever a label is declared but not used.  This warning is
           enabled by --WWaallll.

           To suppress this warning use the uunnuusseedd attribute.

       --WWuunnuusseedd--ppaarraammeetteerr
           Warn whenever a function parameter is unused aside from its
           declaration.

           To suppress this warning use the uunnuusseedd attribute.

       --WWuunnuusseedd--vvaarriiaabbllee
           Warn whenever a local variable or non-constant static variable is
           unused aside from its declaration.  This warning is enabled by
           --WWaallll.

           To suppress this warning use the uunnuusseedd attribute.

       --WWuunnuusseedd--vvaalluuee
           Warn whenever a statement computes a result that is explicitly not
           used. To suppress this warning cast the unused expression to vvooiidd.
           This includes an expression-statement or the left-hand side of a
           comma expression that contains no side effects. For example, an
           expression such as xx[[ii,,jj]] will cause a warning, while xx[[((vvooiidd))ii,,jj]]
           will not.

           This warning is enabled by --WWaallll.

       --WWuunnuusseedd
           All the above --WWuunnuusseedd options combined.

           In order to get a warning about an unused function parameter, you
           must either specify --WWeexxttrraa --WWuunnuusseedd (note that --WWaallll implies
           --WWuunnuusseedd), or separately specify --WWuunnuusseedd--ppaarraammeetteerr.

       --WWuunniinniittiiaalliizzeedd
           Warn if an automatic variable is used without first being
           initialized or if a variable may be clobbered by a "setjmp" call.
           In C++, warn if a non-static reference or non-static ccoonnsstt member
           appears in a class without constructors.

           If you want to warn about code which uses the uninitialized value
           of the variable in its own initializer, use the --WWiinniitt--sseellff option.

           These warnings occur for individual uninitialized or clobbered
           elements of structure, union or array variables as well as for
           variables which are uninitialized or clobbered as a whole.  They do
           not occur for variables or elements declared "volatile".  Because
           these warnings depend on optimization, the exact variables or
           elements for which there are warnings will depend on the precise
           optimization options and version of GCC used.

           Note that there may be no warning about a variable that is used
           only to compute a value that itself is never used, because such
           computations may be deleted by data flow analysis before the
           warnings are printed.

           These warnings are made optional because GCC is not smart enough to
           see all the reasons why the code might be correct despite appearing
           to have an error.  Here is one example of how this can happen:

                   {
                     int x;
                     switch (y)
                       {
                       case 1: x = 1;
                         break;
                       case 2: x = 4;
                         break;
                       case 3: x = 5;
                       }
                     foo (x);
                   }

           If the value of "y" is always 1, 2 or 3, then "x" is always
           initialized, but GCC doesnâ€™t know this.  Here is another common
           case:

                   {
                     int save_y;
                     if (change_y) save_y = y, y = new_y;
                     ...
                     if (change_y) y = save_y;
                   }

           This has no bug because "save_y" is used only if it is set.

           This option also warns when a non-volatile automatic variable might
           be changed by a call to "longjmp".  These warnings as well are
           possible only in optimizing compilation.

           The compiler sees only the calls to "setjmp".  It cannot know where
           "longjmp" will be called; in fact, a signal handler could call it
           at any point in the code.  As a result, you may get a warning even
           when there is in fact no problem because "longjmp" cannot in fact
           be called at the place which would cause a problem.

           Some spurious warnings can be avoided if you declare all the
           functions you use that never return as "noreturn".

           This warning is enabled by --WWaallll or --WWeexxttrraa.

       --WWuunnkknnoowwnn--pprraaggmmaass
           Warn when a #pragma directive is encountered which is not
           understood by GCC.  If this command line option is used, warnings
           will even be issued for unknown pragmas in system header files.
           This is not the case if the warnings were only enabled by the --WWaallll
           command line option.

       --WWnnoo--pprraaggmmaass
           Do not warn about misuses of pragmas, such as incorrect parameters,
           invalid syntax, or conflicts between pragmas.  See also
           --WWuunnkknnoowwnn--pprraaggmmaass.

       --WWssttrriicctt--aalliiaassiinngg
           This option is only active when --ffssttrriicctt--aalliiaassiinngg is active.  It
           warns about code which might break the strict aliasing rules that
           the compiler is using for optimization.  The warning does not catch
           all cases, but does attempt to catch the more common pitfalls.  It
           is included in --WWaallll.  It is equivalent to --WWssttrriicctt--aalliiaassiinngg==33

       --WWssttrriicctt--aalliiaassiinngg==nn
           This option is only active when --ffssttrriicctt--aalliiaassiinngg is active.  It
           warns about code which might break the strict aliasing rules that
           the compiler is using for optimization.  Higher levels correspond
           to higher accuracy (fewer false positives).  Higher levels also
           correspond to more effort, similar to the way -O works.
           --WWssttrriicctt--aalliiaassiinngg is equivalent to --WWssttrriicctt--aalliiaassiinngg==nn, with n=3.

           Level 1: Most aggressive, quick, least accurate.  Possibly useful
           when higher levels do not warn but -fstrict-aliasing still breaks
           the code, as it has very few false negatives.  However, it has many
           false positives.  Warns for all pointer conversions between
           possibly incompatible types, even if never dereferenced.  Runs in
           the frontend only.

           Level 2: Aggressive, quick, not too precise.  May still have many
           false positives (not as many as level 1 though), and few false
           negatives (but possibly more than level 1).  Unlike level 1, it
           only warns when an address is taken.  Warns about incomplete types.
           Runs in the frontend only.

           Level 3 (default for --WWssttrriicctt--aalliiaassiinngg): Should have very few false
           positives and few false negatives.  Slightly slower than levels 1
           or 2 when optimization is enabled.  Takes care of the common
           punn+dereference pattern in the frontend: "*(int*)&some_float".  If
           optimization is enabled, it also runs in the backend, where it
           deals with multiple statement cases using flow-sensitive points-to
           information.  Only warns when the converted pointer is
           dereferenced.  Does not warn about incomplete types.

       --WWssttrriicctt--oovveerrffllooww
       --WWssttrriicctt--oovveerrffllooww==_n
           This option is only active when --ffssttrriicctt--oovveerrffllooww is active.  It
           warns about cases where the compiler optimizes based on the
           assumption that signed overflow does not occur.  Note that it does
           not warn about all cases where the code might overflow: it only
           warns about cases where the compiler implements some optimization.
           Thus this warning depends on the optimization level.

           An optimization which assumes that signed overflow does not occur
           is perfectly safe if the values of the variables involved are such
           that overflow never does, in fact, occur.  Therefore this warning
           can easily give a false positive: a warning about code which is not
           actually a problem.  To help focus on important issues, several
           warning levels are defined.  No warnings are issued for the use of
           undefined signed overflow when estimating how many iterations a
           loop will require, in particular when determining whether a loop
           will be executed at all.

           --WWssttrriicctt--oovveerrffllooww==11
               Warn about cases which are both questionable and easy to avoid.
               For example: "x + 1 > x"; with --ffssttrriicctt--oovveerrffllooww, the compiler
               will simplify this to 1.  This level of --WWssttrriicctt--oovveerrffllooww is
               enabled by --WWaallll; higher levels are not, and must be explicitly
               requested.

           --WWssttrriicctt--oovveerrffllooww==22
               Also warn about other cases where a comparison is simplified to
               a constant.  For example: "abs (x) >= 0".  This can only be
               simplified when --ffssttrriicctt--oovveerrffllooww is in effect, because "abs
               (INT_MIN)" overflows to "INT_MIN", which is less than zero.
               --WWssttrriicctt--oovveerrffllooww (with no level) is the same as
               --WWssttrriicctt--oovveerrffllooww==22.

           --WWssttrriicctt--oovveerrffllooww==33
               Also warn about other cases where a comparison is simplified.
               For example: "x + 1 > 1" will be simplified to "x > 0".

           --WWssttrriicctt--oovveerrffllooww==44
               Also warn about other simplifications not covered by the above
               cases.  For example: "(x * 10) / 5" will be simplified to "x *
               2".

           --WWssttrriicctt--oovveerrffllooww==55
               Also warn about cases where the compiler reduces the magnitude
               of a constant involved in a comparison.  For example: "x + 2 >
               y" will be simplified to "x + 1 >= y".  This is reported only
               at the highest warning level because this simplification
               applies to many comparisons, so this warning level will give a
               very large number of false positives.

       --WWaarrrraayy--bboouunnddss
           This option is only active when --ffttrreeee--vvrrpp is active (default for
           -O2 and above). It warns about subscripts to arrays that are always
           out of bounds. This warning is enabled by --WWaallll.

       --WWnnoo--ddiivv--bbyy--zzeerroo
           Do not warn about compile-time integer division by zero.  Floating
           point division by zero is not warned about, as it can be a
           legitimate way of obtaining infinities and NaNs.

       --WWssyysstteemm--hheeaaddeerrss
           Print warning messages for constructs found in system header files.
           Warnings from system headers are normally suppressed, on the
           assumption that they usually do not indicate real problems and
           would only make the compiler output harder to read.  Using this
           command line option tells GCC to emit warnings from system headers
           as if they occurred in user code.  However, note that using --WWaallll
           in conjunction with this option will _n_o_t warn about unknown pragmas
           in system headers---for that, --WWuunnkknnoowwnn--pprraaggmmaass must also be used.

       --WWffllooaatt--eeqquuaall
           Warn if floating point values are used in equality comparisons.

           The idea behind this is that sometimes it is convenient (for the
           programmer) to consider floating-point values as approximations to
           infinitely precise real numbers.  If you are doing this, then you
           need to compute (by analyzing the code, or in some other way) the
           maximum or likely maximum error that the computation introduces,
           and allow for it when performing comparisons (and when producing
           output, but thatâ€™s a different problem).  In particular, instead of
           testing for equality, you would check to see whether the two values
           have ranges that overlap; and this is done with the relational
           operators, so equality comparisons are probably mistaken.

       --WWttrraaddiittiioonnaall (C and Objective-C only)
           Warn about certain constructs that behave differently in
           traditional and ISO C.  Also warn about ISO C constructs that have
           no traditional C equivalent, and/or problematic constructs which
           should be avoided.

           Â·   Macro parameters that appear within string literals in the
               macro body.  In traditional C macro replacement takes place
               within string literals, but does not in ISO C.

           Â·   In traditional C, some preprocessor directives did not exist.
               Traditional preprocessors would only consider a line to be a
               directive if the ## appeared in column 1 on the line.  Therefore
               --WWttrraaddiittiioonnaall warns about directives that traditional C
               understands but would ignore because the ## does not appear as
               the first character on the line.  It also suggests you hide
               directives like ##pprraaggmmaa not understood by traditional C by
               indenting them.  Some traditional implementations would not
               recognize ##eelliiff, so it suggests avoiding it altogether.

           Â·   A function-like macro that appears without arguments.

           Â·   The unary plus operator.

           Â·   The UU integer constant suffix, or the FF or LL floating point
               constant suffixes.  (Traditional C does support the LL suffix on
               integer constants.)  Note, these suffixes appear in macros
               defined in the system headers of most modern systems, e.g. the
               __MMIINN/__MMAAXX macros in "<limits.h>".  Use of these macros in user
               code might normally lead to spurious warnings, however GCCâ€™s
               integrated preprocessor has enough context to avoid warning in
               these cases.

           Â·   A function declared external in one block and then used after
               the end of the block.

           Â·   A "switch" statement has an operand of type "long".

           Â·   A non-"static" function declaration follows a "static" one.
               This construct is not accepted by some traditional C compilers.

           Â·   The ISO type of an integer constant has a different width or
               signedness from its traditional type.  This warning is only
               issued if the base of the constant is ten.  I.e. hexadecimal or
               octal values, which typically represent bit patterns, are not
               warned about.

           Â·   Usage of ISO string concatenation is detected.

           Â·   Initialization of automatic aggregates.

           Â·   Identifier conflicts with labels.  Traditional C lacks a
               separate namespace for labels.

           Â·   Initialization of unions.  If the initializer is zero, the
               warning is omitted.  This is done under the assumption that the
               zero initializer in user code appears conditioned on e.g.
               "__STDC__" to avoid missing initializer warnings and relies on
               default initialization to zero in the traditional C case.

           Â·   Conversions by prototypes between fixed/floating point values
               and vice versa.  The absence of these prototypes when compiling
               with traditional C would cause serious problems.  This is a
               subset of the possible conversion warnings, for the full set
               use --WWttrraaddiittiioonnaall--ccoonnvveerrssiioonn.

           Â·   Use of ISO C style function definitions.  This warning
               intentionally is _n_o_t issued for prototype declarations or
               variadic functions because these ISO C features will appear in
               your code when using libibertyâ€™s traditional C compatibility
               macros, "PARAMS" and "VPARAMS".  This warning is also bypassed
               for nested functions because that feature is already a GCC
               extension and thus not relevant to traditional C compatibility.

       --WWttrraaddiittiioonnaall--ccoonnvveerrssiioonn (C and Objective-C only)
           Warn if a prototype causes a type conversion that is different from
           what would happen to the same argument in the absence of a
           prototype.  This includes conversions of fixed point to floating
           and vice versa, and conversions changing the width or signedness of
           a fixed point argument except when the same as the default
           promotion.

       --WWddeeccllaarraattiioonn--aafftteerr--ssttaatteemmeenntt (C and Objective-C only)
           Warn when a declaration is found after a statement in a block.
           This construct, known from C++, was introduced with ISO C99 and is
           by default allowed in GCC.  It is not supported by ISO C90 and was
           not supported by GCC versions before GCC 3.0.

       --WWuunnddeeff
           Warn if an undefined identifier is evaluated in an ##iiff directive.

       --WWnnoo--eennddiiff--llaabbeellss
           Do not warn whenever an ##eellssee or an ##eennddiiff are followed by text.

       --WWsshhaaddooww
           Warn whenever a local variable shadows another local variable,
           parameter or global variable or whenever a built-in function is
           shadowed.

       --WWllaarrggeerr--tthhaann==_l_e_n
           Warn whenever an object of larger than _l_e_n bytes is defined.

       --WWffrraammee--llaarrggeerr--tthhaann==_l_e_n
           Warn if the size of a function frame is larger than _l_e_n bytes.  The
           computation done to determine the stack frame size is approximate
           and not conservative.  The actual requirements may be somewhat
           greater than _l_e_n even if you do not get a warning.  In addition,
           any space allocated via "alloca", variable-length arrays, or
           related constructs is not included by the compiler when determining
           whether or not to issue a warning.

       --WWuunnssaaffee--lloooopp--ooppttiimmiizzaattiioonnss
           Warn if the loop cannot be optimized because the compiler could not
           assume anything on the bounds of the loop indices.  With
           --ffuunnssaaffee--lloooopp--ooppttiimmiizzaattiioonnss warn if the compiler made such
           assumptions.

       --WWnnoo--ppeeddaannttiicc--mmss--ffoorrmmaatt (MinGW targets only)
           Disables the warnings about non-ISO "printf" / "scanf" format width
           specifiers "I32", "I64", and "I" used on Windows targets depending
           on the MS runtime, when you are using the options --WWffoorrmmaatt and
           --ppeeddaannttiicc without gnu-extensions.

       --WWppooiinntteerr--aarriitthh
           Warn about anything that depends on the "size of" a function type
           or of "void".  GNU C assigns these types a size of 1, for
           convenience in calculations with "void *" pointers and pointers to
           functions.  In C++, warn also when an arithmetic operation involves
           "NULL".  This warning is also enabled by --ppeeddaannttiicc.

       --WWttyyppee--lliimmiittss
           Warn if a comparison is always true or always false due to the
           limited range of the data type, but do not warn for constant
           expressions.  For example, warn if an unsigned variable is compared
           against zero with << or >>==.  This warning is also enabled by
           --WWeexxttrraa.

       --WWbbaadd--ffuunnccttiioonn--ccaasstt (C and Objective-C only)
           Warn whenever a function call is cast to a non-matching type.  For
           example, warn if "int malloc()" is cast to "anything *".

       --WWcc++++--ccoommppaatt (C and Objective-C only)
           Warn about ISO C constructs that are outside of the common subset
           of ISO C and ISO C++, e.g. request for implicit conversion from
           "void *" to a pointer to non-"void" type.

       --WWcc++++00xx--ccoommppaatt (C++ and Objective-C++ only)
           Warn about C++ constructs whose meaning differs between ISO C++
           1998 and ISO C++ 200x, e.g., identifiers in ISO C++ 1998 that will
           become keywords in ISO C++ 200x.  This warning is enabled by --WWaallll.

       --WWccaasstt--qquuaall
           Warn whenever a pointer is cast so as to remove a type qualifier
           from the target type.  For example, warn if a "const char *" is
           cast to an ordinary "char *".

       --WWccaasstt--aalliiggnn
           Warn whenever a pointer is cast such that the required alignment of
           the target is increased.  For example, warn if a "char *" is cast
           to an "int *" on machines where integers can only be accessed at
           two- or four-byte boundaries.

       --WWwwrriittee--ssttrriinnggss
           When compiling C, give string constants the type "const
           char[length]" so that copying the address of one into a non-"const"
           "char *" pointer will get a warning.  These warnings will help you
           find at compile time code that can try to write into a string
           constant, but only if you have been very careful about using
           "const" in declarations and prototypes.  Otherwise, it will just be
           a nuisance. This is why we did not make --WWaallll request these
           warnings.

           When compiling C++, warn about the deprecated conversion from
           string literals to "char *".  This warning is enabled by default
           for C++ programs.

       --WWcclloobbbbeerreedd
           Warn for variables that might be changed by lloonnggjjmmpp or vvffoorrkk.  This
           warning is also enabled by --WWeexxttrraa.

       --WWccoonnvveerrssiioonn
           Warn for implicit conversions that may alter a value. This includes
           conversions between real and integer, like "abs (x)" when "x" is
           "double"; conversions between signed and unsigned, like "unsigned
           ui = -1"; and conversions to smaller types, like "sqrtf (M_PI)". Do
           not warn for explicit casts like "abs ((int) x)" and "ui =
           (unsigned) -1", or if the value is not changed by the conversion
           like in "abs (2.0)".  Warnings about conversions between signed and
           unsigned integers can be disabled by using --WWnnoo--ssiiggnn--ccoonnvveerrssiioonn.

           For C++, also warn for conversions between "NULL" and non-pointer
           types; confusing overload resolution for user-defined conversions;
           and conversions that will never use a type conversion operator:
           conversions to "void", the same type, a base class or a reference
           to them. Warnings about conversions between signed and unsigned
           integers are disabled by default in C++ unless --WWssiiggnn--ccoonnvveerrssiioonn is
           explicitly enabled.

       --WWeemmppttyy--bbooddyy
           Warn if an empty body occurs in an iiff, eellssee or ddoo wwhhiillee statement.
           This warning is also enabled by --WWeexxttrraa.

       --WWeennuumm--ccoommppaarree (C++ and Objective-C++ only)
           Warn about a comparison between values of different enum types.
           This warning is enabled by default.

       --WWssiiggnn--ccoommppaarree
           Warn when a comparison between signed and unsigned values could
           produce an incorrect result when the signed value is converted to
           unsigned.  This warning is also enabled by --WWeexxttrraa; to get the
           other warnings of --WWeexxttrraa without this warning, use --WWeexxttrraa
           --WWnnoo--ssiiggnn--ccoommppaarree.

       --WWssiiggnn--ccoonnvveerrssiioonn
           Warn for implicit conversions that may change the sign of an
           integer value, like assigning a signed integer expression to an
           unsigned integer variable. An explicit cast silences the warning.
           In C, this option is enabled also by --WWccoonnvveerrssiioonn.

       --WWaaddddrreessss
           Warn about suspicious uses of memory addresses. These include using
           the address of a function in a conditional expression, such as
           "void func(void); if (func)", and comparisons against the memory
           address of a string literal, such as "if (x == "abc")".  Such uses
           typically indicate a programmer error: the address of a function
           always evaluates to true, so their use in a conditional usually
           indicate that the programmer forgot the parentheses in a function
           call; and comparisons against string literals result in unspecified
           behavior and are not portable in C, so they usually indicate that
           the programmer intended to use "strcmp".  This warning is enabled
           by --WWaallll.

       --WWllooggiiccaall--oopp
           Warn about suspicious uses of logical operators in expressions.
           This includes using logical operators in contexts where a bit-wise
           operator is likely to be expected.

       --WWaaggggrreeggaattee--rreettuurrnn
           Warn if any functions that return structures or unions are defined
           or called.  (In languages where you can return an array, this also
           elicits a warning.)

       --WWnnoo--aattttrriibbuutteess
           Do not warn if an unexpected "__attribute__" is used, such as
           unrecognized attributes, function attributes applied to variables,
           etc.  This will not stop errors for incorrect use of supported
           attributes.

       --WWnnoo--bbuuiillttiinn--mmaaccrroo--rreeddeeffiinneedd
           Do not warn if certain built-in macros are redefined.  This
           suppresses warnings for redefinition of "__TIMESTAMP__",
           "__TIME__", "__DATE__", "__FILE__", and "__BASE_FILE__".

       --WWssttrriicctt--pprroottoottyyppeess (C and Objective-C only)
           Warn if a function is declared or defined without specifying the
           argument types.  (An old-style function definition is permitted
           without a warning if preceded by a declaration which specifies the
           argument types.)

       --WWoolldd--ssttyyllee--ddeeccllaarraattiioonn (C and Objective-C only)
           Warn for obsolescent usages, according to the C Standard, in a
           declaration. For example, warn if storage-class specifiers like
           "static" are not the first things in a declaration.  This warning
           is also enabled by --WWeexxttrraa.

       --WWoolldd--ssttyyllee--ddeeffiinniittiioonn (C and Objective-C only)
           Warn if an old-style function definition is used.  A warning is
           given even if there is a previous prototype.

       --WWmmiissssiinngg--ppaarraammeetteerr--ttyyppee (C and Objective-C only)
           A function parameter is declared without a type specifier in
           K&R-style functions:

                   void foo(bar) { }

           This warning is also enabled by --WWeexxttrraa.

       --WWmmiissssiinngg--pprroottoottyyppeess (C and Objective-C only)
           Warn if a global function is defined without a previous prototype
           declaration.  This warning is issued even if the definition itself
           provides a prototype.  The aim is to detect global functions that
           fail to be declared in header files.

       --WWmmiissssiinngg--ddeeccllaarraattiioonnss
           Warn if a global function is defined without a previous
           declaration.  Do so even if the definition itself provides a
           prototype.  Use this option to detect global functions that are not
           declared in header files.  In C++, no warnings are issued for
           function templates, or for inline functions, or for functions in
           anonymous namespaces.

       --WWmmiissssiinngg--ffiieelldd--iinniittiiaalliizzeerrss
           Warn if a structureâ€™s initializer has some fields missing.  For
           example, the following code would cause such a warning, because
           "x.h" is implicitly zero:

                   struct s { int f, g, h; };
                   struct s x = { 3, 4 };

           This option does not warn about designated initializers, so the
           following modification would not trigger a warning:

                   struct s { int f, g, h; };
                   struct s x = { .f = 3, .g = 4 };

           This warning is included in --WWeexxttrraa.  To get other --WWeexxttrraa warnings
           without this one, use --WWeexxttrraa --WWnnoo--mmiissssiinngg--ffiieelldd--iinniittiiaalliizzeerrss.

       --WWmmiissssiinngg--nnoorreettuurrnn
           Warn about functions which might be candidates for attribute
           "noreturn".  Note these are only possible candidates, not absolute
           ones.  Care should be taken to manually verify functions actually
           do not ever return before adding the "noreturn" attribute,
           otherwise subtle code generation bugs could be introduced.  You
           will not get a warning for "main" in hosted C environments.

       --WWmmiissssiinngg--ffoorrmmaatt--aattttrriibbuuttee
           Warn about function pointers which might be candidates for "format"
           attributes.  Note these are only possible candidates, not absolute
           ones.  GCC will guess that function pointers with "format"
           attributes that are used in assignment, initialization, parameter
           passing or return statements should have a corresponding "format"
           attribute in the resulting type.  I.e. the left-hand side of the
           assignment or initialization, the type of the parameter variable,
           or the return type of the containing function respectively should
           also have a "format" attribute to avoid the warning.

           GCC will also warn about function definitions which might be
           candidates for "format" attributes.  Again, these are only possible
           candidates.  GCC will guess that "format" attributes might be
           appropriate for any function that calls a function like "vprintf"
           or "vscanf", but this might not always be the case, and some
           functions for which "format" attributes are appropriate may not be
           detected.

       --WWnnoo--mmuullttiicchhaarr
           Do not warn if a multicharacter constant (â€™â€™FFOOOOFFâ€™â€™) is used.  Usually
           they indicate a typo in the userâ€™s code, as they have
           implementation-defined values, and should not be used in portable
           code.

       --WWnnoorrmmaalliizzeedd==<<nnoonnee||iidd||nnffcc||nnffkkcc>>
           In ISO C and ISO C++, two identifiers are different if they are
           different sequences of characters.  However, sometimes when
           characters outside the basic ASCII character set are used, you can
           have two different character sequences that look the same.  To
           avoid confusion, the ISO 10646 standard sets out some _n_o_r_m_a_l_i_z_a_t_i_o_n
           _r_u_l_e_s which when applied ensure that two sequences that look the
           same are turned into the same sequence.  GCC can warn you if you
           are using identifiers which have not been normalized; this option
           controls that warning.

           There are four levels of warning that GCC supports.  The default is
           --WWnnoorrmmaalliizzeedd==nnffcc, which warns about any identifier which is not in
           the ISO 10646 "C" normalized form, _N_F_C.  NFC is the recommended
           form for most uses.

           Unfortunately, there are some characters which ISO C and ISO C++
           allow in identifiers that when turned into NFC arenâ€™t allowable as
           identifiers.  That is, thereâ€™s no way to use these symbols in
           portable ISO C or C++ and have all your identifiers in NFC.
           --WWnnoorrmmaalliizzeedd==iidd suppresses the warning for these characters.  It is
           hoped that future versions of the standards involved will correct
           this, which is why this option is not the default.

           You can switch the warning off for all characters by writing
           --WWnnoorrmmaalliizzeedd==nnoonnee.  You would only want to do this if you were
           using some other normalization scheme (like "D"), because otherwise
           you can easily create bugs that are literally impossible to see.

           Some characters in ISO 10646 have distinct meanings but look
           identical in some fonts or display methodologies, especially once
           formatting has been applied.  For instance "\u207F", "SUPERSCRIPT
           LATIN SMALL LETTER N", will display just like a regular "n" which
           has been placed in a superscript.  ISO 10646 defines the _N_F_K_C
           normalization scheme to convert all these into a standard form as
           well, and GCC will warn if your code is not in NFKC if you use
           --WWnnoorrmmaalliizzeedd==nnffkkcc.  This warning is comparable to warning about
           every identifier that contains the letter O because it might be
           confused with the digit 0, and so is not the default, but may be
           useful as a local coding convention if the programming environment
           is unable to be fixed to display these characters distinctly.

       --WWnnoo--ddeepprreeccaatteedd
           Do not warn about usage of deprecated features.

       --WWnnoo--ddeepprreeccaatteedd--ddeeccllaarraattiioonnss
           Do not warn about uses of functions, variables, and types marked as
           deprecated by using the "deprecated" attribute.

       --WWnnoo--oovveerrffllooww
           Do not warn about compile-time overflow in constant expressions.

       --WWoovveerrrriiddee--iinniitt (C and Objective-C only)
           Warn if an initialized field without side effects is overridden
           when using designated initializers.

           This warning is included in --WWeexxttrraa.  To get other --WWeexxttrraa warnings
           without this one, use --WWeexxttrraa --WWnnoo--oovveerrrriiddee--iinniitt.

       --WWppaacckkeedd
           Warn if a structure is given the packed attribute, but the packed
           attribute has no effect on the layout or size of the structure.
           Such structures may be mis-aligned for little benefit.  For
           instance, in this code, the variable "f.x" in "struct bar" will be
           misaligned even though "struct bar" does not itself have the packed
           attribute:

                   struct foo {
                     int x;
                     char a, b, c, d;
                   } __attribute__((packed));
                   struct bar {
                     char z;
                     struct foo f;
                   };

       --WWppaacckkeedd--bbiittffiieelldd--ccoommppaatt
           The 4.1, 4.2 and 4.3 series of GCC ignore the "packed" attribute on
           bit-fields of type "char".  This has been fixed in GCC 4.4 but the
           change can lead to differences in the structure layout.  GCC
           informs you when the offset of such a field has changed in GCC 4.4.
           For example there is no longer a 4-bit padding between field "a"
           and "b" in this structure:

                   struct foo
                   {
                     char a:4;
                     char b:8;
                   } __attribute__ ((packed));

           This warning is enabled by default.  Use
           --WWnnoo--ppaacckkeedd--bbiittffiieelldd--ccoommppaatt to disable this warning.

       --WWppaaddddeedd
           Warn if padding is included in a structure, either to align an
           element of the structure or to align the whole structure.
           Sometimes when this happens it is possible to rearrange the fields
           of the structure to reduce the padding and so make the structure
           smaller.

       --WWrreedduunnddaanntt--ddeeccllss
           Warn if anything is declared more than once in the same scope, even
           in cases where multiple declaration is valid and changes nothing.

       --WWnneesstteedd--eexxtteerrnnss (C and Objective-C only)
           Warn if an "extern" declaration is encountered within a function.

       --WWuunnrreeaacchhaabbllee--ccooddee
           Warn if the compiler detects that code will never be executed.

           This option is intended to warn when the compiler detects that at
           least a whole line of source code will never be executed, because
           some condition is never satisfied or because it is after a
           procedure that never returns.

           It is possible for this option to produce a warning even though
           there are circumstances under which part of the affected line can
           be executed, so care should be taken when removing apparently-
           unreachable code.

           For instance, when a function is inlined, a warning may mean that
           the line is unreachable in only one inlined copy of the function.

           This option is not made part of --WWaallll because in a debugging
           version of a program there is often substantial code which checks
           correct functioning of the program and is, hopefully, unreachable
           because the program does work.  Another common use of unreachable
           code is to provide behavior which is selectable at compile-time.

       --WWiinnlliinnee
           Warn if a function can not be inlined and it was declared as
           inline.  Even with this option, the compiler will not warn about
           failures to inline functions declared in system headers.

           The compiler uses a variety of heuristics to determine whether or
           not to inline a function.  For example, the compiler takes into
           account the size of the function being inlined and the amount of
           inlining that has already been done in the current function.
           Therefore, seemingly insignificant changes in the source program
           can cause the warnings produced by --WWiinnlliinnee to appear or disappear.

       --WWnnoo--iinnvvaalliidd--ooffffsseettooff (C++ and Objective-C++ only)
           Suppress warnings from applying the ooffffsseettooff macro to a non-POD
           type.  According to the 1998 ISO C++ standard, applying ooffffsseettooff to
           a non-POD type is undefined.  In existing C++ implementations,
           however, ooffffsseettooff typically gives meaningful results even when
           applied to certain kinds of non-POD types. (Such as a simple ssttrruucctt
           that fails to be a POD type only by virtue of having a
           constructor.)  This flag is for users who are aware that they are
           writing nonportable code and who have deliberately chosen to ignore
           the warning about it.

           The restrictions on ooffffsseettooff may be relaxed in a future version of
           the C++ standard.

       --WWnnoo--iinntt--ttoo--ppooiinntteerr--ccaasstt (C and Objective-C only)
           Suppress warnings from casts to pointer type of an integer of a
           different size.

       --WWnnoo--ppooiinntteerr--ttoo--iinntt--ccaasstt (C and Objective-C only)
           Suppress warnings from casts from a pointer to an integer type of a
           different size.

       --WWiinnvvaalliidd--ppcchh
           Warn if a precompiled header is found in the search path but canâ€™t
           be used.

       --WWlloonngg--lloonngg
           Warn if lloonngg lloonngg type is used.  This is default.  To inhibit the
           warning messages, use --WWnnoo--lloonngg--lloonngg.  Flags --WWlloonngg--lloonngg and
           --WWnnoo--lloonngg--lloonngg are taken into account only when --ppeeddaannttiicc flag is
           used.

       --WWvvaarriiaaddiicc--mmaaccrrooss
           Warn if variadic macros are used in pedantic ISO C90 mode, or the
           GNU alternate syntax when in pedantic ISO C99 mode.  This is
           default.  To inhibit the warning messages, use
           --WWnnoo--vvaarriiaaddiicc--mmaaccrrooss.

       --WWvvllaa
           Warn if variable length array is used in the code.  --WWnnoo--vvllaa will
           prevent the --ppeeddaannttiicc warning of the variable length array.

       --WWvvoollaattiillee--rreeggiisstteerr--vvaarr
           Warn if a register variable is declared volatile.  The volatile
           modifier does not inhibit all optimizations that may eliminate
           reads and/or writes to register variables.  This warning is enabled
           by --WWaallll.

       --WWddiissaabblleedd--ooppttiimmiizzaattiioonn
           Warn if a requested optimization pass is disabled.  This warning
           does not generally indicate that there is anything wrong with your
           code; it merely indicates that GCCâ€™s optimizers were unable to
           handle the code effectively.  Often, the problem is that your code
           is too big or too complex; GCC will refuse to optimize programs
           when the optimization itself is likely to take inordinate amounts
           of time.

       --WWppooiinntteerr--ssiiggnn (C and Objective-C only)
           Warn for pointer argument passing or assignment with different
           signedness.  This option is only supported for C and Objective-C.
           It is implied by --WWaallll and by --ppeeddaannttiicc, which can be disabled with
           --WWnnoo--ppooiinntteerr--ssiiggnn.

       --WWssttaacckk--pprrootteeccttoorr
           This option is only active when --ffssttaacckk--pprrootteeccttoorr is active.  It
           warns about functions that will not be protected against stack
           smashing.

       --WWnnoo--mmuuddffllaapp
           Suppress warnings about constructs that cannot be instrumented by
           --ffmmuuddffllaapp.

       --WWoovveerrlleennggtthh--ssttrriinnggss
           Warn about string constants which are longer than the "minimum
           maximum" length specified in the C standard.  Modern compilers
           generally allow string constants which are much longer than the
           standardâ€™s minimum limit, but very portable programs should avoid
           using longer strings.

           The limit applies _a_f_t_e_r string constant concatenation, and does not
           count the trailing NUL.  In C89, the limit was 509 characters; in
           C99, it was raised to 4095.  C++98 does not specify a normative
           minimum maximum, so we do not diagnose overlength strings in C++.

           This option is implied by --ppeeddaannttiicc, and can be disabled with
           --WWnnoo--oovveerrlleennggtthh--ssttrriinnggss.

   OOppttiioonnss ffoorr DDeebbuuggggiinngg YYoouurr PPrrooggrraamm oorr GGCCCC
       GCC has various special options that are used for debugging either your
       program or GCC:

       --gg  Produce debugging information in the operating systemâ€™s native
           format (stabs, COFF, XCOFF, or DWARF 2).  GDB can work with this
           debugging information.

           On most systems that use stabs format, --gg enables use of extra
           debugging information that only GDB can use; this extra information
           makes debugging work better in GDB but will probably make other
           debuggers crash or refuse to read the program.  If you want to
           control for certain whether to generate the extra information, use
           --ggssttaabbss++, --ggssttaabbss, --ggxxccooffff++, --ggxxccooffff, or --ggvvmmss (see below).

           GCC allows you to use --gg with --OO.  The shortcuts taken by optimized
           code may occasionally produce surprising results: some variables
           you declared may not exist at all; flow of control may briefly move
           where you did not expect it; some statements may not be executed
           because they compute constant results or their values were already
           at hand; some statements may execute in different places because
           they were moved out of loops.

           Nevertheless it proves possible to debug optimized output.  This
           makes it reasonable to use the optimizer for programs that might
           have bugs.

           The following options are useful when GCC is generated with the
           capability for more than one debugging format.

       --ggggddbb
           Produce debugging information for use by GDB.  This means to use
           the most expressive format available (DWARF 2, stabs, or the native
           format if neither of those are supported), including GDB extensions
           if at all possible.

       --ggssttaabbss
           Produce debugging information in stabs format (if that is
           supported), without GDB extensions.  This is the format used by DBX
           on most BSD systems.  On MIPS, Alpha and System V Release 4 systems
           this option produces stabs debugging output which is not understood
           by DBX or SDB.  On System V Release 4 systems this option requires
           the GNU assembler.

       --ffeelliimmiinnaattee--uunnuusseedd--ddeebbuugg--ssyymmbboollss
           Produce debugging information in stabs format (if that is
           supported), for only symbols that are actually used.

       --ffeemmiitt--ccllaassss--ddeebbuugg--aallwwaayyss
           Instead of emitting debugging information for a C++ class in only
           one object file, emit it in all object files using the class.  This
           option should be used only with debuggers that are unable to handle
           the way GCC normally emits debugging information for classes
           because using this option will increase the size of debugging
           information by as much as a factor of two.

       --ggssttaabbss++
           Produce debugging information in stabs format (if that is
           supported), using GNU extensions understood only by the GNU
           debugger (GDB).  The use of these extensions is likely to make
           other debuggers crash or refuse to read the program.

       --ggccooffff
           Produce debugging information in COFF format (if that is
           supported).  This is the format used by SDB on most System V
           systems prior to System V Release 4.

       --ggxxccooffff
           Produce debugging information in XCOFF format (if that is
           supported).  This is the format used by the DBX debugger on IBM
           RS/6000 systems.

       --ggxxccooffff++
           Produce debugging information in XCOFF format (if that is
           supported), using GNU extensions understood only by the GNU
           debugger (GDB).  The use of these extensions is likely to make
           other debuggers crash or refuse to read the program, and may cause
           assemblers other than the GNU assembler (GAS) to fail with an
           error.

       --ggddwwaarrff--_v_e_r_s_i_o_n
           Produce debugging information in DWARF format (if that is
           supported).  This is the format used by DBX on IRIX 6.  The value
           of _v_e_r_s_i_o_n may be either 2 or 3; the default version is 3.

           Note that with DWARF version 2 some ports require, and will always
           use, some non-conflicting DWARF 3 extensions in the unwind tables.

       --ggssttrriicctt--ddwwaarrff
           Disallow using extensions of later DWARF standard version than
           selected with --ggddwwaarrff--_v_e_r_s_i_o_n.  On most targets using non-
           conflicting DWARF extensions from later standard versions is
           allowed.

       --ggnnoo--ssttrriicctt--ddwwaarrff
           Allow using extensions of later DWARF standard version than
           selected with --ggddwwaarrff--_v_e_r_s_i_o_n.

       --ggvvmmss
           Produce debugging information in VMS debug format (if that is
           supported).  This is the format used by DEBUG on VMS systems.

       --gg_l_e_v_e_l
       --ggggddbb_l_e_v_e_l
       --ggssttaabbss_l_e_v_e_l
       --ggccooffff_l_e_v_e_l
       --ggxxccooffff_l_e_v_e_l
       --ggvvmmss_l_e_v_e_l
           Request debugging information and also use _l_e_v_e_l to specify how
           much information.  The default level is 2.

           Level 0 produces no debug information at all.  Thus, --gg00 negates
           --gg.

           Level 1 produces minimal information, enough for making backtraces
           in parts of the program that you donâ€™t plan to debug.  This
           includes descriptions of functions and external variables, but no
           information about local variables and no line numbers.

           Level 3 includes extra information, such as all the macro
           definitions present in the program.  Some debuggers support macro
           expansion when you use --gg33.

           --ggddwwaarrff--22 does not accept a concatenated debug level, because GCC
           used to support an option --ggddwwaarrff that meant to generate debug
           information in version 1 of the DWARF format (which is very
           different from version 2), and it would have been too confusing.
           That debug format is long obsolete, but the option cannot be
           changed now.  Instead use an additional --gg_l_e_v_e_l option to change
           the debug level for DWARF.

       --ggttooggggllee
           Turn off generation of debug info, if leaving out this option would
           have generated it, or turn it on at level 2 otherwise.  The
           position of this argument in the command line does not matter, it
           takes effect after all other options are processed, and it does so
           only once, no matter how many times it is given.  This is mainly
           intended to be used with --ffccoommppaarree--ddeebbuugg.

       --ffdduummpp--ffiinnaall--iinnssnnss[==_f_i_l_e]
           Dump the final internal representation (RTL) to _f_i_l_e.  If the
           optional argument is omitted (or if _f_i_l_e is "."), the name of the
           dump file will be determined by appending ".gkd" to the compilation
           output file name.

       --ffccoommppaarree--ddeebbuugg[==_o_p_t_s]
           If no error occurs during compilation, run the compiler a second
           time, adding _o_p_t_s and --ffccoommppaarree--ddeebbuugg--sseeccoonndd to the arguments
           passed to the second compilation.  Dump the final internal
           representation in both compilations, and print an error if they
           differ.

           If the equal sign is omitted, the default --ggttooggggllee is used.

           The environment variable GGCCCC__CCOOMMPPAARREE__DDEEBBUUGG, if defined, non-empty
           and nonzero, implicitly enables --ffccoommppaarree--ddeebbuugg.  If
           GGCCCC__CCOOMMPPAARREE__DDEEBBUUGG is defined to a string starting with a dash, then
           it is used for _o_p_t_s, otherwise the default --ggttooggggllee is used.

           --ffccoommppaarree--ddeebbuugg==, with the equal sign but without _o_p_t_s, is
           equivalent to --ffnnoo--ccoommppaarree--ddeebbuugg, which disables the dumping of the
           final representation and the second compilation, preventing even
           GGCCCC__CCOOMMPPAARREE__DDEEBBUUGG from taking effect.

           To verify full coverage during --ffccoommppaarree--ddeebbuugg testing, set
           GGCCCC__CCOOMMPPAARREE__DDEEBBUUGG to say --ffccoommppaarree--ddeebbuugg--nnoott--oovveerrrriiddddeenn, which GCC
           will reject as an invalid option in any actual compilation (rather
           than preprocessing, assembly or linking).  To get just a warning,
           setting GGCCCC__CCOOMMPPAARREE__DDEEBBUUGG to --ww%%nn--ffccoommppaarree--ddeebbuugg nnoott oovveerrrriiddddeenn
           will do.

       --ffccoommppaarree--ddeebbuugg--sseeccoonndd
           This option is implicitly passed to the compiler for the second
           compilation requested by --ffccoommppaarree--ddeebbuugg, along with options to
           silence warnings, and omitting other options that would cause side-
           effect compiler outputs to files or to the standard output.  Dump
           files and preserved temporary files are renamed so as to contain
           the ".gk" additional extension during the second compilation, to
           avoid overwriting those generated by the first.

           When this option is passed to the compiler driver, it causes the
           _f_i_r_s_t compilation to be skipped, which makes it useful for little
           other than debugging the compiler proper.

       --ffeelliimmiinnaattee--ddwwaarrff22--dduuppss
           Compress DWARF2 debugging information by eliminating duplicated
           information about each symbol.  This option only makes sense when
           generating DWARF2 debugging information with --ggddwwaarrff--22.

       --ffeemmiitt--ssttrruucctt--ddeebbuugg--bbaasseeoonnllyy
           Emit debug information for struct-like types only when the base
           name of the compilation source file matches the base name of file
           in which the struct was defined.

           This option substantially reduces the size of debugging
           information, but at significant potential loss in type information
           to the debugger.  See --ffeemmiitt--ssttrruucctt--ddeebbuugg--rreedduucceedd for a less
           aggressive option.  See --ffeemmiitt--ssttrruucctt--ddeebbuugg--ddeettaaiilleedd for more
           detailed control.

           This option works only with DWARF 2.

       --ffeemmiitt--ssttrruucctt--ddeebbuugg--rreedduucceedd
           Emit debug information for struct-like types only when the base
           name of the compilation source file matches the base name of file
           in which the type was defined, unless the struct is a template or
           defined in a system header.

           This option significantly reduces the size of debugging
           information, with some potential loss in type information to the
           debugger.  See --ffeemmiitt--ssttrruucctt--ddeebbuugg--bbaasseeoonnllyy for a more aggressive
           option.  See --ffeemmiitt--ssttrruucctt--ddeebbuugg--ddeettaaiilleedd for more detailed
           control.

           This option works only with DWARF 2.

       --ffeemmiitt--ssttrruucctt--ddeebbuugg--ddeettaaiilleedd[==_s_p_e_c_-_l_i_s_t]
           Specify the struct-like types for which the compiler will generate
           debug information.  The intent is to reduce duplicate struct debug
           information between different object files within the same program.

           This option is a detailed version of --ffeemmiitt--ssttrruucctt--ddeebbuugg--rreedduucceedd
           and --ffeemmiitt--ssttrruucctt--ddeebbuugg--bbaasseeoonnllyy, which will serve for most needs.

           A specification has the syntax
           [ddiirr::|iinndd::][oorrdd::|ggeenn::](aannyy|ssyyss|bbaassee|nnoonnee)

           The optional first word limits the specification to structs that
           are used directly (ddiirr::) or used indirectly (iinndd::).  A struct type
           is used directly when it is the type of a variable, member.
           Indirect uses arise through pointers to structs.  That is, when use
           of an incomplete struct would be legal, the use is indirect.  An
           example is ssttrruucctt oonnee ddiirreecctt;; ssttrruucctt ttwwoo ** iinnddiirreecctt;;.

           The optional second word limits the specification to ordinary
           structs (oorrdd::) or generic structs (ggeenn::).  Generic structs are a
           bit complicated to explain.  For C++, these are non-explicit
           specializations of template classes, or non-template classes within
           the above.  Other programming languages have generics, but
           --ffeemmiitt--ssttrruucctt--ddeebbuugg--ddeettaaiilleedd does not yet implement them.

           The third word specifies the source files for those structs for
           which the compiler will emit debug information.  The values nnoonnee
           and aannyy have the normal meaning.  The value bbaassee means that the
           base of name of the file in which the type declaration appears must
           match the base of the name of the main compilation file.  In
           practice, this means that types declared in _f_o_o_._c and _f_o_o_._h will
           have debug information, but types declared in other header will
           not.  The value ssyyss means those types satisfying bbaassee or declared
           in system or compiler headers.

           You may need to experiment to determine the best settings for your
           application.

           The default is --ffeemmiitt--ssttrruucctt--ddeebbuugg--ddeettaaiilleedd==aallll.

           This option works only with DWARF 2.

       --ffnnoo--mmeerrggee--ddeebbuugg--ssttrriinnggss
           Direct the linker to not merge together strings in the debugging
           information which are identical in different object files.  Merging
           is not supported by all assemblers or linkers.  Merging decreases
           the size of the debug information in the output file at the cost of
           increasing link processing time.  Merging is enabled by default.

       --ffddeebbuugg--pprreeffiixx--mmaapp==_o_l_d==_n_e_w
           When compiling files in directory _o_l_d, record debugging information
           describing them as in _n_e_w instead.

       --ffnnoo--ddwwaarrff22--ccffii--aassmm
           Emit DWARF 2 unwind info as compiler generated ".eh_frame" section
           instead of using GAS ".cfi_*" directives.

       --pp  Generate extra code to write profile information suitable for the
           analysis program pprrooff.  You must use this option when compiling the
           source files you want data about, and you must also use it when
           linking.

       --ppgg Generate extra code to write profile information suitable for the
           analysis program ggpprrooff.  You must use this option when compiling
           the source files you want data about, and you must also use it when
           linking.

       --QQ  Makes the compiler print out each function name as it is compiled,
           and print some statistics about each pass when it finishes.

       --ffttiimmee--rreeppoorrtt
           Makes the compiler print some statistics about the time consumed by
           each pass when it finishes.

       --ffmmeemm--rreeppoorrtt
           Makes the compiler print some statistics about permanent memory
           allocation when it finishes.

       --ffpprree--iippaa--mmeemm--rreeppoorrtt
       --ffppoosstt--iippaa--mmeemm--rreeppoorrtt
           Makes the compiler print some statistics about permanent memory
           allocation before or after interprocedural optimization.

       --ffpprrooffiillee--aarrccss
           Add code so that program flow _a_r_c_s are instrumented.  During
           execution the program records how many times each branch and call
           is executed and how many times it is taken or returns.  When the
           compiled program exits it saves this data to a file called
           _a_u_x_n_a_m_e_._g_c_d_a for each source file.  The data may be used for
           profile-directed optimizations (--ffbbrraanncchh--pprroobbaabbiilliittiieess), or for
           test coverage analysis (--fftteesstt--ccoovveerraaggee).  Each object fileâ€™s
           _a_u_x_n_a_m_e is generated from the name of the output file, if
           explicitly specified and it is not the final executable, otherwise
           it is the basename of the source file.  In both cases any suffix is
           removed (e.g. _f_o_o_._g_c_d_a for input file _d_i_r_/_f_o_o_._c, or _d_i_r_/_f_o_o_._g_c_d_a
           for output file specified as --oo ddiirr//ffoooo..oo).

       ----ccoovveerraaggee
           This option is used to compile and link code instrumented for
           coverage analysis.  The option is a synonym for --ffpprrooffiillee--aarrccss
           --fftteesstt--ccoovveerraaggee (when compiling) and --llggccoovv (when linking).  See
           the documentation for those options for more details.

           Â·   Compile the source files with --ffpprrooffiillee--aarrccss plus optimization
               and code generation options.  For test coverage analysis, use
               the additional --fftteesstt--ccoovveerraaggee option.  You do not need to
               profile every source file in a program.

           Â·   Link your object files with --llggccoovv or --ffpprrooffiillee--aarrccss (the
               latter implies the former).

           Â·   Run the program on a representative workload to generate the
               arc profile information.  This may be repeated any number of
               times.  You can run concurrent instances of your program, and
               provided that the file system supports locking, the data files
               will be correctly updated.  Also "fork" calls are detected and
               correctly handled (double counting will not happen).

           Â·   For profile-directed optimizations, compile the source files
               again with the same optimization and code generation options
               plus --ffbbrraanncchh--pprroobbaabbiilliittiieess.

           Â·   For test coverage analysis, use ggccoovv to produce human readable
               information from the _._g_c_n_o and _._g_c_d_a files.  Refer to the ggccoovv
               documentation for further information.

           With --ffpprrooffiillee--aarrccss, for each function of your program GCC creates
           a program flow graph, then finds a spanning tree for the graph.
           Only arcs that are not on the spanning tree have to be
           instrumented: the compiler adds code to count the number of times
           that these arcs are executed.  When an arc is the only exit or only
           entrance to a block, the instrumentation code can be added to the
           block; otherwise, a new basic block must be created to hold the
           instrumentation code.

       --fftteesstt--ccoovveerraaggee
           Produce a notes file that the ggccoovv code-coverage utility can use to
           show program coverage.  Each source fileâ€™s note file is called
           _a_u_x_n_a_m_e_._g_c_n_o.  Refer to the --ffpprrooffiillee--aarrccss option above for a
           description of _a_u_x_n_a_m_e and instructions on how to generate test
           coverage data.  Coverage data will match the source files more
           closely, if you do not optimize.

       --ffddbbgg--ccnntt--lliisstt
           Print the name and the counter upperbound for all debug counters.

       --ffddbbgg--ccnntt==_c_o_u_n_t_e_r_-_v_a_l_u_e_-_l_i_s_t
           Set the internal debug counter upperbound. _c_o_u_n_t_e_r_-_v_a_l_u_e_-_l_i_s_t is a
           comma-separated list of _n_a_m_e:_v_a_l_u_e pairs which sets the upperbound
           of each debug counter _n_a_m_e to _v_a_l_u_e.  All debug counters have the
           initial upperbound of _U_I_N_T___M_A_X, thus _d_b_g___c_n_t_(_) returns true always
           unless the upperbound is set by this option.  e.g. With
           -fdbg-cnt=dce:10,tail_call:0 dbg_cnt(dce) will return true only for
           first 10 invocations and dbg_cnt(tail_call) will return false
           always.

       --dd_l_e_t_t_e_r_s
       --ffdduummpp--rrttll--_p_a_s_s
           Says to make debugging dumps during compilation at times specified
           by _l_e_t_t_e_r_s.    This is used for debugging the RTL-based passes of
           the compiler.  The file names for most of the dumps are made by
           appending a pass number and a word to the _d_u_m_p_n_a_m_e.  _d_u_m_p_n_a_m_e is
           generated from the name of the output file, if explicitly specified
           and it is not an executable, otherwise it is the basename of the
           source file. These switches may have different effects when --EE is
           used for preprocessing.

           Debug dumps can be enabled with a --ffdduummpp--rrttll switch or some --dd
           option _l_e_t_t_e_r_s.  Here are the possible letters for use in _p_a_s_s and
           _l_e_t_t_e_r_s, and their meanings:

           --ffdduummpp--rrttll--aalliiggnnmmeennttss
               Dump after branch alignments have been computed.

           --ffdduummpp--rrttll--aassmmccoonnss
               Dump after fixing rtl statements that have unsatisfied in/out
               constraints.

           --ffdduummpp--rrttll--aauuttoo__iinncc__ddeecc
               Dump after auto-inc-dec discovery.  This pass is only run on
               architectures that have auto inc or auto dec instructions.

           --ffdduummpp--rrttll--bbaarrrriieerrss
               Dump after cleaning up the barrier instructions.

           --ffdduummpp--rrttll--bbbbppaarrtt
               Dump after partitioning hot and cold basic blocks.

           --ffdduummpp--rrttll--bbbbrroo
               Dump after block reordering.

           --ffdduummpp--rrttll--bbttll11
           --ffdduummpp--rrttll--bbttll22
               --ffdduummpp--rrttll--bbttll11 and --ffdduummpp--rrttll--bbttll22 enable dumping after the
               two branch target load optimization passes.

           --ffdduummpp--rrttll--bbyyppaassss
               Dump after jump bypassing and control flow optimizations.

           --ffdduummpp--rrttll--ccoommbbiinnee
               Dump after the RTL instruction combination pass.

           --ffdduummpp--rrttll--ccoommppggoottooss
               Dump after duplicating the computed gotos.

           --ffdduummpp--rrttll--ccee11
           --ffdduummpp--rrttll--ccee22
           --ffdduummpp--rrttll--ccee33
               --ffdduummpp--rrttll--ccee11, --ffdduummpp--rrttll--ccee22, and --ffdduummpp--rrttll--ccee33 enable
               dumping after the three if conversion passes.

           --ffdduummpp--rrttll--ccpprroopp__hhaarrddrreegg
               Dump after hard register copy propagation.

           --ffdduummpp--rrttll--ccssaa
               Dump after combining stack adjustments.

           --ffdduummpp--rrttll--ccssee11
           --ffdduummpp--rrttll--ccssee22
               --ffdduummpp--rrttll--ccssee11 and --ffdduummpp--rrttll--ccssee22 enable dumping after the
               two common sub-expression elimination passes.

           --ffdduummpp--rrttll--ddccee
               Dump after the standalone dead code elimination passes.

           --ffdduummpp--rrttll--ddbbrr
               Dump after delayed branch scheduling.

           --ffdduummpp--rrttll--ddccee11
           --ffdduummpp--rrttll--ddccee22
               --ffdduummpp--rrttll--ddccee11 and --ffdduummpp--rrttll--ddccee22 enable dumping after the
               two dead store elimination passes.

           --ffdduummpp--rrttll--eehh
               Dump after finalization of EH handling code.

           --ffdduummpp--rrttll--eehh__rraannggeess
               Dump after conversion of EH handling range regions.

           --ffdduummpp--rrttll--eexxppaanndd
               Dump after RTL generation.

           --ffdduummpp--rrttll--ffwwpprroopp11
           --ffdduummpp--rrttll--ffwwpprroopp22
               --ffdduummpp--rrttll--ffwwpprroopp11 and --ffdduummpp--rrttll--ffwwpprroopp22 enable dumping after
               the two forward propagation passes.

           --ffdduummpp--rrttll--ggccssee11
           --ffdduummpp--rrttll--ggccssee22
               --ffdduummpp--rrttll--ggccssee11 and --ffdduummpp--rrttll--ggccssee22 enable dumping after
               global common subexpression elimination.

           --ffdduummpp--rrttll--iinniitt--rreeggss
               Dump after the initialization of the registers.

           --ffdduummpp--rrttll--iinniittvvaallss
               Dump after the computation of the initial value sets.

           --ffdduummpp--rrttll--iinnttoo__ccffggllaayyoouutt
               Dump after converting to cfglayout mode.

           --ffdduummpp--rrttll--iirraa
               Dump after iterated register allocation.

           --ffdduummpp--rrttll--jjuummpp
               Dump after the second jump optimization.

           --ffdduummpp--rrttll--lloooopp22
               --ffdduummpp--rrttll--lloooopp22 enables dumping after the rtl loop
               optimization passes.

           --ffdduummpp--rrttll--mmaacchh
               Dump after performing the machine dependent reorganization
               pass, if that pass exists.

           --ffdduummpp--rrttll--mmooddee__ssww
               Dump after removing redundant mode switches.

           --ffdduummpp--rrttll--rrnnrreegg
               Dump after register renumbering.

           --ffdduummpp--rrttll--oouuttooff__ccffggllaayyoouutt
               Dump after converting from cfglayout mode.

           --ffdduummpp--rrttll--ppeeeepphhoollee22
               Dump after the peephole pass.

           --ffdduummpp--rrttll--ppoossttrreellooaadd
               Dump after post-reload optimizations.

           --ffdduummpp--rrttll--pprroo__aanndd__eeppiilloogguuee
               Dump after generating the function pro and epilogues.

           --ffdduummpp--rrttll--rreeggmmoovvee
               Dump after the register move pass.

           --ffdduummpp--rrttll--sscchheedd11
           --ffdduummpp--rrttll--sscchheedd22
               --ffdduummpp--rrttll--sscchheedd11 and --ffdduummpp--rrttll--sscchheedd22 enable dumping after
               the basic block scheduling passes.

           --ffdduummpp--rrttll--sseeee
               Dump after sign extension elimination.

           --ffdduummpp--rrttll--sseeqqaabbssttrr
               Dump after common sequence discovery.

           --ffdduummpp--rrttll--sshhoorrtteenn
               Dump after shortening branches.

           --ffdduummpp--rrttll--ssiibblliinngg
               Dump after sibling call optimizations.

           --ffdduummpp--rrttll--sspplliitt11
           --ffdduummpp--rrttll--sspplliitt22
           --ffdduummpp--rrttll--sspplliitt33
           --ffdduummpp--rrttll--sspplliitt44
           --ffdduummpp--rrttll--sspplliitt55
               --ffdduummpp--rrttll--sspplliitt11, --ffdduummpp--rrttll--sspplliitt22, --ffdduummpp--rrttll--sspplliitt33,
               --ffdduummpp--rrttll--sspplliitt44 and --ffdduummpp--rrttll--sspplliitt55 enable dumping after
               five rounds of instruction splitting.

           --ffdduummpp--rrttll--ssmmss
               Dump after modulo scheduling.  This pass is only run on some
               architectures.

           --ffdduummpp--rrttll--ssttaacckk
               Dump after conversion from GCCâ€™s "flat register file" registers
               to the x87â€™s stack-like registers.  This pass is only run on
               x86 variants.

           --ffdduummpp--rrttll--ssuubbrreegg11
           --ffdduummpp--rrttll--ssuubbrreegg22
               --ffdduummpp--rrttll--ssuubbrreegg11 and --ffdduummpp--rrttll--ssuubbrreegg22 enable dumping after
               the two subreg expansion passes.

           --ffdduummpp--rrttll--uunnsshhaarree
               Dump after all rtl has been unshared.

           --ffdduummpp--rrttll--vvaarrttrraacckk
               Dump after variable tracking.

           --ffdduummpp--rrttll--vvrreeggss
               Dump after converting virtual registers to hard registers.

           --ffdduummpp--rrttll--wweebb
               Dump after live range splitting.

           --ffdduummpp--rrttll--rreeggccllaassss
           --ffdduummpp--rrttll--ssuubbrreeggss__ooff__mmooddee__iinniitt
           --ffdduummpp--rrttll--ssuubbrreeggss__ooff__mmooddee__ffiinniisshh
           --ffdduummpp--rrttll--ddffiinniitt
           --ffdduummpp--rrttll--ddffiinniisshh
               These dumps are defined but always produce empty files.

           --ffdduummpp--rrttll--aallll
               Produce all the dumps listed above.

           --ddAA Annotate the assembler output with miscellaneous debugging
               information.

           --ddDD Dump all macro definitions, at the end of preprocessing, in
               addition to normal output.

           --ddHH Produce a core dump whenever an error occurs.

           --ddmm Print statistics on memory usage, at the end of the run, to
               standard error.

           --ddpp Annotate the assembler output with a comment indicating which
               pattern and alternative was used.  The length of each
               instruction is also printed.

           --ddPP Dump the RTL in the assembler output as a comment before each
               instruction.  Also turns on --ddpp annotation.

           --ddvv For each of the other indicated dump files (--ffdduummpp--rrttll--_p_a_s_s),
               dump a representation of the control flow graph suitable for
               viewing with VCG to _f_i_l_e_._p_a_s_s_._v_c_g.

           --ddxx Just generate RTL for a function instead of compiling it.
               Usually used with --ffdduummpp--rrttll--eexxppaanndd.

           --ddyy Dump debugging information during parsing, to standard error.

       --ffdduummpp--nnooaaddddrr
           When doing debugging dumps, suppress address output.  This makes it
           more feasible to use diff on debugging dumps for compiler
           invocations with different compiler binaries and/or different text
           / bss / data / heap / stack / dso start locations.

       --ffdduummpp--uunnnnuummbbeerreedd
           When doing debugging dumps, suppress instruction numbers and
           address output.  This makes it more feasible to use diff on
           debugging dumps for compiler invocations with different options, in
           particular with and without --gg.

       --ffdduummpp--uunnnnuummbbeerreedd--lliinnkkss
           When doing debugging dumps (see --dd option above), suppress
           instruction numbers for the links to the previous and next
           instructions in a sequence.

       --ffdduummpp--ttrraannssllaattiioonn--uunniitt (C++ only)
       --ffdduummpp--ttrraannssllaattiioonn--uunniitt--_o_p_t_i_o_n_s (C++ only)
           Dump a representation of the tree structure for the entire
           translation unit to a file.  The file name is made by appending _._t_u
           to the source file name.  If the --_o_p_t_i_o_n_s form is used, _o_p_t_i_o_n_s
           controls the details of the dump as described for the --ffdduummpp--ttrreeee
           options.

       --ffdduummpp--ccllaassss--hhiieerraarrcchhyy (C++ only)
       --ffdduummpp--ccllaassss--hhiieerraarrcchhyy--_o_p_t_i_o_n_s (C++ only)
           Dump a representation of each classâ€™s hierarchy and virtual
           function table layout to a file.  The file name is made by
           appending _._c_l_a_s_s to the source file name.  If the --_o_p_t_i_o_n_s form is
           used, _o_p_t_i_o_n_s controls the details of the dump as described for the
           --ffdduummpp--ttrreeee options.

       --ffdduummpp--iippaa--_s_w_i_t_c_h
           Control the dumping at various stages of inter-procedural analysis
           language tree to a file.  The file name is generated by appending a
           switch specific suffix to the source file name.  The following
           dumps are possible:

           aallll Enables all inter-procedural analysis dumps.

           ccggrraapphh
               Dumps information about call-graph optimization, unused
               function removal, and inlining decisions.

           iinnlliinnee
               Dump after function inlining.

       --ffdduummpp--ssttaattiissttiiccss--_o_p_t_i_o_n
           Enable and control dumping of pass statistics in a separate file.
           The file name is generated by appending a suffix ending in
           ..ssttaattiissttiiccss to the source file name.  If the --_o_p_t_i_o_n form is used,
           --ssttaattss will cause counters to be summed over the whole compilation
           unit while --ddeettaaiillss will dump every event as the passes generate
           them.  The default with no option is to sum counters for each
           function compiled.

       --ffdduummpp--ttrreeee--_s_w_i_t_c_h
       --ffdduummpp--ttrreeee--_s_w_i_t_c_h--_o_p_t_i_o_n_s
           Control the dumping at various stages of processing the
           intermediate language tree to a file.  The file name is generated
           by appending a switch specific suffix to the source file name.  If
           the --_o_p_t_i_o_n_s form is used, _o_p_t_i_o_n_s is a list of -- separated options
           that control the details of the dump.  Not all options are
           applicable to all dumps, those which are not meaningful will be
           ignored.  The following options are available

           aaddddrreessss
               Print the address of each node.  Usually this is not meaningful
               as it changes according to the environment and source file.
               Its primary use is for tying up a dump file with a debug
               environment.

           sslliimm
               Inhibit dumping of members of a scope or body of a function
               merely because that scope has been reached.  Only dump such
               items when they are directly reachable by some other path.
               When dumping pretty-printed trees, this option inhibits dumping
               the bodies of control structures.

           rraaww Print a raw representation of the tree.  By default, trees are
               pretty-printed into a C-like representation.

           ddeettaaiillss
               Enable more detailed dumps (not honored by every dump option).

           ssttaattss
               Enable dumping various statistics about the pass (not honored
               by every dump option).

           bblloocckkss
               Enable showing basic block boundaries (disabled in raw dumps).

           vvooppss
               Enable showing virtual operands for every statement.

           lliinneennoo
               Enable showing line numbers for statements.

           uuiidd Enable showing the unique ID ("DECL_UID") for each variable.

           vveerrbboossee
               Enable showing the tree dump for each statement.

           aallll Turn on all options, except rraaww, sslliimm, vveerrbboossee and lliinneennoo.

           The following tree dumps are possible:

           oorriiggiinnaall
               Dump before any tree based optimization, to _f_i_l_e_._o_r_i_g_i_n_a_l.

           ooppttiimmiizzeedd
               Dump after all tree based optimization, to _f_i_l_e_._o_p_t_i_m_i_z_e_d.

           ggiimmppllee
               Dump each function before and after the gimplification pass to
               a file.  The file name is made by appending _._g_i_m_p_l_e to the
               source file name.

           ccffgg Dump the control flow graph of each function to a file.  The
               file name is made by appending _._c_f_g to the source file name.

           vvccgg Dump the control flow graph of each function to a file in VCG
               format.  The file name is made by appending _._v_c_g to the source
               file name.  Note that if the file contains more than one
               function, the generated file cannot be used directly by VCG.
               You will need to cut and paste each functionâ€™s graph into its
               own separate file first.

           cchh  Dump each function after copying loop headers.  The file name
               is made by appending _._c_h to the source file name.

           ssssaa Dump SSA related information to a file.  The file name is made
               by appending _._s_s_a to the source file name.

           aalliiaass
               Dump aliasing information for each function.  The file name is
               made by appending _._a_l_i_a_s to the source file name.

           ccccpp Dump each function after CCP.  The file name is made by
               appending _._c_c_p to the source file name.

           ssttoorreeccccpp
               Dump each function after STORE-CCP.  The file name is made by
               appending _._s_t_o_r_e_c_c_p to the source file name.

           pprree Dump trees after partial redundancy elimination.  The file name
               is made by appending _._p_r_e to the source file name.

           ffrree Dump trees after full redundancy elimination.  The file name is
               made by appending _._f_r_e to the source file name.

           ccooppyypprroopp
               Dump trees after copy propagation.  The file name is made by
               appending _._c_o_p_y_p_r_o_p to the source file name.

           ssttoorree__ccooppyypprroopp
               Dump trees after store copy-propagation.  The file name is made
               by appending _._s_t_o_r_e___c_o_p_y_p_r_o_p to the source file name.

           ddccee Dump each function after dead code elimination.  The file name
               is made by appending _._d_c_e to the source file name.

           mmuuddffllaapp
               Dump each function after adding mudflap instrumentation.  The
               file name is made by appending _._m_u_d_f_l_a_p to the source file
               name.

           ssrraa Dump each function after performing scalar replacement of
               aggregates.  The file name is made by appending _._s_r_a to the
               source file name.

           ssiinnkk
               Dump each function after performing code sinking.  The file
               name is made by appending _._s_i_n_k to the source file name.

           ddoomm Dump each function after applying dominator tree optimizations.
               The file name is made by appending _._d_o_m to the source file
               name.

           ddssee Dump each function after applying dead store elimination.  The
               file name is made by appending _._d_s_e to the source file name.

           pphhiioopptt
               Dump each function after optimizing PHI nodes into straightline
               code.  The file name is made by appending _._p_h_i_o_p_t to the source
               file name.

           ffoorrwwpprroopp
               Dump each function after forward propagating single use
               variables.  The file name is made by appending _._f_o_r_w_p_r_o_p to the
               source file name.

           ccooppyyrreennaammee
               Dump each function after applying the copy rename optimization.
               The file name is made by appending _._c_o_p_y_r_e_n_a_m_e to the source
               file name.

           nnrrvv Dump each function after applying the named return value
               optimization on generic trees.  The file name is made by
               appending _._n_r_v to the source file name.

           vveecctt
               Dump each function after applying vectorization of loops.  The
               file name is made by appending _._v_e_c_t to the source file name.

           vvrrpp Dump each function after Value Range Propagation (VRP).  The
               file name is made by appending _._v_r_p to the source file name.

           aallll Enable all the available tree dumps with the flags provided in
               this option.

       --ffttrreeee--vveeccttoorriizzeerr--vveerrbboossee==_n
           This option controls the amount of debugging output the vectorizer
           prints.  This information is written to standard error, unless
           --ffdduummpp--ttrreeee--aallll or --ffdduummpp--ttrreeee--vveecctt is specified, in which case it
           is output to the usual dump listing file, _._v_e_c_t.  For _n=0 no
           diagnostic information is reported.  If _n=1 the vectorizer reports
           each loop that got vectorized, and the total number of loops that
           got vectorized.  If _n=2 the vectorizer also reports non-vectorized
           loops that passed the first analysis phase (vect_analyze_loop_form)
           - i.e. countable, inner-most, single-bb, single-entry/exit loops.
           This is the same verbosity level that --ffdduummpp--ttrreeee--vveecctt--ssttaattss uses.
           Higher verbosity levels mean either more information dumped for
           each reported loop, or same amount of information reported for more
           loops: If _n=3, alignment related information is added to the
           reports.  If _n=4, data-references related information (e.g. memory
           dependences, memory access-patterns) is added to the reports.  If
           _n=5, the vectorizer reports also non-vectorized inner-most loops
           that did not pass the first analysis phase (i.e., may not be
           countable, or may have complicated control-flow).  If _n=6, the
           vectorizer reports also non-vectorized nested loops.  For _n=7, all
           the information the vectorizer generates during its analysis and
           transformation is reported.  This is the same verbosity level that
           --ffdduummpp--ttrreeee--vveecctt--ddeettaaiillss uses.

       --ffrraannddoomm--sseeeedd==_s_t_r_i_n_g
           This option provides a seed that GCC uses when it would otherwise
           use random numbers.  It is used to generate certain symbol names
           that have to be different in every compiled file.  It is also used
           to place unique stamps in coverage data files and the object files
           that produce them.  You can use the --ffrraannddoomm--sseeeedd option to produce
           reproducibly identical object files.

           The _s_t_r_i_n_g should be different for every file you compile.

       --ffsscchheedd--vveerrbboossee==_n
           On targets that use instruction scheduling, this option controls
           the amount of debugging output the scheduler prints.  This
           information is written to standard error, unless --ffdduummpp--rrttll--sscchheedd11
           or --ffdduummpp--rrttll--sscchheedd22 is specified, in which case it is output to
           the usual dump listing file, _._s_c_h_e_d or _._s_c_h_e_d_2 respectively.
           However for _n greater than nine, the output is always printed to
           standard error.

           For _n greater than zero, --ffsscchheedd--vveerrbboossee outputs the same
           information as --ffdduummpp--rrttll--sscchheedd11 and --ffdduummpp--rrttll--sscchheedd22.  For _n
           greater than one, it also output basic block probabilities,
           detailed ready list information and unit/insn info.  For _n greater
           than two, it includes RTL at abort point, control-flow and regions
           info.  And for _n over four, --ffsscchheedd--vveerrbboossee also includes
           dependence info.

       --ssaavvee--tteemmppss
           Store the usual "temporary" intermediate files permanently; place
           them in the current directory and name them based on the source
           file.  Thus, compiling _f_o_o_._c with --cc --ssaavvee--tteemmppss would produce
           files _f_o_o_._i and _f_o_o_._s, as well as _f_o_o_._o.  This creates a
           preprocessed _f_o_o_._i output file even though the compiler now
           normally uses an integrated preprocessor.

           When used in combination with the --xx command line option,
           --ssaavvee--tteemmppss is sensible enough to avoid over writing an input
           source file with the same extension as an intermediate file.  The
           corresponding intermediate file may be obtained by renaming the
           source file before using --ssaavvee--tteemmppss.

       --ttiimmee[==_f_i_l_e]
           Report the CPU time taken by each subprocess in the compilation
           sequence.  For C source files, this is the compiler proper and
           assembler (plus the linker if linking is done).

           Without the specification of an output file, the output looks like
           this:

                   # cc1 0.12 0.01
                   # as 0.00 0.01

           The first number on each line is the "user time", that is time
           spent executing the program itself.  The second number is "system
           time", time spent executing operating system routines on behalf of
           the program.  Both numbers are in seconds.

           With the specification of an output file, the output is appended to
           the named file, and it looks like this:

                   0.12 0.01 cc1 <options>
                   0.00 0.01 as <options>

           The "user time" and the "system time" are moved before the program
           name, and the options passed to the program are displayed, so that
           one can later tell what file was being compiled, and with which
           options.

       --ffvvaarr--ttrraacckkiinngg
           Run variable tracking pass.  It computes where variables are stored
           at each position in code.  Better debugging information is then
           generated (if the debugging information format supports this
           information).

           It is enabled by default when compiling with optimization (--OOss, --OO,
           --OO22, ...), debugging information (--gg) and the debug info format
           supports it.

       --ffvvaarr--ttrraacckkiinngg--aassssiiggnnmmeennttss
           Annotate assignments to user variables early in the compilation and
           attempt to carry the annotations over throughout the compilation
           all the way to the end, in an attempt to improve debug information
           while optimizing.

           It can be enabled even if var-tracking is disabled, in which case
           annotations will be created and maintained, but discarded at the
           end.

       --ffvvaarr--ttrraacckkiinngg--aassssiiggnnmmeennttss--ttooggggllee
           Toggle --ffvvaarr--ttrraacckkiinngg--aassssiiggnnmmeennttss, in the same way that --ggttooggggllee
           toggles --gg.

       --pprriinntt--ffiillee--nnaammee==_l_i_b_r_a_r_y
           Print the full absolute name of the library file _l_i_b_r_a_r_y that would
           be used when linking---and donâ€™t do anything else.  With this
           option, GCC does not compile or link anything; it just prints the
           file name.

       --pprriinntt--mmuullttii--ddiirreeccttoorryy
           Print the directory name corresponding to the multilib selected by
           any other switches present in the command line.  This directory is
           supposed to exist in GGCCCC__EEXXEECC__PPRREEFFIIXX.

       --pprriinntt--mmuullttii--lliibb
           Print the mapping from multilib directory names to compiler
           switches that enable them.  The directory name is separated from
           the switches by ;;, and each switch starts with an @@}} iinnsstteeaadd ooff tthhee
           @@ssaammpp{{--, without spaces between multiple switches.  This is
           supposed to ease shell-processing.

       --pprriinntt--mmuullttii--ooss--ddiirreeccttoorryy
           Print the path to OS libraries for the selected multilib, relative
           to some _l_i_b subdirectory.  If OS libraries are present in the _l_i_b
           subdirectory and no multilibs are used, this is usually just _., if
           OS libraries are present in _l_i_b_s_u_f_f_i_x sibling directories this
           prints e.g. _._._/_l_i_b_6_4, _._._/_l_i_b or _._._/_l_i_b_3_2, or if OS libraries are
           present in _l_i_b_/_s_u_b_d_i_r subdirectories it prints e.g. _a_m_d_6_4, _s_p_a_r_c_v_9
           or _e_v_6.

       --pprriinntt--pprroogg--nnaammee==_p_r_o_g_r_a_m
           Like --pprriinntt--ffiillee--nnaammee, but searches for a program such as ccpppp.

       --pprriinntt--lliibbggcccc--ffiillee--nnaammee
           Same as --pprriinntt--ffiillee--nnaammee==lliibbggcccc..aa.

           This is useful when you use --nnoossttddlliibb or --nnooddeeffaauullttlliibbss but you do
           want to link with _l_i_b_g_c_c_._a.  You can do

                   gcc -nostdlib <files>... `gcc -print-libgcc-file-name`

       --pprriinntt--sseeaarrcchh--ddiirrss
           Print the name of the configured installation directory and a list
           of program and library directories ggcccc will search---and donâ€™t do
           anything else.

           This is useful when ggcccc prints the error message iinnssttaallllaattiioonn
           pprroobblleemm,, ccaannnnoott eexxeecc ccpppp00:: NNoo ssuucchh ffiillee oorr ddiirreeccttoorryy.  To resolve
           this you either need to put _c_p_p_0 and the other compiler components
           where ggcccc expects to find them, or you can set the environment
           variable GGCCCC__EEXXEECC__PPRREEFFIIXX to the directory where you installed them.
           Donâ€™t forget the trailing //.

       --pprriinntt--ssyyssrroooott
           Print the target sysroot directory that will be used during
           compilation.  This is the target sysroot specified either at
           configure time or using the ----ssyyssrroooott option, possibly with an
           extra suffix that depends on compilation options.  If no target
           sysroot is specified, the option prints nothing.

       --pprriinntt--ssyyssrroooott--hheeaaddeerrss--ssuuffffiixx
           Print the suffix added to the target sysroot when searching for
           headers, or give an error if the compiler is not configured with
           such a suffix---and donâ€™t do anything else.

       --dduummppmmaacchhiinnee
           Print the compilerâ€™s target machine (for example,
           ii668866--ppcc--lliinnuuxx--ggnnuu)---and donâ€™t do anything else.

       --dduummppvveerrssiioonn
           Print the compiler version (for example, 33..00)---and donâ€™t do
           anything else.

       --dduummppssppeeccss
           Print the compilerâ€™s built-in specs---and donâ€™t do anything else.
           (This is used when GCC itself is being built.)

       --ffeelliimmiinnaattee--uunnuusseedd--ddeebbuugg--ttyyppeess
           Normally, when producing DWARF2 output, GCC will emit debugging
           information for all types declared in a compilation unit,
           regardless of whether or not they are actually used in that
           compilation unit.  Sometimes this is useful, such as if, in the
           debugger, you want to cast a value to a type that is not actually
           used in your program (but is declared).  More often, however, this
           results in a significant amount of wasted space.  With this option,
           GCC will avoid producing debug symbol output for types that are
           nowhere used in the source file being compiled.

   OOppttiioonnss TThhaatt CCoonnttrrooll OOppttiimmiizzaattiioonn
       These options control various sorts of optimizations.

       Without any optimization option, the compilerâ€™s goal is to reduce the
       cost of compilation and to make debugging produce the expected results.
       Statements are independent: if you stop the program with a breakpoint
       between statements, you can then assign a new value to any variable or
       change the program counter to any other statement in the function and
       get exactly the results you would expect from the source code.

       Turning on optimization flags makes the compiler attempt to improve the
       performance and/or code size at the expense of compilation time and
       possibly the ability to debug the program.

       The compiler performs optimization based on the knowledge it has of the
       program.  Compiling multiple files at once to a single output file mode
       allows the compiler to use information gained from all of the files
       when compiling each of them.

       Not all optimizations are controlled directly by a flag.  Only
       optimizations that have a flag are listed.

       --OO
       --OO11 Optimize.  Optimizing compilation takes somewhat more time, and a
           lot more memory for a large function.

           With --OO, the compiler tries to reduce code size and execution time,
           without performing any optimizations that take a great deal of
           compilation time.

           --OO turns on the following optimization flags:

           --ffaauuttoo--iinncc--ddeecc --ffccpprroopp--rreeggiisstteerrss --ffddccee --ffddeeffeerr--ppoopp --ffddeellaayyeedd--bbrraanncchh
           --ffddssee --ffgguueessss--bbrraanncchh--pprroobbaabbiilliittyy --ffiiff--ccoonnvveerrssiioonn22 --ffiiff--ccoonnvveerrssiioonn
           --ffiinnlliinnee--ssmmaallll--ffuunnccttiioonnss --ffiippaa--ppuurree--ccoonnsstt --ffiippaa--rreeffeerreennccee
           --ffmmeerrggee--ccoonnssttaannttss --ffsspplliitt--wwiiddee--ttyyppeess --ffttrreeee--bbuuiillttiinn--ccaallll--ddccee
           --ffttrreeee--ccccpp --ffttrreeee--cchh --ffttrreeee--ccooppyyrreennaammee --ffttrreeee--ddccee
           --ffttrreeee--ddoommiinnaattoorr--ooppttss --ffttrreeee--ddssee --ffttrreeee--ffrree --ffttrreeee--ssrraa --ffttrreeee--tteerr
           --ffuunniitt--aatt--aa--ttiimmee

           --OO also turns on --ffoommiitt--ffrraammee--ppooiinntteerr on machines where doing so
           does not interfere with debugging.

       --OO22 Optimize even more.  GCC performs nearly all supported
           optimizations that do not involve a space-speed tradeoff.  As
           compared to --OO, this option increases both compilation time and the
           performance of the generated code.

           --OO22 turns on all optimization flags specified by --OO.  It also turns
           on the following optimization flags: --fftthhrreeaadd--jjuummppss
           --ffaalliiggnn--ffuunnccttiioonnss  --ffaalliiggnn--jjuummppss --ffaalliiggnn--llooooppss  --ffaalliiggnn--llaabbeellss
           --ffccaalllleerr--ssaavveess --ffccrroossssjjuummppiinngg --ffccssee--ffoollllooww--jjuummppss  --ffccssee--sskkiipp--bblloocckkss
           --ffddeelleettee--nnuullll--ppooiinntteerr--cchheecckkss --ffeexxppeennssiivvee--ooppttiimmiizzaattiioonnss --ffggccssee
           --ffggccssee--llmm --ffiinnddiirreecctt--iinnlliinniinngg --ffooppttiimmiizzee--ssiibblliinngg--ccaallllss --ffppeeeepphhoollee22
           --ffrreeggmmoovvee --ffrreeoorrddeerr--bblloocckkss  --ffrreeoorrddeerr--ffuunnccttiioonnss
           --ffrreerruunn--ccssee--aafftteerr--lloooopp --ffsscchheedd--iinntteerrbblloocckk  --ffsscchheedd--ssppeecc
           --ffsscchheedduullee--iinnssnnss  --ffsscchheedduullee--iinnssnnss22 --ffssttrriicctt--aalliiaassiinngg
           --ffssttrriicctt--oovveerrffllooww --ffttrreeee--sswwiittcchh--ccoonnvveerrssiioonn --ffttrreeee--pprree --ffttrreeee--vvrrpp

           Please note the warning under --ffggccssee about invoking --OO22 on programs
           that use computed gotos.

       --OO33 Optimize yet more.  --OO33 turns on all optimizations specified by --OO22
           and also turns on the --ffiinnlliinnee--ffuunnccttiioonnss, --ffuunnsswwiittcchh--llooooppss,
           --ffpprreeddiiccttiivvee--ccoommmmoonniinngg, --ffggccssee--aafftteerr--rreellooaadd, --ffttrreeee--vveeccttoorriizzee and
           --ffiippaa--ccpp--cclloonnee options.

       --OO00 Reduce compilation time and make debugging produce the expected
           results.  This is the default.

       --OOss Optimize for size.  --OOss enables all --OO22 optimizations that do not
           typically increase code size.  It also performs further
           optimizations designed to reduce code size.

           --OOss disables the following optimization flags: --ffaalliiggnn--ffuunnccttiioonnss
           --ffaalliiggnn--jjuummppss  --ffaalliiggnn--llooooppss --ffaalliiggnn--llaabbeellss  --ffrreeoorrddeerr--bblloocckkss
           --ffrreeoorrddeerr--bblloocckkss--aanndd--ppaarrttiittiioonn --ffpprreeffeettcchh--lloooopp--aarrrraayyss
           --ffttrreeee--vveecctt--lloooopp--vveerrssiioonn

           If you use multiple --OO options, with or without level numbers, the
           last such option is the one that is effective.

       Options of the form --ff_f_l_a_g specify machine-independent flags.  Most
       flags have both positive and negative forms; the negative form of --ffffoooo
       would be --ffnnoo--ffoooo.  In the table below, only one of the forms is
       listed---the one you typically will use.  You can figure out the other
       form by either removing nnoo-- or adding it.

       The following options control specific optimizations.  They are either
       activated by --OO options or are related to ones that are.  You can use
       the following flags in the rare cases when "fine-tuning" of
       optimizations to be performed is desired.

       --ffnnoo--ddeeffaauulltt--iinnlliinnee
           Do not make member functions inline by default merely because they
           are defined inside the class scope (C++ only).  Otherwise, when you
           specify --OO, member functions defined inside class scope are
           compiled inline by default; i.e., you donâ€™t need to add iinnlliinnee in
           front of the member function name.

       --ffnnoo--ddeeffeerr--ppoopp
           Always pop the arguments to each function call as soon as that
           function returns.  For machines which must pop arguments after a
           function call, the compiler normally lets arguments accumulate on
           the stack for several function calls and pops them all at once.

           Disabled at levels --OO, --OO22, --OO33, --OOss.

       --ffffoorrwwaarrdd--pprrooppaaggaattee
           Perform a forward propagation pass on RTL.  The pass tries to
           combine two instructions and checks if the result can be
           simplified.  If loop unrolling is active, two passes are performed
           and the second is scheduled after loop unrolling.

           This option is enabled by default at optimization levels --OO22, --OO33,
           --OOss.

       --ffoommiitt--ffrraammee--ppooiinntteerr
           Donâ€™t keep the frame pointer in a register for functions that donâ€™t
           need one.  This avoids the instructions to save, set up and restore
           frame pointers; it also makes an extra register available in many
           functions.  IItt aallssoo mmaakkeess ddeebbuuggggiinngg iimmppoossssiibbllee oonn ssoommee mmaacchhiinneess..

           On some machines, such as the VAX, this flag has no effect, because
           the standard calling sequence automatically handles the frame
           pointer and nothing is saved by pretending it doesnâ€™t exist.  The
           machine-description macro "FRAME_POINTER_REQUIRED" controls whether
           a target machine supports this flag.

           Enabled at levels --OO, --OO22, --OO33, --OOss.

       --ffooppttiimmiizzee--ssiibblliinngg--ccaallllss
           Optimize sibling and tail recursive calls.

           Enabled at levels --OO22, --OO33, --OOss.

       --ffnnoo--iinnlliinnee
           Donâ€™t pay attention to the "inline" keyword.  Normally this option
           is used to keep the compiler from expanding any functions inline.
           Note that if you are not optimizing, no functions can be expanded
           inline.

       --ffiinnlliinnee--ssmmaallll--ffuunnccttiioonnss
           Integrate functions into their callers when their body is smaller
           than expected function call code (so overall size of program gets
           smaller).  The compiler heuristically decides which functions are
           simple enough to be worth integrating in this way.

           Enabled at level --OO22.

       --ffiinnddiirreecctt--iinnlliinniinngg
           Inline also indirect calls that are discovered to be known at
           compile time thanks to previous inlining.  This option has any
           effect only when inlining itself is turned on by the
           --ffiinnlliinnee--ffuunnccttiioonnss or --ffiinnlliinnee--ssmmaallll--ffuunnccttiioonnss options.

           Enabled at level --OO22.

       --ffiinnlliinnee--ffuunnccttiioonnss
           Integrate all simple functions into their callers.  The compiler
           heuristically decides which functions are simple enough to be worth
           integrating in this way.

           If all calls to a given function are integrated, and the function
           is declared "static", then the function is normally not output as
           assembler code in its own right.

           Enabled at level --OO33.

       --ffiinnlliinnee--ffuunnccttiioonnss--ccaalllleedd--oonnccee
           Consider all "static" functions called once for inlining into their
           caller even if they are not marked "inline".  If a call to a given
           function is integrated, then the function is not output as
           assembler code in its own right.

           Enabled at levels --OO11, --OO22, --OO33 and --OOss.

       --ffeeaarrllyy--iinnlliinniinngg
           Inline functions marked by "always_inline" and functions whose body
           seems smaller than the function call overhead early before doing
           --ffpprrooffiillee--ggeenneerraattee instrumentation and real inlining pass.  Doing
           so makes profiling significantly cheaper and usually inlining
           faster on programs having large chains of nested wrapper functions.

           Enabled by default.

       --ffiinnlliinnee--lliimmiitt==_n
           By default, GCC limits the size of functions that can be inlined.
           This flag allows coarse control of this limit.  _n is the size of
           functions that can be inlined in number of pseudo instructions.

           Inlining is actually controlled by a number of parameters, which
           may be specified individually by using ----ppaarraamm _n_a_m_e==_v_a_l_u_e.  The
           --ffiinnlliinnee--lliimmiitt==_n option sets some of these parameters as follows:

           mmaaxx--iinnlliinnee--iinnssnnss--ssiinnggllee
               is set to _n/2.

           mmaaxx--iinnlliinnee--iinnssnnss--aauuttoo
               is set to _n/2.

           See below for a documentation of the individual parameters
           controlling inlining and for the defaults of these parameters.

           _N_o_t_e_: there may be no value to --ffiinnlliinnee--lliimmiitt that results in
           default behavior.

           _N_o_t_e_: pseudo instruction represents, in this particular context, an
           abstract measurement of functionâ€™s size.  In no way does it
           represent a count of assembly instructions and as such its exact
           meaning might change from one release to an another.

       --ffkkeeeepp--iinnlliinnee--ffuunnccttiioonnss
           In C, emit "static" functions that are declared "inline" into the
           object file, even if the function has been inlined into all of its
           callers.  This switch does not affect functions using the "extern
           inline" extension in GNU C89.  In C++, emit any and all inline
           functions into the object file.

       --ffkkeeeepp--ssttaattiicc--ccoonnssttss
           Emit variables declared "static const" when optimization isnâ€™t
           turned on, even if the variables arenâ€™t referenced.

           GCC enables this option by default.  If you want to force the
           compiler to check if the variable was referenced, regardless of
           whether or not optimization is turned on, use the
           --ffnnoo--kkeeeepp--ssttaattiicc--ccoonnssttss option.

       --ffmmeerrggee--ccoonnssttaannttss
           Attempt to merge identical constants (string constants and floating
           point constants) across compilation units.

           This option is the default for optimized compilation if the
           assembler and linker support it.  Use --ffnnoo--mmeerrggee--ccoonnssttaannttss to
           inhibit this behavior.

           Enabled at levels --OO, --OO22, --OO33, --OOss.

       --ffmmeerrggee--aallll--ccoonnssttaannttss
           Attempt to merge identical constants and identical variables.

           This option implies --ffmmeerrggee--ccoonnssttaannttss.  In addition to
           --ffmmeerrggee--ccoonnssttaannttss this considers e.g. even constant initialized
           arrays or initialized constant variables with integral or floating
           point types.  Languages like C or C++ require each variable,
           including multiple instances of the same variable in recursive
           calls, to have distinct locations, so using this option will result
           in non-conforming behavior.

       --ffmmoodduulloo--sscchheedd
           Perform swing modulo scheduling immediately before the first
           scheduling pass.  This pass looks at innermost loops and reorders
           their instructions by overlapping different iterations.

       --ffmmoodduulloo--sscchheedd--aallllooww--rreeggmmoovveess
           Perform more aggressive SMS based modulo scheduling with register
           moves allowed.  By setting this flag certain anti-dependences edges
           will be deleted which will trigger the generation of reg-moves
           based on the life-range analysis.  This option is effective only
           with --ffmmoodduulloo--sscchheedd enabled.

       --ffnnoo--bbrraanncchh--ccoouunntt--rreegg
           Do not use "decrement and branch" instructions on a count register,
           but instead generate a sequence of instructions that decrement a
           register, compare it against zero, then branch based upon the
           result.  This option is only meaningful on architectures that
           support such instructions, which include x86, PowerPC, IA-64 and
           S/390.

           The default is --ffbbrraanncchh--ccoouunntt--rreegg.

       --ffnnoo--ffuunnccttiioonn--ccssee
           Do not put function addresses in registers; make each instruction
           that calls a constant function contain the functionâ€™s address
           explicitly.

           This option results in less efficient code, but some strange hacks
           that alter the assembler output may be confused by the
           optimizations performed when this option is not used.

           The default is --ffffuunnccttiioonn--ccssee

       --ffnnoo--zzeerroo--iinniittiiaalliizzeedd--iinn--bbssss
           If the target supports a BSS section, GCC by default puts variables
           that are initialized to zero into BSS.  This can save space in the
           resulting code.

           This option turns off this behavior because some programs
           explicitly rely on variables going to the data section.  E.g., so
           that the resulting executable can find the beginning of that
           section and/or make assumptions based on that.

           The default is --ffzzeerroo--iinniittiiaalliizzeedd--iinn--bbssss.

       --ffmmuuddffllaapp --ffmmuuddffllaapptthh --ffmmuuddffllaappiirr
           For front-ends that support it (C and C++), instrument all risky
           pointer/array dereferencing operations, some standard library
           string/heap functions, and some other associated constructs with
           range/validity tests.  Modules so instrumented should be immune to
           buffer overflows, invalid heap use, and some other classes of C/C++
           programming errors.  The instrumentation relies on a separate
           runtime library (_l_i_b_m_u_d_f_l_a_p), which will be linked into a program
           if --ffmmuuddffllaapp is given at link time.  Run-time behavior of the
           instrumented program is controlled by the MMUUDDFFLLAAPP__OOPPTTIIOONNSS
           environment variable.  See "env MUDFLAP_OPTIONS=-help a.out" for
           its options.

           Use --ffmmuuddffllaapptthh instead of --ffmmuuddffllaapp to compile and to link if your
           program is multi-threaded.  Use --ffmmuuddffllaappiirr, in addition to
           --ffmmuuddffllaapp or --ffmmuuddffllaapptthh, if instrumentation should ignore pointer
           reads.  This produces less instrumentation (and therefore faster
           execution) and still provides some protection against outright
           memory corrupting writes, but allows erroneously read data to
           propagate within a program.

       --fftthhrreeaadd--jjuummppss
           Perform optimizations where we check to see if a jump branches to a
           location where another comparison subsumed by the first is found.
           If so, the first branch is redirected to either the destination of
           the second branch or a point immediately following it, depending on
           whether the condition is known to be true or false.

           Enabled at levels --OO22, --OO33, --OOss.

       --ffsspplliitt--wwiiddee--ttyyppeess
           When using a type that occupies multiple registers, such as "long
           long" on a 32-bit system, split the registers apart and allocate
           them independently.  This normally generates better code for those
           types, but may make debugging more difficult.

           Enabled at levels --OO, --OO22, --OO33, --OOss.

       --ffccssee--ffoollllooww--jjuummppss
           In common subexpression elimination (CSE), scan through jump
           instructions when the target of the jump is not reached by any
           other path.  For example, when CSE encounters an "if" statement
           with an "else" clause, CSE will follow the jump when the condition
           tested is false.

           Enabled at levels --OO22, --OO33, --OOss.

       --ffccssee--sskkiipp--bblloocckkss
           This is similar to --ffccssee--ffoollllooww--jjuummppss, but causes CSE to follow
           jumps which conditionally skip over blocks.  When CSE encounters a
           simple "if" statement with no else clause, --ffccssee--sskkiipp--bblloocckkss causes
           CSE to follow the jump around the body of the "if".

           Enabled at levels --OO22, --OO33, --OOss.

       --ffrreerruunn--ccssee--aafftteerr--lloooopp
           Re-run common subexpression elimination after loop optimizations
           has been performed.

           Enabled at levels --OO22, --OO33, --OOss.

       --ffggccssee
           Perform a global common subexpression elimination pass.  This pass
           also performs global constant and copy propagation.

           _N_o_t_e_: When compiling a program using computed gotos, a GCC
           extension, you may get better runtime performance if you disable
           the global common subexpression elimination pass by adding
           --ffnnoo--ggccssee to the command line.

           Enabled at levels --OO22, --OO33, --OOss.

       --ffggccssee--llmm
           When --ffggccssee--llmm is enabled, global common subexpression elimination
           will attempt to move loads which are only killed by stores into
           themselves.  This allows a loop containing a load/store sequence to
           be changed to a load outside the loop, and a copy/store within the
           loop.

           Enabled by default when gcse is enabled.

       --ffggccssee--ssmm
           When --ffggccssee--ssmm is enabled, a store motion pass is run after global
           common subexpression elimination.  This pass will attempt to move
           stores out of loops.  When used in conjunction with --ffggccssee--llmm,
           loops containing a load/store sequence can be changed to a load
           before the loop and a store after the loop.

           Not enabled at any optimization level.

       --ffggccssee--llaass
           When --ffggccssee--llaass is enabled, the global common subexpression
           elimination pass eliminates redundant loads that come after stores
           to the same memory location (both partial and full redundancies).

           Not enabled at any optimization level.

       --ffggccssee--aafftteerr--rreellooaadd
           When --ffggccssee--aafftteerr--rreellooaadd is enabled, a redundant load elimination
           pass is performed after reload.  The purpose of this pass is to
           cleanup redundant spilling.

       --ffuunnssaaffee--lloooopp--ooppttiimmiizzaattiioonnss
           If given, the loop optimizer will assume that loop indices do not
           overflow, and that the loops with nontrivial exit condition are not
           infinite.  This enables a wider range of loop optimizations even if
           the loop optimizer itself cannot prove that these assumptions are
           valid.  Using --WWuunnssaaffee--lloooopp--ooppttiimmiizzaattiioonnss, the compiler will warn
           you if it finds this kind of loop.

       --ffccrroossssjjuummppiinngg
           Perform cross-jumping transformation.  This transformation unifies
           equivalent code and save code size.  The resulting code may or may
           not perform better than without cross-jumping.

           Enabled at levels --OO22, --OO33, --OOss.

       --ffaauuttoo--iinncc--ddeecc
           Combine increments or decrements of addresses with memory accesses.
           This pass is always skipped on architectures that do not have
           instructions to support this.  Enabled by default at --OO and higher
           on architectures that support this.

       --ffddccee
           Perform dead code elimination (DCE) on RTL.  Enabled by default at
           --OO and higher.

       --ffddssee
           Perform dead store elimination (DSE) on RTL.  Enabled by default at
           --OO and higher.

       --ffiiff--ccoonnvveerrssiioonn
           Attempt to transform conditional jumps into branch-less
           equivalents.  This include use of conditional moves, min, max, set
           flags and abs instructions, and some tricks doable by standard
           arithmetics.  The use of conditional execution on chips where it is
           available is controlled by "if-conversion2".

           Enabled at levels --OO, --OO22, --OO33, --OOss.

       --ffiiff--ccoonnvveerrssiioonn22
           Use conditional execution (where available) to transform
           conditional jumps into branch-less equivalents.

           Enabled at levels --OO, --OO22, --OO33, --OOss.

       --ffddeelleettee--nnuullll--ppooiinntteerr--cchheecckkss
           Use global dataflow analysis to identify and eliminate useless
           checks for null pointers.  The compiler assumes that dereferencing
           a null pointer would have halted the program.  If a pointer is
           checked after it has already been dereferenced, it cannot be null.

           In some environments, this assumption is not true, and programs can
           safely dereference null pointers.  Use
           --ffnnoo--ddeelleettee--nnuullll--ppooiinntteerr--cchheecckkss to disable this optimization for
           programs which depend on that behavior.

           Enabled at levels --OO22, --OO33, --OOss.

       --ffeexxppeennssiivvee--ooppttiimmiizzaattiioonnss
           Perform a number of minor optimizations that are relatively
           expensive.

           Enabled at levels --OO22, --OO33, --OOss.

       --ffooppttiimmiizzee--rreeggiisstteerr--mmoovvee
       --ffrreeggmmoovvee
           Attempt to reassign register numbers in move instructions and as
           operands of other simple instructions in order to maximize the
           amount of register tying.  This is especially helpful on machines
           with two-operand instructions.

           Note --ffrreeggmmoovvee and --ffooppttiimmiizzee--rreeggiisstteerr--mmoovvee are the same
           optimization.

           Enabled at levels --OO22, --OO33, --OOss.

       --ffiirraa--aallggoorriitthhmm==_a_l_g_o_r_i_t_h_m
           Use specified coloring algorithm for the integrated register
           allocator.  The _a_l_g_o_r_i_t_h_m argument should be "priority" or "CB".
           The first algorithm specifies Chowâ€™s priority coloring, the second
           one specifies Chaitin-Briggs coloring.  The second algorithm can be
           unimplemented for some architectures.  If it is implemented, it is
           the default because Chaitin-Briggs coloring as a rule generates a
           better code.

       --ffiirraa--rreeggiioonn==_r_e_g_i_o_n
           Use specified regions for the integrated register allocator.  The
           _r_e_g_i_o_n argument should be one of "all", "mixed", or "one".  The
           first value means using all loops as register allocation regions,
           the second value which is the default means using all loops except
           for loops with small register pressure as the regions, and third
           one means using all function as a single region.  The first value
           can give best result for machines with small size and irregular
           register set, the third one results in faster and generates decent
           code and the smallest size code, and the default value usually give
           the best results in most cases and for most architectures.

       --ffiirraa--ccooaalleessccee
           Do optimistic register coalescing.  This option might be profitable
           for architectures with big regular register files.

       --ffnnoo--iirraa--sshhaarree--ssaavvee--sslloottss
           Switch off sharing stack slots used for saving call used hard
           registers living through a call.  Each hard register will get a
           separate stack slot and as a result function stack frame will be
           bigger.

       --ffnnoo--iirraa--sshhaarree--ssppiillll--sslloottss
           Switch off sharing stack slots allocated for pseudo-registers.
           Each pseudo-register which did not get a hard register will get a
           separate stack slot and as a result function stack frame will be
           bigger.

       --ffiirraa--vveerrbboossee==_n
           Set up how verbose dump file for the integrated register allocator
           will be.  Default value is 5.  If the value is greater or equal to
           10, the dump file will be stderr as if the value were _n minus 10.

       --ffddeellaayyeedd--bbrraanncchh
           If supported for the target machine, attempt to reorder
           instructions to exploit instruction slots available after delayed
           branch instructions.

           Enabled at levels --OO, --OO22, --OO33, --OOss.

       --ffsscchheedduullee--iinnssnnss
           If supported for the target machine, attempt to reorder
           instructions to eliminate execution stalls due to required data
           being unavailable.  This helps machines that have slow floating
           point or memory load instructions by allowing other instructions to
           be issued until the result of the load or floating point
           instruction is required.

           Enabled at levels --OO22, --OO33, --OOss.

       --ffsscchheedduullee--iinnssnnss22
           Similar to --ffsscchheedduullee--iinnssnnss, but requests an additional pass of
           instruction scheduling after register allocation has been done.
           This is especially useful on machines with a relatively small
           number of registers and where memory load instructions take more
           than one cycle.

           Enabled at levels --OO22, --OO33, --OOss.

       --ffnnoo--sscchheedd--iinntteerrbblloocckk
           Donâ€™t schedule instructions across basic blocks.  This is normally
           enabled by default when scheduling before register allocation, i.e.
           with --ffsscchheedduullee--iinnssnnss or at --OO22 or higher.

       --ffnnoo--sscchheedd--ssppeecc
           Donâ€™t allow speculative motion of non-load instructions.  This is
           normally enabled by default when scheduling before register
           allocation, i.e.  with --ffsscchheedduullee--iinnssnnss or at --OO22 or higher.

       --ffsscchheedd--ssppeecc--llooaadd
           Allow speculative motion of some load instructions.  This only
           makes sense when scheduling before register allocation, i.e. with
           --ffsscchheedduullee--iinnssnnss or at --OO22 or higher.

       --ffsscchheedd--ssppeecc--llooaadd--ddaannggeerroouuss
           Allow speculative motion of more load instructions.  This only
           makes sense when scheduling before register allocation, i.e. with
           --ffsscchheedduullee--iinnssnnss or at --OO22 or higher.

       --ffsscchheedd--ssttaalllleedd--iinnssnnss
       --ffsscchheedd--ssttaalllleedd--iinnssnnss==_n
           Define how many insns (if any) can be moved prematurely from the
           queue of stalled insns into the ready list, during the second
           scheduling pass.  --ffnnoo--sscchheedd--ssttaalllleedd--iinnssnnss means that no insns will
           be moved prematurely, --ffsscchheedd--ssttaalllleedd--iinnssnnss==00 means there is no
           limit on how many queued insns can be moved prematurely.
           --ffsscchheedd--ssttaalllleedd--iinnssnnss without a value is equivalent to
           --ffsscchheedd--ssttaalllleedd--iinnssnnss==11.

       --ffsscchheedd--ssttaalllleedd--iinnssnnss--ddeepp
       --ffsscchheedd--ssttaalllleedd--iinnssnnss--ddeepp==_n
           Define how many insn groups (cycles) will be examined for a
           dependency on a stalled insn that is candidate for premature
           removal from the queue of stalled insns.  This has an effect only
           during the second scheduling pass, and only if
           --ffsscchheedd--ssttaalllleedd--iinnssnnss is used.  --ffnnoo--sscchheedd--ssttaalllleedd--iinnssnnss--ddeepp is
           equivalent to --ffsscchheedd--ssttaalllleedd--iinnssnnss--ddeepp==00.
           --ffsscchheedd--ssttaalllleedd--iinnssnnss--ddeepp without a value is equivalent to
           --ffsscchheedd--ssttaalllleedd--iinnssnnss--ddeepp==11.

       --ffsscchheedd22--uussee--ssuuppeerrbblloocckkss
           When scheduling after register allocation, do use superblock
           scheduling algorithm.  Superblock scheduling allows motion across
           basic block boundaries resulting on faster schedules.  This option
           is experimental, as not all machine descriptions used by GCC model
           the CPU closely enough to avoid unreliable results from the
           algorithm.

           This only makes sense when scheduling after register allocation,
           i.e. with --ffsscchheedduullee--iinnssnnss22 or at --OO22 or higher.

       --ffsscchheedd22--uussee--ttrraacceess
           Use --ffsscchheedd22--uussee--ssuuppeerrbblloocckkss algorithm when scheduling after
           register allocation and additionally perform code duplication in
           order to increase the size of superblocks using tracer pass.  See
           --ffttrraacceerr for details on trace formation.

           This mode should produce faster but significantly longer programs.
           Also without --ffbbrraanncchh--pprroobbaabbiilliittiieess the traces constructed may not
           match the reality and hurt the performance.  This only makes sense
           when scheduling after register allocation, i.e. with
           --ffsscchheedduullee--iinnssnnss22 or at --OO22 or higher.

       --ffsseeee
           Eliminate redundant sign extension instructions and move the non-
           redundant ones to optimal placement using lazy code motion (LCM).

       --ffrreesscchheedduullee--mmoodduulloo--sscchheedduulleedd--llooooppss
           The modulo scheduling comes before the traditional scheduling, if a
           loop was modulo scheduled we may want to prevent the later
           scheduling passes from changing its schedule, we use this option to
           control that.

       --ffsseelleeccttiivvee--sscchheedduulliinngg
           Schedule instructions using selective scheduling algorithm.
           Selective scheduling runs instead of the first scheduler pass.

       --ffsseelleeccttiivvee--sscchheedduulliinngg22
           Schedule instructions using selective scheduling algorithm.
           Selective scheduling runs instead of the second scheduler pass.

       --ffsseell--sscchheedd--ppiippeelliinniinngg
           Enable software pipelining of innermost loops during selective
           scheduling.  This option has no effect until one of
           --ffsseelleeccttiivvee--sscchheedduulliinngg or --ffsseelleeccttiivvee--sscchheedduulliinngg22 is turned on.

       --ffsseell--sscchheedd--ppiippeelliinniinngg--oouutteerr--llooooppss
           When pipelining loops during selective scheduling, also pipeline
           outer loops.  This option has no effect until
           --ffsseell--sscchheedd--ppiippeelliinniinngg is turned on.

       --ffccaalllleerr--ssaavveess
           Enable values to be allocated in registers that will be clobbered
           by function calls, by emitting extra instructions to save and
           restore the registers around such calls.  Such allocation is done
           only when it seems to result in better code than would otherwise be
           produced.

           This option is always enabled by default on certain machines,
           usually those which have no call-preserved registers to use
           instead.

           Enabled at levels --OO22, --OO33, --OOss.

       --ffccoonnsseerrvvee--ssttaacckk
           Attempt to minimize stack usage.  The compiler will attempt to use
           less stack space, even if that makes the program slower.  This
           option implies setting the llaarrggee--ssttaacckk--ffrraammee parameter to 100 and
           the llaarrggee--ssttaacckk--ffrraammee--ggrroowwtthh parameter to 400.

       --ffttrreeee--rreeaassssoocc
           Perform reassociation on trees.  This flag is enabled by default at
           --OO and higher.

       --ffttrreeee--pprree
           Perform partial redundancy elimination (PRE) on trees.  This flag
           is enabled by default at --OO22 and --OO33.

       --ffttrreeee--ffrree
           Perform full redundancy elimination (FRE) on trees.  The difference
           between FRE and PRE is that FRE only considers expressions that are
           computed on all paths leading to the redundant computation.  This
           analysis is faster than PRE, though it exposes fewer redundancies.
           This flag is enabled by default at --OO and higher.

       --ffttrreeee--ccooppyy--pprroopp
           Perform copy propagation on trees.  This pass eliminates
           unnecessary copy operations.  This flag is enabled by default at --OO
           and higher.

       --ffiippaa--ppuurree--ccoonnsstt
           Discover which functions are pure or constant.  Enabled by default
           at --OO and higher.

       --ffiippaa--rreeffeerreennccee
           Discover which static variables do not escape cannot escape the
           compilation unit.  Enabled by default at --OO and higher.

       --ffiippaa--ssttrruucctt--rreeoorrgg
           Perform structure reorganization optimization, that change C-like
           structures layout in order to better utilize spatial locality.
           This transformation is effective for programs containing arrays of
           structures.  Available in two compilation modes: profile-based
           (enabled with --ffpprrooffiillee--ggeenneerraattee) or static (which uses built-in
           heuristics).  Require --ffiippaa--ttyyppee--eessccaappee to provide the safety of
           this transformation.  It works only in whole program mode, so it
           requires --ffwwhhoollee--pprrooggrraamm and --ccoommbbiinnee to be enabled.  Structures
           considered ccoolldd by this transformation are not affected (see
           ----ppaarraamm ssttrruucctt--rreeoorrgg--ccoolldd--ssttrruucctt--rraattiioo==_v_a_l_u_e).

           With this flag, the program debug info reflects a new structure
           layout.

       --ffiippaa--ppttaa
           Perform interprocedural pointer analysis.  This option is
           experimental and does not affect generated code.

       --ffiippaa--ccpp
           Perform interprocedural constant propagation.  This optimization
           analyzes the program to determine when values passed to functions
           are constants and then optimizes accordingly.  This optimization
           can substantially increase performance if the application has
           constants passed to functions.  This flag is enabled by default at
           --OO22, --OOss and --OO33.

       --ffiippaa--ccpp--cclloonnee
           Perform function cloning to make interprocedural constant
           propagation stronger.  When enabled, interprocedural constant
           propagation will perform function cloning when externally visible
           function can be called with constant arguments.  Because this
           optimization can create multiple copies of functions, it may
           significantly increase code size (see ----ppaarraamm
           iippccpp--uunniitt--ggrroowwtthh==_v_a_l_u_e).  This flag is enabled by default at --OO33.

       --ffiippaa--mmaattrriixx--rreeoorrgg
           Perform matrix flattening and transposing.  Matrix flattening tries
           to replace a m-dimensional matrix with its equivalent n-dimensional
           matrix, where n < m.  This reduces the level of indirection needed
           for accessing the elements of the matrix. The second optimization
           is matrix transposing that attempts to change the order of the
           matrixâ€™s dimensions in order to improve cache locality.  Both
           optimizations need the --ffwwhhoollee--pprrooggrraamm flag.  Transposing is
           enabled only if profiling information is available.

       --ffttrreeee--ssiinnkk
           Perform forward store motion  on trees.  This flag is enabled by
           default at --OO and higher.

       --ffttrreeee--ccccpp
           Perform sparse conditional constant propagation (CCP) on trees.
           This pass only operates on local scalar variables and is enabled by
           default at --OO and higher.

       --ffttrreeee--sswwiittcchh--ccoonnvveerrssiioonn
           Perform conversion of simple initializations in a switch to
           initializations from a scalar array.  This flag is enabled by
           default at --OO22 and higher.

       --ffttrreeee--ddccee
           Perform dead code elimination (DCE) on trees.  This flag is enabled
           by default at --OO and higher.

       --ffttrreeee--bbuuiillttiinn--ccaallll--ddccee
           Perform conditional dead code elimination (DCE) for calls to
           builtin functions that may set "errno" but are otherwise side-
           effect free.  This flag is enabled by default at --OO22 and higher if
           --OOss is not also specified.

       --ffttrreeee--ddoommiinnaattoorr--ooppttss
           Perform a variety of simple scalar cleanups (constant/copy
           propagation, redundancy elimination, range propagation and
           expression simplification) based on a dominator tree traversal.
           This also performs jump threading (to reduce jumps to jumps). This
           flag is enabled by default at --OO and higher.

       --ffttrreeee--ddssee
           Perform dead store elimination (DSE) on trees.  A dead store is a
           store into a memory location which will later be overwritten by
           another store without any intervening loads.  In this case the
           earlier store can be deleted.  This flag is enabled by default at
           --OO and higher.

       --ffttrreeee--cchh
           Perform loop header copying on trees.  This is beneficial since it
           increases effectiveness of code motion optimizations.  It also
           saves one jump.  This flag is enabled by default at --OO and higher.
           It is not enabled for --OOss, since it usually increases code size.

       --ffttrreeee--lloooopp--ooppttiimmiizzee
           Perform loop optimizations on trees.  This flag is enabled by
           default at --OO and higher.

       --ffttrreeee--lloooopp--lliinneeaarr
           Perform linear loop transformations on tree.  This flag can improve
           cache performance and allow further loop optimizations to take
           place.

       --fflloooopp--iinntteerrcchhaannggee
           Perform loop interchange transformations on loops.  Interchanging
           two nested loops switches the inner and outer loops.  For example,
           given a loop like:

                   DO J = 1, M
                     DO I = 1, N
                       A(J, I) = A(J, I) * C
                     ENDDO
                   ENDDO

           loop interchange will transform the loop as if the user had
           written:

                   DO I = 1, N
                     DO J = 1, M
                       A(J, I) = A(J, I) * C
                     ENDDO
                   ENDDO

           which can be beneficial when "N" is larger than the caches, because
           in Fortran, the elements of an array are stored in memory
           contiguously by column, and the original loop iterates over rows,
           potentially creating at each access a cache miss.  This
           optimization applies to all the languages supported by GCC and is
           not limited to Fortran.  To use this code transformation, GCC has
           to be configured with ----wwiitthh--ppppll and ----wwiitthh--cclloooogg to enable the
           Graphite loop transformation infrastructure.

       --fflloooopp--ssttrriipp--mmiinnee
           Perform loop strip mining transformations on loops.  Strip mining
           splits a loop into two nested loops.  The outer loop has strides
           equal to the strip size and the inner loop has strides of the
           original loop within a strip.  For example, given a loop like:

                   DO I = 1, N
                     A(I) = A(I) + C
                   ENDDO

           loop strip mining will transform the loop as if the user had
           written:

                   DO II = 1, N, 4
                     DO I = II, min (II + 3, N)
                       A(I) = A(I) + C
                     ENDDO
                   ENDDO

           This optimization applies to all the languages supported by GCC and
           is not limited to Fortran.  To use this code transformation, GCC
           has to be configured with ----wwiitthh--ppppll and ----wwiitthh--cclloooogg to enable the
           Graphite loop transformation infrastructure.

       --fflloooopp--bblloocckk
           Perform loop blocking transformations on loops.  Blocking strip
           mines each loop in the loop nest such that the memory accesses of
           the element loops fit inside caches.  For example, given a loop
           like:

                   DO I = 1, N
                     DO J = 1, M
                       A(J, I) = B(I) + C(J)
                     ENDDO
                   ENDDO

           loop blocking will transform the loop as if the user had written:

                   DO II = 1, N, 64
                     DO JJ = 1, M, 64
                       DO I = II, min (II + 63, N)
                         DO J = JJ, min (JJ + 63, M)
                           A(J, I) = B(I) + C(J)
                         ENDDO
                       ENDDO
                     ENDDO
                   ENDDO

           which can be beneficial when "M" is larger than the caches, because
           the innermost loop will iterate over a smaller amount of data that
           can be kept in the caches.  This optimization applies to all the
           languages supported by GCC and is not limited to Fortran.  To use
           this code transformation, GCC has to be configured with ----wwiitthh--ppppll
           and ----wwiitthh--cclloooogg to enable the Graphite loop transformation
           infrastructure.

       --ffcchheecckk--ddaattaa--ddeeppss
           Compare the results of several data dependence analyzers.  This
           option is used for debugging the data dependence analyzers.

       --ffttrreeee--lloooopp--ddiissttrriibbuuttiioonn
           Perform loop distribution.  This flag can improve cache performance
           on big loop bodies and allow further loop optimizations, like
           parallelization or vectorization, to take place.  For example, the
           loop

                   DO I = 1, N
                     A(I) = B(I) + C
                     D(I) = E(I) * F
                   ENDDO

           is transformed to

                   DO I = 1, N
                      A(I) = B(I) + C
                   ENDDO
                   DO I = 1, N
                      D(I) = E(I) * F
                   ENDDO

       --ffttrreeee--lloooopp--iimm
           Perform loop invariant motion on trees.  This pass moves only
           invariants that would be hard to handle at RTL level (function
           calls, operations that expand to nontrivial sequences of insns).
           With --ffuunnsswwiittcchh--llooooppss it also moves operands of conditions that are
           invariant out of the loop, so that we can use just trivial
           invariantness analysis in loop unswitching.  The pass also includes
           store motion.

       --ffttrreeee--lloooopp--iivvccaannoonn
           Create a canonical counter for number of iterations in the loop for
           that determining number of iterations requires complicated
           analysis.  Later optimizations then may determine the number
           easily.  Useful especially in connection with unrolling.

       --ffiivvooppttss
           Perform induction variable optimizations (strength reduction,
           induction variable merging and induction variable elimination) on
           trees.

       --ffttrreeee--ppaarraalllleelliizzee--llooooppss==nn
           Parallelize loops, i.e., split their iteration space to run in n
           threads.  This is only possible for loops whose iterations are
           independent and can be arbitrarily reordered.  The optimization is
           only profitable on multiprocessor machines, for loops that are CPU-
           intensive, rather than constrained e.g. by memory bandwidth.  This
           option implies --pptthhrreeaadd, and thus is only supported on targets that
           have support for --pptthhrreeaadd.

       --ffttrreeee--ssrraa
           Perform scalar replacement of aggregates.  This pass replaces
           structure references with scalars to prevent committing structures
           to memory too early.  This flag is enabled by default at --OO and
           higher.

       --ffttrreeee--ccooppyyrreennaammee
           Perform copy renaming on trees.  This pass attempts to rename
           compiler temporaries to other variables at copy locations, usually
           resulting in variable names which more closely resemble the
           original variables.  This flag is enabled by default at --OO and
           higher.

       --ffttrreeee--ccooaalleessccee--iinnlliinneedd--vvaarrss
           Permit the copyrename pass to subject inlined variables to
           coalescing into other variables.  This may harm debug information
           of such inlined variables, but it will keep variables of the main
           function apart from each other, such that they are more likely to
           contain the expected values in a debugging session.

       --ffttrreeee--ccooaalleessccee--vvaarrss
           Permit the copyrename pass to subject all variables to SSA
           coalescing.  This may severely limit the ability to debug an
           optimized program compiled without --ffvvaarr--ttrraacckkiinngg--aassssiiggnnmmeennttss.  In
           the negated form, this flag prevents SSA coalescing of user
           variables, including inlined ones.

       --ffttrreeee--tteerr
           Perform temporary expression replacement during the SSA->normal
           phase.  Single use/single def temporaries are replaced at their use
           location with their defining expression.  This results in non-
           GIMPLE code, but gives the expanders much more complex trees to
           work on resulting in better RTL generation.  This is enabled by
           default at --OO and higher.

       --ffttrreeee--vveeccttoorriizzee
           Perform loop vectorization on trees. This flag is enabled by
           default at --OO33.

       --ffttrreeee--vveecctt--lloooopp--vveerrssiioonn
           Perform loop versioning when doing loop vectorization on trees.
           When a loop appears to be vectorizable except that data alignment
           or data dependence cannot be determined at compile time then
           vectorized and non-vectorized versions of the loop are generated
           along with runtime checks for alignment or dependence to control
           which version is executed.  This option is enabled by default
           except at level --OOss where it is disabled.

       --ffvveecctt--ccoosstt--mmooddeell
           Enable cost model for vectorization.

       --ffttrreeee--vvrrpp
           Perform Value Range Propagation on trees.  This is similar to the
           constant propagation pass, but instead of values, ranges of values
           are propagated.  This allows the optimizers to remove unnecessary
           range checks like array bound checks and null pointer checks.  This
           is enabled by default at --OO22 and higher.  Null pointer check
           elimination is only done if --ffddeelleettee--nnuullll--ppooiinntteerr--cchheecckkss is
           enabled.

       --ffttrraacceerr
           Perform tail duplication to enlarge superblock size.  This
           transformation simplifies the control flow of the function allowing
           other optimizations to do better job.

       --ffuunnrroollll--llooooppss
           Unroll loops whose number of iterations can be determined at
           compile time or upon entry to the loop.  --ffuunnrroollll--llooooppss implies
           --ffrreerruunn--ccssee--aafftteerr--lloooopp.  This option makes code larger, and may or
           may not make it run faster.

       --ffuunnrroollll--aallll--llooooppss
           Unroll all loops, even if their number of iterations is uncertain
           when the loop is entered.  This usually makes programs run more
           slowly.  --ffuunnrroollll--aallll--llooooppss implies the same options as
           --ffuunnrroollll--llooooppss,

       --ffsspplliitt--iivvss--iinn--uunnrroolllleerr
           Enables expressing of values of induction variables in later
           iterations of the unrolled loop using the value in the first
           iteration.  This breaks long dependency chains, thus improving
           efficiency of the scheduling passes.

           Combination of --ffwweebb and CSE is often sufficient to obtain the same
           effect.  However in cases the loop body is more complicated than a
           single basic block, this is not reliable.  It also does not work at
           all on some of the architectures due to restrictions in the CSE
           pass.

           This optimization is enabled by default.

       --ffvvaarriiaabbllee--eexxppaannssiioonn--iinn--uunnrroolllleerr
           With this option, the compiler will create multiple copies of some
           local variables when unrolling a loop which can result in superior
           code.

       --ffpprreeddiiccttiivvee--ccoommmmoonniinngg
           Perform predictive commoning optimization, i.e., reusing
           computations (especially memory loads and stores) performed in
           previous iterations of loops.

           This option is enabled at level --OO33.

       --ffpprreeffeettcchh--lloooopp--aarrrraayyss
           If supported by the target machine, generate instructions to
           prefetch memory to improve the performance of loops that access
           large arrays.

           This option may generate better or worse code; results are highly
           dependent on the structure of loops within the source code.

           Disabled at level --OOss.

       --ffnnoo--ppeeeepphhoollee
       --ffnnoo--ppeeeepphhoollee22
           Disable any machine-specific peephole optimizations.  The
           difference between --ffnnoo--ppeeeepphhoollee and --ffnnoo--ppeeeepphhoollee22 is in how they
           are implemented in the compiler; some targets use one, some use the
           other, a few use both.

           --ffppeeeepphhoollee is enabled by default.  --ffppeeeepphhoollee22 enabled at levels
           --OO22, --OO33, --OOss.

       --ffnnoo--gguueessss--bbrraanncchh--pprroobbaabbiilliittyy
           Do not guess branch probabilities using heuristics.

           GCC will use heuristics to guess branch probabilities if they are
           not provided by profiling feedback (--ffpprrooffiillee--aarrccss).  These
           heuristics are based on the control flow graph.  If some branch
           probabilities are specified by ____bbuuiillttiinn__eexxppeecctt, then the
           heuristics will be used to guess branch probabilities for the rest
           of the control flow graph, taking the ____bbuuiillttiinn__eexxppeecctt info into
           account.  The interactions between the heuristics and
           ____bbuuiillttiinn__eexxppeecctt can be complex, and in some cases, it may be
           useful to disable the heuristics so that the effects of
           ____bbuuiillttiinn__eexxppeecctt are easier to understand.

           The default is --ffgguueessss--bbrraanncchh--pprroobbaabbiilliittyy at levels --OO, --OO22, --OO33,
           --OOss.

       --ffrreeoorrddeerr--bblloocckkss
           Reorder basic blocks in the compiled function in order to reduce
           number of taken branches and improve code locality.

           Enabled at levels --OO22, --OO33.

       --ffrreeoorrddeerr--bblloocckkss--aanndd--ppaarrttiittiioonn
           In addition to reordering basic blocks in the compiled function, in
           order to reduce number of taken branches, partitions hot and cold
           basic blocks into separate sections of the assembly and .o files,
           to improve paging and cache locality performance.

           This optimization is automatically turned off in the presence of
           exception handling, for linkonce sections, for functions with a
           user-defined section attribute and on any architecture that does
           not support named sections.

       --ffrreeoorrddeerr--ffuunnccttiioonnss
           Reorder functions in the object file in order to improve code
           locality.  This is implemented by using special subsections
           ".text.hot" for most frequently executed functions and
           ".text.unlikely" for unlikely executed functions.  Reordering is
           done by the linker so object file format must support named
           sections and linker must place them in a reasonable way.

           Also profile feedback must be available in to make this option
           effective.  See --ffpprrooffiillee--aarrccss for details.

           Enabled at levels --OO22, --OO33, --OOss.

       --ffssttrriicctt--aalliiaassiinngg
           Allow the compiler to assume the strictest aliasing rules
           applicable to the language being compiled.  For C (and C++), this
           activates optimizations based on the type of expressions.  In
           particular, an object of one type is assumed never to reside at the
           same address as an object of a different type, unless the types are
           almost the same.  For example, an "unsigned int" can alias an
           "int", but not a "void*" or a "double".  A character type may alias
           any other type.

           Pay special attention to code like this:

                   union a_union {
                     int i;
                     double d;
                   };

                   int f() {
                     union a_union t;
                     t.d = 3.0;
                     return t.i;
                   }

           The practice of reading from a different union member than the one
           most recently written to (called "type-punning") is common.  Even
           with --ffssttrriicctt--aalliiaassiinngg, type-punning is allowed, provided the
           memory is accessed through the union type.  So, the code above will
           work as expected.    However, this code might not:

                   int f() {
                     union a_union t;
                     int* ip;
                     t.d = 3.0;
                     ip = &t.i;
                     return *ip;
                   }

           Similarly, access by taking the address, casting the resulting
           pointer and dereferencing the result has undefined behavior, even
           if the cast uses a union type, e.g.:

                   int f() {
                     double d = 3.0;
                     return ((union a_union *) &d)->i;
                   }

           The --ffssttrriicctt--aalliiaassiinngg option is enabled at levels --OO22, --OO33, --OOss.

       --ffssttrriicctt--oovveerrffllooww
           Allow the compiler to assume strict signed overflow rules,
           depending on the language being compiled.  For C (and C++) this
           means that overflow when doing arithmetic with signed numbers is
           undefined, which means that the compiler may assume that it will
           not happen.  This permits various optimizations.  For example, the
           compiler will assume that an expression like "i + 10 > i" will
           always be true for signed "i".  This assumption is only valid if
           signed overflow is undefined, as the expression is false if "i +
           10" overflows when using twos complement arithmetic.  When this
           option is in effect any attempt to determine whether an operation
           on signed numbers will overflow must be written carefully to not
           actually involve overflow.

           This option also allows the compiler to assume strict pointer
           semantics: given a pointer to an object, if adding an offset to
           that pointer does not produce a pointer to the same object, the
           addition is undefined.  This permits the compiler to conclude that
           "p + u > p" is always true for a pointer "p" and unsigned integer
           "u".  This assumption is only valid because pointer wraparound is
           undefined, as the expression is false if "p + u" overflows using
           twos complement arithmetic.

           See also the --ffwwrraappvv option.  Using --ffwwrraappvv means that integer
           signed overflow is fully defined: it wraps.  When --ffwwrraappvv is used,
           there is no difference between --ffssttrriicctt--oovveerrffllooww and
           --ffnnoo--ssttrriicctt--oovveerrffllooww for integers.  With --ffwwrraappvv certain types of
           overflow are permitted.  For example, if the compiler gets an
           overflow when doing arithmetic on constants, the overflowed value
           can still be used with --ffwwrraappvv, but not otherwise.

           The --ffssttrriicctt--oovveerrffllooww option is enabled at levels --OO22, --OO33, --OOss.

       --ffaalliiggnn--ffuunnccttiioonnss
       --ffaalliiggnn--ffuunnccttiioonnss==_n
           Align the start of functions to the next power-of-two greater than
           _n, skipping up to _n bytes.  For instance, --ffaalliiggnn--ffuunnccttiioonnss==3322
           aligns functions to the next 32-byte boundary, but
           --ffaalliiggnn--ffuunnccttiioonnss==2244 would align to the next 32-byte boundary only
           if this can be done by skipping 23 bytes or less.

           --ffnnoo--aalliiggnn--ffuunnccttiioonnss and --ffaalliiggnn--ffuunnccttiioonnss==11 are equivalent and
           mean that functions will not be aligned.

           Some assemblers only support this flag when _n is a power of two; in
           that case, it is rounded up.

           If _n is not specified or is zero, use a machine-dependent default.

           Enabled at levels --OO22, --OO33.

       --ffaalliiggnn--llaabbeellss
       --ffaalliiggnn--llaabbeellss==_n
           Align all branch targets to a power-of-two boundary, skipping up to
           _n bytes like --ffaalliiggnn--ffuunnccttiioonnss.  This option can easily make code
           slower, because it must insert dummy operations for when the branch
           target is reached in the usual flow of the code.

           --ffnnoo--aalliiggnn--llaabbeellss and --ffaalliiggnn--llaabbeellss==11 are equivalent and mean that
           labels will not be aligned.

           If --ffaalliiggnn--llooooppss or --ffaalliiggnn--jjuummppss are applicable and are greater
           than this value, then their values are used instead.

           If _n is not specified or is zero, use a machine-dependent default
           which is very likely to be 11, meaning no alignment.

           Enabled at levels --OO22, --OO33.

       --ffaalliiggnn--llooooppss
       --ffaalliiggnn--llooooppss==_n
           Align loops to a power-of-two boundary, skipping up to _n bytes like
           --ffaalliiggnn--ffuunnccttiioonnss.  The hope is that the loop will be executed many
           times, which will make up for any execution of the dummy
           operations.

           --ffnnoo--aalliiggnn--llooooppss and --ffaalliiggnn--llooooppss==11 are equivalent and mean that
           loops will not be aligned.

           If _n is not specified or is zero, use a machine-dependent default.

           Enabled at levels --OO22, --OO33.

       --ffaalliiggnn--jjuummppss
       --ffaalliiggnn--jjuummppss==_n
           Align branch targets to a power-of-two boundary, for branch targets
           where the targets can only be reached by jumping, skipping up to _n
           bytes like --ffaalliiggnn--ffuunnccttiioonnss.  In this case, no dummy operations
           need be executed.

           --ffnnoo--aalliiggnn--jjuummppss and --ffaalliiggnn--jjuummppss==11 are equivalent and mean that
           loops will not be aligned.

           If _n is not specified or is zero, use a machine-dependent default.

           Enabled at levels --OO22, --OO33.

       --ffuunniitt--aatt--aa--ttiimmee
           This option is left for compatibility reasons. --ffuunniitt--aatt--aa--ttiimmee has
           no effect, while --ffnnoo--uunniitt--aatt--aa--ttiimmee implies --ffnnoo--ttoopplleevveell--rreeoorrddeerr
           and --ffnnoo--sseeccttiioonn--aanncchhoorrss.

           Enabled by default.

       --ffnnoo--ttoopplleevveell--rreeoorrddeerr
           Do not reorder top-level functions, variables, and "asm"
           statements.  Output them in the same order that they appear in the
           input file.  When this option is used, unreferenced static
           variables will not be removed.  This option is intended to support
           existing code which relies on a particular ordering.  For new code,
           it is better to use attributes.

           Enabled at level --OO00.  When disabled explicitly, it also imply
           --ffnnoo--sseeccttiioonn--aanncchhoorrss that is otherwise enabled at --OO00 on some
           targets.

       --ffwweebb
           Constructs webs as commonly used for register allocation purposes
           and assign each web individual pseudo register.  This allows the
           register allocation pass to operate on pseudos directly, but also
           strengthens several other optimization passes, such as CSE, loop
           optimizer and trivial dead code remover.  It can, however, make
           debugging impossible, since variables will no longer stay in a
           "home register".

           Enabled by default with --ffuunnrroollll--llooooppss.

       --ffwwhhoollee--pprrooggrraamm
           Assume that the current compilation unit represents whole program
           being compiled.  All public functions and variables with the
           exception of "main" and those merged by attribute
           "externally_visible" become static functions and in a affect gets
           more aggressively optimized by interprocedural optimizers.  While
           this option is equivalent to proper use of "static" keyword for
           programs consisting of single file, in combination with option
           ----ccoommbbiinnee this flag can be used to compile most of smaller scale C
           programs since the functions and variables become local for the
           whole combined compilation unit, not for the single source file
           itself.

           This option is not supported for Fortran programs.

       --ffccpprroopp--rreeggiisstteerrss
           After register allocation and post-register allocation instruction
           splitting, we perform a copy-propagation pass to try to reduce
           scheduling dependencies and occasionally eliminate the copy.

           Enabled at levels --OO, --OO22, --OO33, --OOss.

       --ffpprrooffiillee--ccoorrrreeccttiioonn
           Profiles collected using an instrumented binary for multi-threaded
           programs may be inconsistent due to missed counter updates. When
           this option is specified, GCC will use heuristics to correct or
           smooth out such inconsistencies. By default, GCC will emit an error
           message when an inconsistent profile is detected.

       --ffpprrooffiillee--ddiirr==_p_a_t_h
           Set the directory to search the profile data files in to _p_a_t_h.
           This option affects only the profile data generated by
           --ffpprrooffiillee--ggeenneerraattee, --fftteesstt--ccoovveerraaggee, --ffpprrooffiillee--aarrccss and used by
           --ffpprrooffiillee--uussee and --ffbbrraanncchh--pprroobbaabbiilliittiieess and its related options.
           By default, GCC will use the current directory as _p_a_t_h thus the
           profile data file will appear in the same directory as the object
           file.

       --ffpprrooffiillee--ggeenneerraattee
       --ffpprrooffiillee--ggeenneerraattee==_p_a_t_h
           Enable options usually used for instrumenting application to
           produce profile useful for later recompilation with profile
           feedback based optimization.  You must use --ffpprrooffiillee--ggeenneerraattee both
           when compiling and when linking your program.

           The following options are enabled: "-fprofile-arcs",
           "-fprofile-values", "-fvpt".

           If _p_a_t_h is specified, GCC will look at the _p_a_t_h to find the profile
           feedback data files. See --ffpprrooffiillee--ddiirr.

       --ffpprrooffiillee--uussee
       --ffpprrooffiillee--uussee==_p_a_t_h
           Enable profile feedback directed optimizations, and optimizations
           generally profitable only with profile feedback available.

           The following options are enabled: "-fbranch-probabilities",
           "-fvpt", "-funroll-loops", "-fpeel-loops", "-ftracer"

           By default, GCC emits an error message if the feedback profiles do
           not match the source code.  This error can be turned into a warning
           by using --WWccoovveerraaggee--mmiissmmaattcchh.  Note this may result in poorly
           optimized code.

           If _p_a_t_h is specified, GCC will look at the _p_a_t_h to find the profile
           feedback data files. See --ffpprrooffiillee--ddiirr.

       The following options control compiler behavior regarding floating
       point arithmetic.  These options trade off between speed and
       correctness.  All must be specifically enabled.

       --ffffllooaatt--ssttoorree
           Do not store floating point variables in registers, and inhibit
           other options that might change whether a floating point value is
           taken from a register or memory.

           This option prevents undesirable excess precision on machines such
           as the 68000 where the floating registers (of the 68881) keep more
           precision than a "double" is supposed to have.  Similarly for the
           x86 architecture.  For most programs, the excess precision does
           only good, but a few programs rely on the precise definition of
           IEEE floating point.  Use --ffffllooaatt--ssttoorree for such programs, after
           modifying them to store all pertinent intermediate computations
           into variables.

       --ffffaasstt--mmaatthh
           Sets --ffnnoo--mmaatthh--eerrrrnnoo, --ffuunnssaaffee--mmaatthh--ooppttiimmiizzaattiioonnss,
           --ffffiinniittee--mmaatthh--oonnllyy, --ffnnoo--rroouunnddiinngg--mmaatthh, --ffnnoo--ssiiggnnaalliinngg--nnaannss and
           --ffccxx--lliimmiitteedd--rraannggee.

           This option causes the preprocessor macro "__FAST_MATH__" to be
           defined.

           This option is not turned on by any --OO option since it can result
           in incorrect output for programs which depend on an exact
           implementation of IEEE or ISO rules/specifications for math
           functions. It may, however, yield faster code for programs that do
           not require the guarantees of these specifications.

       --ffnnoo--mmaatthh--eerrrrnnoo
           Do not set ERRNO after calling math functions that are executed
           with a single instruction, e.g., sqrt.  A program that relies on
           IEEE exceptions for math error handling may want to use this flag
           for speed while maintaining IEEE arithmetic compatibility.

           This option is not turned on by any --OO option since it can result
           in incorrect output for programs which depend on an exact
           implementation of IEEE or ISO rules/specifications for math
           functions. It may, however, yield faster code for programs that do
           not require the guarantees of these specifications.

           The default is --ffmmaatthh--eerrrrnnoo.

           On Darwin systems, the math library never sets "errno".  There is
           therefore no reason for the compiler to consider the possibility
           that it might, and --ffnnoo--mmaatthh--eerrrrnnoo is the default.

       --ffuunnssaaffee--mmaatthh--ooppttiimmiizzaattiioonnss
           Allow optimizations for floating-point arithmetic that (a) assume
           that arguments and results are valid and (b) may violate IEEE or
           ANSI standards.  When used at link-time, it may include libraries
           or startup files that change the default FPU control word or other
           similar optimizations.

           This option is not turned on by any --OO option since it can result
           in incorrect output for programs which depend on an exact
           implementation of IEEE or ISO rules/specifications for math
           functions. It may, however, yield faster code for programs that do
           not require the guarantees of these specifications.  Enables
           --ffnnoo--ssiiggnneedd--zzeerrooss, --ffnnoo--ttrraappppiinngg--mmaatthh, --ffaassssoocciiaattiivvee--mmaatthh and
           --ffrreecciipprrooccaall--mmaatthh.

           The default is --ffnnoo--uunnssaaffee--mmaatthh--ooppttiimmiizzaattiioonnss.

       --ffaassssoocciiaattiivvee--mmaatthh
           Allow re-association of operands in series of floating-point
           operations.  This violates the ISO C and C++ language standard by
           possibly changing computation result.  NOTE: re-ordering may change
           the sign of zero as well as ignore NaNs and inhibit or create
           underflow or overflow (and thus cannot be used on a code which
           relies on rounding behavior like "(x + 2**52) - 2**52)".  May also
           reorder floating-point comparisons and thus may not be used when
           ordered comparisons are required.  This option requires that both
           --ffnnoo--ssiiggnneedd--zzeerrooss and --ffnnoo--ttrraappppiinngg--mmaatthh be in effect.  Moreover,
           it doesnâ€™t make much sense with --ffrroouunnddiinngg--mmaatthh.

           The default is --ffnnoo--aassssoocciiaattiivvee--mmaatthh.

       --ffrreecciipprrooccaall--mmaatthh
           Allow the reciprocal of a value to be used instead of dividing by
           the value if this enables optimizations.  For example "x / y" can
           be replaced with "x * (1/y)" which is useful if "(1/y)" is subject
           to common subexpression elimination.  Note that this loses
           precision and increases the number of flops operating on the value.

           The default is --ffnnoo--rreecciipprrooccaall--mmaatthh.

       --ffffiinniittee--mmaatthh--oonnllyy
           Allow optimizations for floating-point arithmetic that assume that
           arguments and results are not NaNs or +-Infs.

           This option is not turned on by any --OO option since it can result
           in incorrect output for programs which depend on an exact
           implementation of IEEE or ISO rules/specifications for math
           functions. It may, however, yield faster code for programs that do
           not require the guarantees of these specifications.

           The default is --ffnnoo--ffiinniittee--mmaatthh--oonnllyy.

       --ffnnoo--ssiiggnneedd--zzeerrooss
           Allow optimizations for floating point arithmetic that ignore the
           signedness of zero.  IEEE arithmetic specifies the behavior of
           distinct +0.0 and -0.0 values, which then prohibits simplification
           of expressions such as x+0.0 or 0.0*x (even with
           --ffffiinniittee--mmaatthh--oonnllyy).  This option implies that the sign of a zero
           result isnâ€™t significant.

           The default is --ffssiiggnneedd--zzeerrooss.

       --ffnnoo--ttrraappppiinngg--mmaatthh
           Compile code assuming that floating-point operations cannot
           generate user-visible traps.  These traps include division by zero,
           overflow, underflow, inexact result and invalid operation.  This
           option requires that --ffnnoo--ssiiggnnaalliinngg--nnaannss be in effect.  Setting
           this option may allow faster code if one relies on "non-stop" IEEE
           arithmetic, for example.

           This option should never be turned on by any --OO option since it can
           result in incorrect output for programs which depend on an exact
           implementation of IEEE or ISO rules/specifications for math
           functions.

           The default is --ffttrraappppiinngg--mmaatthh.

       --ffrroouunnddiinngg--mmaatthh
           Disable transformations and optimizations that assume default
           floating point rounding behavior.  This is round-to-zero for all
           floating point to integer conversions, and round-to-nearest for all
           other arithmetic truncations.  This option should be specified for
           programs that change the FP rounding mode dynamically, or that may
           be executed with a non-default rounding mode.  This option disables
           constant folding of floating point expressions at compile-time
           (which may be affected by rounding mode) and arithmetic
           transformations that are unsafe in the presence of sign-dependent
           rounding modes.

           The default is --ffnnoo--rroouunnddiinngg--mmaatthh.

           This option is experimental and does not currently guarantee to
           disable all GCC optimizations that are affected by rounding mode.
           Future versions of GCC may provide finer control of this setting
           using C99â€™s "FENV_ACCESS" pragma.  This command line option will be
           used to specify the default state for "FENV_ACCESS".

       --ffrrttll--aabbssttrraacctt--sseeqquueenncceess
           It is a size optimization method. This option is to find identical
           sequences of code, which can be turned into pseudo-procedures  and
           then  replace  all  occurrences with  calls to  the  newly created
           subroutine. It is kind of an opposite of --ffiinnlliinnee--ffuunnccttiioonnss.  This
           optimization runs at RTL level.

       --ffssiiggnnaalliinngg--nnaannss
           Compile code assuming that IEEE signaling NaNs may generate user-
           visible traps during floating-point operations.  Setting this
           option disables optimizations that may change the number of
           exceptions visible with signaling NaNs.  This option implies
           --ffttrraappppiinngg--mmaatthh.

           This option causes the preprocessor macro "__SUPPORT_SNAN__" to be
           defined.

           The default is --ffnnoo--ssiiggnnaalliinngg--nnaannss.

           This option is experimental and does not currently guarantee to
           disable all GCC optimizations that affect signaling NaN behavior.

       --ffssiinnggllee--pprreecciissiioonn--ccoonnssttaanntt
           Treat floating point constant as single precision constant instead
           of implicitly converting it to double precision constant.

       --ffccxx--lliimmiitteedd--rraannggee
           When enabled, this option states that a range reduction step is not
           needed when performing complex division.  Also, there is no
           checking whether the result of a complex multiplication or division
           is "NaN + I*NaN", with an attempt to rescue the situation in that
           case.  The default is --ffnnoo--ccxx--lliimmiitteedd--rraannggee, but is enabled by
           --ffffaasstt--mmaatthh.

           This option controls the default setting of the ISO C99
           "CX_LIMITED_RANGE" pragma.  Nevertheless, the option applies to all
           languages.

       --ffccxx--ffoorrttrraann--rruulleess
           Complex multiplication and division follow Fortran rules.  Range
           reduction is done as part of complex division, but there is no
           checking whether the result of a complex multiplication or division
           is "NaN + I*NaN", with an attempt to rescue the situation in that
           case.

           The default is --ffnnoo--ccxx--ffoorrttrraann--rruulleess.

       The following options control optimizations that may improve
       performance, but are not enabled by any --OO options.  This section
       includes experimental options that may produce broken code.

       --ffbbrraanncchh--pprroobbaabbiilliittiieess
           After running a program compiled with --ffpprrooffiillee--aarrccss, you can
           compile it a second time using --ffbbrraanncchh--pprroobbaabbiilliittiieess, to improve
           optimizations based on the number of times each branch was taken.
           When the program compiled with --ffpprrooffiillee--aarrccss exits it saves arc
           execution counts to a file called _s_o_u_r_c_e_n_a_m_e_._g_c_d_a for each source
           file.  The information in this data file is very dependent on the
           structure of the generated code, so you must use the same source
           code and the same optimization options for both compilations.

           With --ffbbrraanncchh--pprroobbaabbiilliittiieess, GCC puts a RREEGG__BBRR__PPRROOBB note on each
           JJUUMMPP__IINNSSNN and CCAALLLL__IINNSSNN.  These can be used to improve
           optimization.  Currently, they are only used in one place: in
           _r_e_o_r_g_._c, instead of guessing which path a branch is mostly to take,
           the RREEGG__BBRR__PPRROOBB values are used to exactly determine which path is
           taken more often.

       --ffpprrooffiillee--vvaalluueess
           If combined with --ffpprrooffiillee--aarrccss, it adds code so that some data
           about values of expressions in the program is gathered.

           With --ffbbrraanncchh--pprroobbaabbiilliittiieess, it reads back the data gathered from
           profiling values of expressions and adds RREEGG__VVAALLUUEE__PPRROOFFIILLEE notes to
           instructions for their later usage in optimizations.

           Enabled with --ffpprrooffiillee--ggeenneerraattee and --ffpprrooffiillee--uussee.

       --ffvvpptt
           If combined with --ffpprrooffiillee--aarrccss, it instructs the compiler to add a
           code to gather information about values of expressions.

           With --ffbbrraanncchh--pprroobbaabbiilliittiieess, it reads back the data gathered and
           actually performs the optimizations based on them.  Currently the
           optimizations include specialization of division operation using
           the knowledge about the value of the denominator.

       --ffrreennaammee--rreeggiisstteerrss
           Attempt to avoid false dependencies in scheduled code by making use
           of registers left over after register allocation.  This
           optimization will most benefit processors with lots of registers.
           Depending on the debug information format adopted by the target,
           however, it can make debugging impossible, since variables will no
           longer stay in a "home register".

           Enabled by default with --ffuunnrroollll--llooooppss.

       --ffttrraacceerr
           Perform tail duplication to enlarge superblock size.  This
           transformation simplifies the control flow of the function allowing
           other optimizations to do better job.

           Enabled with --ffpprrooffiillee--uussee.

       --ffuunnrroollll--llooooppss
           Unroll loops whose number of iterations can be determined at
           compile time or upon entry to the loop.  --ffuunnrroollll--llooooppss implies
           --ffrreerruunn--ccssee--aafftteerr--lloooopp, --ffwweebb and --ffrreennaammee--rreeggiisstteerrss.  It also
           turns on complete loop peeling (i.e. complete removal of loops with
           small constant number of iterations).  This option makes code
           larger, and may or may not make it run faster.

           Enabled with --ffpprrooffiillee--uussee.

       --ffuunnrroollll--aallll--llooooppss
           Unroll all loops, even if their number of iterations is uncertain
           when the loop is entered.  This usually makes programs run more
           slowly.  --ffuunnrroollll--aallll--llooooppss implies the same options as
           --ffuunnrroollll--llooooppss.

       --ffppeeeell--llooooppss
           Peels the loops for that there is enough information that they do
           not roll much (from profile feedback).  It also turns on complete
           loop peeling (i.e. complete removal of loops with small constant
           number of iterations).

           Enabled with --ffpprrooffiillee--uussee.

       --ffmmoovvee--lloooopp--iinnvvaarriiaannttss
           Enables the loop invariant motion pass in the RTL loop optimizer.
           Enabled at level --OO11

       --ffuunnsswwiittcchh--llooooppss
           Move branches with loop invariant conditions out of the loop, with
           duplicates of the loop on both branches (modified according to
           result of the condition).

       --ffffuunnccttiioonn--sseeccttiioonnss
       --ffddaattaa--sseeccttiioonnss
           Place each function or data item into its own section in the output
           file if the target supports arbitrary sections.  The name of the
           function or the name of the data item determines the sectionâ€™s name
           in the output file.

           Use these options on systems where the linker can perform
           optimizations to improve locality of reference in the instruction
           space.  Most systems using the ELF object format and SPARC
           processors running Solaris 2 have linkers with such optimizations.
           AIX may have these optimizations in the future.

           Only use these options when there are significant benefits from
           doing so.  When you specify these options, the assembler and linker
           will create larger object and executable files and will also be
           slower.  You will not be able to use "gprof" on all systems if you
           specify this option and you may have problems with debugging if you
           specify both this option and --gg.

       --ffbbrraanncchh--ttaarrggeett--llooaadd--ooppttiimmiizzee
           Perform branch target register load optimization before prologue /
           epilogue threading.  The use of target registers can typically be
           exposed only during reload, thus hoisting loads out of loops and
           doing inter-block scheduling needs a separate optimization pass.

       --ffbbrraanncchh--ttaarrggeett--llooaadd--ooppttiimmiizzee22
           Perform branch target register load optimization after prologue /
           epilogue threading.

       --ffbbttrr--bbbb--eexxcclluussiivvee
           When performing branch target register load optimization, donâ€™t
           reuse branch target registers in within any basic block.

       --ffssttaacckk--pprrootteeccttoorr
           Emit extra code to check for buffer overflows, such as stack
           smashing attacks.  This is done by adding a guard variable to
           functions with vulnerable objects.  This includes functions that
           call alloca, and functions with buffers larger than 8 bytes.  The
           guards are initialized when a function is entered and then checked
           when the function exits.  If a guard check fails, an error message
           is printed and the program exits.

       --ffssttaacckk--pprrootteeccttoorr--aallll
           Like --ffssttaacckk--pprrootteeccttoorr except that all functions are protected.

       --ffsseeccttiioonn--aanncchhoorrss
           Try to reduce the number of symbolic address calculations by using
           shared "anchor" symbols to address nearby objects.  This
           transformation can help to reduce the number of GOT entries and GOT
           accesses on some targets.

           For example, the implementation of the following function "foo":

                   static int a, b, c;
                   int foo (void) { return a + b + c; }

           would usually calculate the addresses of all three variables, but
           if you compile it with --ffsseeccttiioonn--aanncchhoorrss, it will access the
           variables from a common anchor point instead.  The effect is
           similar to the following pseudocode (which isnâ€™t valid C):

                   int foo (void)
                   {
                     register int *xr = &x;
                     return xr[&a - &x] + xr[&b - &x] + xr[&c - &x];
                   }

           Not all targets support this option.

       ----ppaarraamm _n_a_m_e==_v_a_l_u_e
           In some places, GCC uses various constants to control the amount of
           optimization that is done.  For example, GCC will not inline
           functions that contain more that a certain number of instructions.
           You can control some of these constants on the command-line using
           the ----ppaarraamm option.

           The names of specific parameters, and the meaning of the values,
           are tied to the internals of the compiler, and are subject to
           change without notice in future releases.

           In each case, the _v_a_l_u_e is an integer.  The allowable choices for
           _n_a_m_e are given in the following table:

           ssrraa--mmaaxx--ssttrruuccttuurree--ssiizzee
               The maximum structure size, in bytes, at which the scalar
               replacement of aggregates (SRA) optimization will perform block
               copies.  The default value, 0, implies that GCC will select the
               most appropriate size itself.

           ssrraa--ffiieelldd--ssttrruuccttuurree--rraattiioo
               The threshold ratio (as a percentage) between instantiated
               fields and the complete structure size.  We say that if the
               ratio of the number of bytes in instantiated fields to the
               number of bytes in the complete structure exceeds this
               parameter, then block copies are not used.  The default is 75.

           ssttrruucctt--rreeoorrgg--ccoolldd--ssttrruucctt--rraattiioo
               The threshold ratio (as a percentage) between a structure
               frequency and the frequency of the hottest structure in the
               program.  This parameter is used by struct-reorg optimization
               enabled by --ffiippaa--ssttrruucctt--rreeoorrgg.  We say that if the ratio of a
               structure frequency, calculated by profiling, to the hottest
               structure frequency in the program is less than this parameter,
               then structure reorganization is not applied to this structure.
               The default is 10.

           pprreeddiiccttaabbllee--bbrraanncchh--ccoosstt--oouuttccoommee
               When branch is predicted to be taken with probability lower
               than this threshold (in percent), then it is considered well
               predictable. The default is 10.

           mmaaxx--ccrroossssjjuummpp--eeddggeess
               The maximum number of incoming edges to consider for
               crossjumping.  The algorithm used by --ffccrroossssjjuummppiinngg is O(N^2)
               in the number of edges incoming to each block.  Increasing
               values mean more aggressive optimization, making the compile
               time increase with probably small improvement in executable
               size.

           mmiinn--ccrroossssjjuummpp--iinnssnnss
               The minimum number of instructions which must be matched at the
               end of two blocks before crossjumping will be performed on
               them.  This value is ignored in the case where all instructions
               in the block being crossjumped from are matched.  The default
               value is 5.

           mmaaxx--ggrrooww--ccooppyy--bbbb--iinnssnnss
               The maximum code size expansion factor when copying basic
               blocks instead of jumping.  The expansion is relative to a jump
               instruction.  The default value is 8.

           mmaaxx--ggoottoo--dduupplliiccaattiioonn--iinnssnnss
               The maximum number of instructions to duplicate to a block that
               jumps to a computed goto.  To avoid O(N^2) behavior in a number
               of passes, GCC factors computed gotos early in the compilation
               process, and unfactors them as late as possible.  Only computed
               jumps at the end of a basic blocks with no more than max-goto-
               duplication-insns are unfactored.  The default value is 8.

           mmaaxx--ddeellaayy--sslloott--iinnssnn--sseeaarrcchh
               The maximum number of instructions to consider when looking for
               an instruction to fill a delay slot.  If more than this
               arbitrary number of instructions is searched, the time savings
               from filling the delay slot will be minimal so stop searching.
               Increasing values mean more aggressive optimization, making the
               compile time increase with probably small improvement in
               executable run time.

           mmaaxx--ddeellaayy--sslloott--lliivvee--sseeaarrcchh
               When trying to fill delay slots, the maximum number of
               instructions to consider when searching for a block with valid
               live register information.  Increasing this arbitrarily chosen
               value means more aggressive optimization, increasing the
               compile time.  This parameter should be removed when the delay
               slot code is rewritten to maintain the control-flow graph.

           mmaaxx--ggccssee--mmeemmoorryy
               The approximate maximum amount of memory that will be allocated
               in order to perform the global common subexpression elimination
               optimization.  If more memory than specified is required, the
               optimization will not be done.

           mmaaxx--ggccssee--ppaasssseess
               The maximum number of passes of GCSE to run.  The default is 1.

           mmaaxx--ppeennddiinngg--lliisstt--lleennggtthh
               The maximum number of pending dependencies scheduling will
               allow before flushing the current state and starting over.
               Large functions with few branches or calls can create
               excessively large lists which needlessly consume memory and
               resources.

           mmaaxx--iinnlliinnee--iinnssnnss--ssiinnggllee
               Several parameters control the tree inliner used in gcc.  This
               number sets the maximum number of instructions (counted in
               GCCâ€™s internal representation) in a single function that the
               tree inliner will consider for inlining.  This only affects
               functions declared inline and methods implemented in a class
               declaration (C++).  The default value is 450.

           mmaaxx--iinnlliinnee--iinnssnnss--aauuttoo
               When you use --ffiinnlliinnee--ffuunnccttiioonnss (included in --OO33), a lot of
               functions that would otherwise not be considered for inlining
               by the compiler will be investigated.  To those functions, a
               different (more restrictive) limit compared to functions
               declared inline can be applied.  The default value is 90.

           llaarrggee--ffuunnccttiioonn--iinnssnnss
               The limit specifying really large functions.  For functions
               larger than this limit after inlining, inlining is constrained
               by ----ppaarraamm llaarrggee--ffuunnccttiioonn--ggrroowwtthh.  This parameter is useful
               primarily to avoid extreme compilation time caused by non-
               linear algorithms used by the backend.  The default value is
               2700.

           llaarrggee--ffuunnccttiioonn--ggrroowwtthh
               Specifies maximal growth of large function caused by inlining
               in percents.  The default value is 100 which limits large
               function growth to 2.0 times the original size.

           llaarrggee--uunniitt--iinnssnnss
               The limit specifying large translation unit.  Growth caused by
               inlining of units larger than this limit is limited by ----ppaarraamm
               iinnlliinnee--uunniitt--ggrroowwtthh.  For small units this might be too tight
               (consider unit consisting of function A that is inline and B
               that just calls A three time.  If B is small relative to A, the
               growth of unit is 300\% and yet such inlining is very sane.
               For very large units consisting of small inlineable functions
               however the overall unit growth limit is needed to avoid
               exponential explosion of code size.  Thus for smaller units,
               the size is increased to ----ppaarraamm llaarrggee--uunniitt--iinnssnnss before
               applying ----ppaarraamm iinnlliinnee--uunniitt--ggrroowwtthh.  The default is 10000

           iinnlliinnee--uunniitt--ggrroowwtthh
               Specifies maximal overall growth of the compilation unit caused
               by inlining.  The default value is 30 which limits unit growth
               to 1.3 times the original size.

           iippccpp--uunniitt--ggrroowwtthh
               Specifies maximal overall growth of the compilation unit caused
               by interprocedural constant propagation.  The default value is
               10 which limits unit growth to 1.1 times the original size.

           llaarrggee--ssttaacckk--ffrraammee
               The limit specifying large stack frames.  While inlining the
               algorithm is trying to not grow past this limit too much.
               Default value is 256 bytes.

           llaarrggee--ssttaacckk--ffrraammee--ggrroowwtthh
               Specifies maximal growth of large stack frames caused by
               inlining in percents.  The default value is 1000 which limits
               large stack frame growth to 11 times the original size.

           mmaaxx--iinnlliinnee--iinnssnnss--rreeccuurrssiivvee
           mmaaxx--iinnlliinnee--iinnssnnss--rreeccuurrssiivvee--aauuttoo
               Specifies maximum number of instructions out-of-line copy of
               self recursive inline function can grow into by performing
               recursive inlining.

               For functions declared inline ----ppaarraamm mmaaxx--iinnlliinnee--iinnssnnss--
               rreeccuurrssiivvee is taken into account.  For function not declared
               inline, recursive inlining happens only when --ffiinnlliinnee--ffuunnccttiioonnss
               (included in --OO33) is enabled and ----ppaarraamm mmaaxx--iinnlliinnee--iinnssnnss--
               rreeccuurrssiivvee--aauuttoo is used.  The default value is 450.

           mmaaxx--iinnlliinnee--rreeccuurrssiivvee--ddeepptthh
           mmaaxx--iinnlliinnee--rreeccuurrssiivvee--ddeepptthh--aauuttoo
               Specifies maximum recursion depth used by the recursive
               inlining.

               For functions declared inline ----ppaarraamm mmaaxx--iinnlliinnee--rreeccuurrssiivvee--
               ddeepptthh is taken into account.  For function not declared inline,
               recursive inlining happens only when --ffiinnlliinnee--ffuunnccttiioonnss
               (included in --OO33) is enabled and ----ppaarraamm mmaaxx--iinnlliinnee--rreeccuurrssiivvee--
               ddeepptthh--aauuttoo is used.  The default value is 8.

           mmiinn--iinnlliinnee--rreeccuurrssiivvee--pprroobbaabbiilliittyy
               Recursive inlining is profitable only for function having deep
               recursion in average and can hurt for function having little
               recursion depth by increasing the prologue size or complexity
               of function body to other optimizers.

               When profile feedback is available (see --ffpprrooffiillee--ggeenneerraattee) the
               actual recursion depth can be guessed from probability that
               function will recurse via given call expression.  This
               parameter limits inlining only to call expression whose
               probability exceeds given threshold (in percents).  The default
               value is 10.

           iinnlliinnee--ccaallll--ccoosstt
               Specify cost of call instruction relative to simple arithmetics
               operations (having cost of 1).  Increasing this cost
               disqualifies inlining of non-leaf functions and at the same
               time increases size of leaf function that is believed to reduce
               function size by being inlined.  In effect it increases amount
               of inlining for code having large abstraction penalty (many
               functions that just pass the arguments to other functions) and
               decrease inlining for code with low abstraction penalty.  The
               default value is 12.

           mmiinn--vveecctt--lloooopp--bboouunndd
               The minimum number of iterations under which a loop will not
               get vectorized when --ffttrreeee--vveeccttoorriizzee is used.  The number of
               iterations after vectorization needs to be greater than the
               value specified by this option to allow vectorization.  The
               default value is 0.

           mmaaxx--uunnrroolllleedd--iinnssnnss
               The maximum number of instructions that a loop should have if
               that loop is unrolled, and if the loop is unrolled, it
               determines how many times the loop code is unrolled.

           mmaaxx--aavveerraaggee--uunnrroolllleedd--iinnssnnss
               The maximum number of instructions biased by probabilities of
               their execution that a loop should have if that loop is
               unrolled, and if the loop is unrolled, it determines how many
               times the loop code is unrolled.

           mmaaxx--uunnrroollll--ttiimmeess
               The maximum number of unrollings of a single loop.

           mmaaxx--ppeeeelleedd--iinnssnnss
               The maximum number of instructions that a loop should have if
               that loop is peeled, and if the loop is peeled, it determines
               how many times the loop code is peeled.

           mmaaxx--ppeeeell--ttiimmeess
               The maximum number of peelings of a single loop.

           mmaaxx--ccoommpplleetteellyy--ppeeeelleedd--iinnssnnss
               The maximum number of insns of a completely peeled loop.

           mmaaxx--ccoommpplleetteellyy--ppeeeell--ttiimmeess
               The maximum number of iterations of a loop to be suitable for
               complete peeling.

           mmaaxx--ccoommpplleetteellyy--ppeeeell--lloooopp--nneesstt--ddeepptthh
               The maximum depth of a loop nest suitable for complete peeling.

           mmaaxx--uunnsswwiittcchh--iinnssnnss
               The maximum number of insns of an unswitched loop.

           mmaaxx--uunnsswwiittcchh--lleevveell
               The maximum number of branches unswitched in a single loop.

           lliimm--eexxppeennssiivvee
               The minimum cost of an expensive expression in the loop
               invariant motion.

           iivv--ccoonnssiiddeerr--aallll--ccaannddiiddaatteess--bboouunndd
               Bound on number of candidates for induction variables below
               that all candidates are considered for each use in induction
               variable optimizations.  Only the most relevant candidates are
               considered if there are more candidates, to avoid quadratic
               time complexity.

           iivv--mmaaxx--ccoonnssiiddeerreedd--uusseess
               The induction variable optimizations give up on loops that
               contain more induction variable uses.

           iivv--aallwwaayyss--pprruunnee--ccaanndd--sseett--bboouunndd
               If number of candidates in the set is smaller than this value,
               we always try to remove unnecessary ivs from the set during its
               optimization when a new iv is added to the set.

           sscceevv--mmaaxx--eexxpprr--ssiizzee
               Bound on size of expressions used in the scalar evolutions
               analyzer.  Large expressions slow the analyzer.

           oommeeggaa--mmaaxx--vvaarrss
               The maximum number of variables in an Omega constraint system.
               The default value is 128.

           oommeeggaa--mmaaxx--ggeeqqss
               The maximum number of inequalities in an Omega constraint
               system.  The default value is 256.

           oommeeggaa--mmaaxx--eeqqss
               The maximum number of equalities in an Omega constraint system.
               The default value is 128.

           oommeeggaa--mmaaxx--wwiilldd--ccaarrddss
               The maximum number of wildcard variables that the Omega solver
               will be able to insert.  The default value is 18.

           oommeeggaa--hhaasshh--ttaabbllee--ssiizzee
               The size of the hash table in the Omega solver.  The default
               value is 550.

           oommeeggaa--mmaaxx--kkeeyyss
               The maximal number of keys used by the Omega solver.  The
               default value is 500.

           oommeeggaa--eelliimmiinnaattee--rreedduunnddaanntt--ccoonnssttrraaiinnttss
               When set to 1, use expensive methods to eliminate all redundant
               constraints.  The default value is 0.

           vveecctt--mmaaxx--vveerrssiioonn--ffoorr--aalliiggnnmmeenntt--cchheecckkss
               The maximum number of runtime checks that can be performed when
               doing loop versioning for alignment in the vectorizer.  See
               option ftree-vect-loop-version for more information.

           vveecctt--mmaaxx--vveerrssiioonn--ffoorr--aalliiaass--cchheecckkss
               The maximum number of runtime checks that can be performed when
               doing loop versioning for alias in the vectorizer.  See option
               ftree-vect-loop-version for more information.

           mmaaxx--iitteerraattiioonnss--ttoo--ttrraacckk
               The maximum number of iterations of a loop the brute force
               algorithm for analysis of # of iterations of the loop tries to
               evaluate.

           hhoott--bbbb--ccoouunntt--ffrraaccttiioonn
               Select fraction of the maximal count of repetitions of basic
               block in program given basic block needs to have to be
               considered hot.

           hhoott--bbbb--ffrreeqquueennccyy--ffrraaccttiioonn
               Select fraction of the maximal frequency of executions of basic
               block in function given basic block needs to have to be
               considered hot

           mmaaxx--pprreeddiicctteedd--iitteerraattiioonnss
               The maximum number of loop iterations we predict statically.
               This is useful in cases where function contain single loop with
               known bound and other loop with unknown.  We predict the known
               number of iterations correctly, while the unknown number of
               iterations average to roughly 10.  This means that the loop
               without bounds would appear artificially cold relative to the
               other one.

           aalliiggnn--tthhrreesshhoolldd
               Select fraction of the maximal frequency of executions of basic
               block in function given basic block will get aligned.

           aalliiggnn--lloooopp--iitteerraattiioonnss
               A loop expected to iterate at lest the selected number of
               iterations will get aligned.

           ttrraacceerr--ddyynnaammiicc--ccoovveerraaggee
           ttrraacceerr--ddyynnaammiicc--ccoovveerraaggee--ffeeeeddbbaacckk
               This value is used to limit superblock formation once the given
               percentage of executed instructions is covered.  This limits
               unnecessary code size expansion.

               The ttrraacceerr--ddyynnaammiicc--ccoovveerraaggee--ffeeeeddbbaacckk is used only when profile
               feedback is available.  The real profiles (as opposed to
               statically estimated ones) are much less balanced allowing the
               threshold to be larger value.

           ttrraacceerr--mmaaxx--ccooddee--ggrroowwtthh
               Stop tail duplication once code growth has reached given
               percentage.  This is rather hokey argument, as most of the
               duplicates will be eliminated later in cross jumping, so it may
               be set to much higher values than is the desired code growth.

           ttrraacceerr--mmiinn--bbrraanncchh--rraattiioo
               Stop reverse growth when the reverse probability of best edge
               is less than this threshold (in percent).

           ttrraacceerr--mmiinn--bbrraanncchh--rraattiioo
           ttrraacceerr--mmiinn--bbrraanncchh--rraattiioo--ffeeeeddbbaacckk
               Stop forward growth if the best edge do have probability lower
               than this threshold.

               Similarly to ttrraacceerr--ddyynnaammiicc--ccoovveerraaggee two values are present,
               one for compilation for profile feedback and one for
               compilation without.  The value for compilation with profile
               feedback needs to be more conservative (higher) in order to
               make tracer effective.

           mmaaxx--ccssee--ppaatthh--lleennggtthh
               Maximum number of basic blocks on path that cse considers.  The
               default is 10.

           mmaaxx--ccssee--iinnssnnss
               The maximum instructions CSE process before flushing. The
               default is 1000.

           mmaaxx--aalliiaasseedd--vvooppss
               Maximum number of virtual operands per function allowed to
               represent aliases before triggering the alias partitioning
               heuristic.  Alias partitioning reduces compile times and memory
               consumption needed for aliasing at the expense of precision
               loss in alias information.  The default value for this
               parameter is 100 for -O1, 500 for -O2 and 1000 for -O3.

               Notice that if a function contains more memory statements than
               the value of this parameter, it is not really possible to
               achieve this reduction.  In this case, the compiler will use
               the number of memory statements as the value for mmaaxx--aalliiaasseedd--
               vvooppss.

           aavvgg--aalliiaasseedd--vvooppss
               Average number of virtual operands per statement allowed to
               represent aliases before triggering the alias partitioning
               heuristic.  This works in conjunction with mmaaxx--aalliiaasseedd--vvooppss.
               If a function contains more than mmaaxx--aalliiaasseedd--vvooppss virtual
               operators, then memory symbols will be grouped into memory
               partitions until either the total number of virtual operators
               is below mmaaxx--aalliiaasseedd--vvooppss or the average number of virtual
               operators per memory statement is below aavvgg--aalliiaasseedd--vvooppss.  The
               default value for this parameter is 1 for -O1 and -O2, and 3
               for -O3.

           ggggcc--mmiinn--eexxppaanndd
               GCC uses a garbage collector to manage its own memory
               allocation.  This parameter specifies the minimum percentage by
               which the garbage collectorâ€™s heap should be allowed to expand
               between collections.  Tuning this may improve compilation
               speed; it has no effect on code generation.

               The default is 30% + 70% * (RAM/1GB) with an upper bound of
               100% when RAM >= 1GB.  If "getrlimit" is available, the notion
               of "RAM" is the smallest of actual RAM and "RLIMIT_DATA" or
               "RLIMIT_AS".  If GCC is not able to calculate RAM on a
               particular platform, the lower bound of 30% is used.  Setting
               this parameter and ggggcc--mmiinn--hheeaappssiizzee to zero causes a full
               collection to occur at every opportunity.  This is extremely
               slow, but can be useful for debugging.

           ggggcc--mmiinn--hheeaappssiizzee
               Minimum size of the garbage collectorâ€™s heap before it begins
               bothering to collect garbage.  The first collection occurs
               after the heap expands by ggggcc--mmiinn--eexxppaanndd% beyond ggggcc--mmiinn--
               hheeaappssiizzee.  Again, tuning this may improve compilation speed,
               and has no effect on code generation.

               The default is the smaller of RAM/8, RLIMIT_RSS, or a limit
               which tries to ensure that RLIMIT_DATA or RLIMIT_AS are not
               exceeded, but with a lower bound of 4096 (four megabytes) and
               an upper bound of 131072 (128 megabytes).  If GCC is not able
               to calculate RAM on a particular platform, the lower bound is
               used.  Setting this parameter very large effectively disables
               garbage collection.  Setting this parameter and ggggcc--mmiinn--eexxppaanndd
               to zero causes a full collection to occur at every opportunity.

           mmaaxx--rreellooaadd--sseeaarrcchh--iinnssnnss
               The maximum number of instruction reload should look backward
               for equivalent register.  Increasing values mean more
               aggressive optimization, making the compile time increase with
               probably slightly better performance.  The default value is
               100.

           mmaaxx--ccsseelliibb--mmeemmoorryy--llooccaattiioonnss
               The maximum number of memory locations cselib should take into
               account.  Increasing values mean more aggressive optimization,
               making the compile time increase with probably slightly better
               performance.  The default value is 500.

           rreeoorrddeerr--bblloocckkss--dduupplliiccaattee
           rreeoorrddeerr--bblloocckkss--dduupplliiccaattee--ffeeeeddbbaacckk
               Used by basic block reordering pass to decide whether to use
               unconditional branch or duplicate the code on its destination.
               Code is duplicated when its estimated size is smaller than this
               value multiplied by the estimated size of unconditional jump in
               the hot spots of the program.

               The rreeoorrddeerr--bblloocckk--dduupplliiccaattee--ffeeeeddbbaacckk is used only when profile
               feedback is available and may be set to higher values than
               rreeoorrddeerr--bblloocckk--dduupplliiccaattee since information about the hot spots
               is more accurate.

           mmaaxx--sscchheedd--rreeaaddyy--iinnssnnss
               The maximum number of instructions ready to be issued the
               scheduler should consider at any given time during the first
               scheduling pass.  Increasing values mean more thorough
               searches, making the compilation time increase with probably
               little benefit.  The default value is 100.

           mmaaxx--sscchheedd--rreeggiioonn--bblloocckkss
               The maximum number of blocks in a region to be considered for
               interblock scheduling.  The default value is 10.

           mmaaxx--ppiippeelliinnee--rreeggiioonn--bblloocckkss
               The maximum number of blocks in a region to be considered for
               pipelining in the selective scheduler.  The default value is
               15.

           mmaaxx--sscchheedd--rreeggiioonn--iinnssnnss
               The maximum number of insns in a region to be considered for
               interblock scheduling.  The default value is 100.

           mmaaxx--ppiippeelliinnee--rreeggiioonn--iinnssnnss
               The maximum number of insns in a region to be considered for
               pipelining in the selective scheduler.  The default value is
               200.

           mmiinn--ssppeecc--pprroobb
               The minimum probability (in percents) of reaching a source
               block for interblock speculative scheduling.  The default value
               is 40.

           mmaaxx--sscchheedd--eexxtteenndd--rreeggiioonnss--iitteerrss
               The maximum number of iterations through CFG to extend regions.
               0 - disable region extension, N - do at most N iterations.  The
               default value is 0.

           mmaaxx--sscchheedd--iinnssnn--ccoonnfflliicctt--ddeellaayy
               The maximum conflict delay for an insn to be considered for
               speculative motion.  The default value is 3.

           sscchheedd--ssppeecc--pprroobb--ccuuttooffff
               The minimal probability of speculation success (in percents),
               so that speculative insn will be scheduled.  The default value
               is 40.

           sscchheedd--mmeemm--ttrruuee--ddeepp--ccoosstt
               Minimal distance (in CPU cycles) between store and load
               targeting same memory locations.  The default value is 1.

           sseellsscchheedd--mmaaxx--llooookkaahheeaadd
               The maximum size of the lookahead window of selective
               scheduling.  It is a depth of search for available
               instructions.  The default value is 50.

           sseellsscchheedd--mmaaxx--sscchheedd--ttiimmeess
               The maximum number of times that an instruction will be
               scheduled during selective scheduling.  This is the limit on
               the number of iterations through which the instruction may be
               pipelined.  The default value is 2.

           sseellsscchheedd--mmaaxx--iinnssnnss--ttoo--rreennaammee
               The maximum number of best instructions in the ready list that
               are considered for renaming in the selective scheduler.  The
               default value is 2.

           mmaaxx--llaasstt--vvaalluuee--rrttll
               The maximum size measured as number of RTLs that can be
               recorded in an expression in combiner for a pseudo register as
               last known value of that register.  The default is 10000.

           iinntteeggeerr--sshhaarree--lliimmiitt
               Small integer constants can use a shared data structure,
               reducing the compilerâ€™s memory usage and increasing its speed.
               This sets the maximum value of a shared integer constant.  The
               default value is 256.

           mmiinn--vviirrttuuaall--mmaappppiinnggss
               Specifies the minimum number of virtual mappings in the
               incremental SSA updater that should be registered to trigger
               the virtual mappings heuristic defined by virtual-mappings-
               ratio.  The default value is 100.

           vviirrttuuaall--mmaappppiinnggss--rraattiioo
               If the number of virtual mappings is virtual-mappings-ratio
               bigger than the number of virtual symbols to be updated, then
               the incremental SSA updater switches to a full update for those
               symbols.  The default ratio is 3.

           sssspp--bbuuffffeerr--ssiizzee
               The minimum size of buffers (i.e. arrays) that will receive
               stack smashing protection when --ffssttaacckk--pprrootteeccttiioonn is used.

           mmaaxx--jjuummpp--tthhrreeaadd--dduupplliiccaattiioonn--ssttmmttss
               Maximum number of statements allowed in a block that needs to
               be duplicated when threading jumps.

           mmaaxx--ffiieellddss--ffoorr--ffiieelldd--sseennssiittiivvee
               Maximum number of fields in a structure we will treat in a
               field sensitive manner during pointer analysis.  The default is
               zero for -O0, and -O1 and 100 for -Os, -O2, and -O3.

           pprreeffeettcchh--llaatteennccyy
               Estimate on average number of instructions that are executed
               before prefetch finishes.  The distance we prefetch ahead is
               proportional to this constant.  Increasing this number may also
               lead to less streams being prefetched (see ssiimmuullttaanneeoouuss--
               pprreeffeettcchheess).

           ssiimmuullttaanneeoouuss--pprreeffeettcchheess
               Maximum number of prefetches that can run at the same time.

           ll11--ccaacchhee--lliinnee--ssiizzee
               The size of cache line in L1 cache, in bytes.

           ll11--ccaacchhee--ssiizzee
               The size of L1 cache, in kilobytes.

           ll22--ccaacchhee--ssiizzee
               The size of L2 cache, in kilobytes.

           uussee--ccaannoonniiccaall--ttyyppeess
               Whether the compiler should use the "canonical" type system.
               By default, this should always be 1, which uses a more
               efficient internal mechanism for comparing types in C++ and
               Objective-C++.  However, if bugs in the canonical type system
               are causing compilation failures, set this value to 0 to
               disable canonical types.

           sswwiittcchh--ccoonnvveerrssiioonn--mmaaxx--bbrraanncchh--rraattiioo
               Switch initialization conversion will refuse to create arrays
               that are bigger than sswwiittcchh--ccoonnvveerrssiioonn--mmaaxx--bbrraanncchh--rraattiioo times
               the number of branches in the switch.

           mmaaxx--ppaarrttiiaall--aannttiicc--lleennggtthh
               Maximum length of the partial antic set computed during the
               tree partial redundancy elimination optimization (--ffttrreeee--pprree)
               when optimizing at --OO33 and above.  For some sorts of source
               code the enhanced partial redundancy elimination optimization
               can run away, consuming all of the memory available on the host
               machine.  This parameter sets a limit on the length of the sets
               that are computed, which prevents the runaway behavior.
               Setting a value of 0 for this parameter will allow an unlimited
               set length.

           ssccccvvnn--mmaaxx--sscccc--ssiizzee
               Maximum size of a strongly connected component (SCC) during
               SCCVN processing.  If this limit is hit, SCCVN processing for
               the whole function will not be done and optimizations depending
               on it will be disabled.  The default maximum SCC size is 10000.

           iirraa--mmaaxx--llooooppss--nnuumm
               IRA uses a regional register allocation by default.  If a
               function contains loops more than number given by the
               parameter, only at most given number of the most frequently
               executed loops will form regions for the regional register
               allocation.  The default value of the parameter is 100.

           iirraa--mmaaxx--ccoonnfflliicctt--ttaabbllee--ssiizzee
               Although IRA uses a sophisticated algorithm of compression
               conflict table, the table can be still big for huge functions.
               If the conflict table for a function could be more than size in
               MB given by the parameter, the conflict table is not built and
               faster, simpler, and lower quality register allocation
               algorithm will be used.  The algorithm do not use pseudo-
               register conflicts.  The default value of the parameter is
               2000.

           lloooopp--iinnvvaarriiaanntt--mmaaxx--bbbbss--iinn--lloooopp
               Loop invariant motion can be very expensive, both in compile
               time and in amount of needed compile time memory, with very
               large loops.  Loops with more basic blocks than this parameter
               wonâ€™t have loop invariant motion optimization performed on
               them.  The default value of the parameter is 1000 for -O1 and
               10000 for -O2 and above.

           mmaaxx--vvaarrttrraacckk--ssiizzee
               Sets a maximum number of hash table slots to use during
               variable tracking dataflow analysis of any function.  If this
               limit is exceeded with variable tracking at assignments
               enabled, analysis for that function is retried without it,
               after removing all debug insns from the function.  If the limit
               is exceeded even without debug insns, var tracking analysis is
               completely disabled for the function.  Setting the parameter to
               zero makes it unlimited.

           mmiinn--nnoonnddeebbuugg--iinnssnn--uuiidd
               Use uids starting at this parameter for nondebug insns.  The
               range below the parameter is reserved exclusively for debug
               insns created by --ffvvaarr--ttrraacckkiinngg--aassssiiggnnmmeennttss, but debug insns
               may get (non-overlapping) uids above it if the reserved range
               is exhausted.

   OOppttiioonnss CCoonnttrroolllliinngg tthhee PPrreepprroocceessssoorr
       These options control the C preprocessor, which is run on each C source
       file before actual compilation.

       If you use the --EE option, nothing is done except preprocessing.  Some
       of these options make sense only together with --EE because they cause
       the preprocessor output to be unsuitable for actual compilation.

       --WWpp,,_o_p_t_i_o_n
           You can use --WWpp,,_o_p_t_i_o_n to bypass the compiler driver and pass
           _o_p_t_i_o_n directly through to the preprocessor.  If _o_p_t_i_o_n contains
           commas, it is split into multiple options at the commas.  However,
           many options are modified, translated or interpreted by the
           compiler driver before being passed to the preprocessor, and --WWpp
           forcibly bypasses this phase.  The preprocessorâ€™s direct interface
           is undocumented and subject to change, so whenever possible you
           should avoid using --WWpp and let the driver handle the options
           instead.

       --XXpprreepprroocceessssoorr _o_p_t_i_o_n
           Pass _o_p_t_i_o_n as an option to the preprocessor.  You can use this to
           supply system-specific preprocessor options which GCC does not know
           how to recognize.

           If you want to pass an option that takes an argument, you must use
           --XXpprreepprroocceessssoorr twice, once for the option and once for the
           argument.

       --DD _n_a_m_e
           Predefine _n_a_m_e as a macro, with definition 1.

       --DD _n_a_m_e==_d_e_f_i_n_i_t_i_o_n
           The contents of _d_e_f_i_n_i_t_i_o_n are tokenized and processed as if they
           appeared during translation phase three in a ##ddeeffiinnee directive.  In
           particular, the definition will be truncated by embedded newline
           characters.

           If you are invoking the preprocessor from a shell or shell-like
           program you may need to use the shellâ€™s quoting syntax to protect
           characters such as spaces that have a meaning in the shell syntax.

           If you wish to define a function-like macro on the command line,
           write its argument list with surrounding parentheses before the
           equals sign (if any).  Parentheses are meaningful to most shells,
           so you will need to quote the option.  With sshh and ccsshh,
           --DDâ€™â€™_n_a_m_e((_a_r_g_s_._._.))==_d_e_f_i_n_i_t_i_o_nâ€™â€™ works.

           --DD and --UU options are processed in the order they are given on the
           command line.  All --iimmaaccrrooss _f_i_l_e and --iinncclluuddee _f_i_l_e options are
           processed after all --DD and --UU options.

       --UU _n_a_m_e
           Cancel any previous definition of _n_a_m_e, either built in or provided
           with a --DD option.

       --uunnddeeff
           Do not predefine any system-specific or GCC-specific macros.  The
           standard predefined macros remain defined.

       --II _d_i_r
           Add the directory _d_i_r to the list of directories to be searched for
           header files.  Directories named by --II are searched before the
           standard system include directories.  If the directory _d_i_r is a
           standard system include directory, the option is ignored to ensure
           that the default search order for system directories and the
           special treatment of system headers are not defeated .  If _d_i_r
           begins with "=", then the "=" will be replaced by the sysroot
           prefix; see ----ssyyssrroooott and --iissyyssrroooott.

       --oo _f_i_l_e
           Write output to _f_i_l_e.  This is the same as specifying _f_i_l_e as the
           second non-option argument to ccpppp.  ggcccc has a different
           interpretation of a second non-option argument, so you must use --oo
           to specify the output file.

       --WWaallll
           Turns on all optional warnings which are desirable for normal code.
           At present this is --WWccoommmmeenntt, --WWttrriiggrraapphhss, --WWmmuullttiicchhaarr and a
           warning about integer promotion causing a change of sign in "#if"
           expressions.  Note that many of the preprocessorâ€™s warnings are on
           by default and have no options to control them.

       --WWccoommmmeenntt
       --WWccoommmmeennttss
           Warn whenever a comment-start sequence //** appears in a //** comment,
           or whenever a backslash-newline appears in a //// comment.  (Both
           forms have the same effect.)

       --WWttrriiggrraapphhss
           Most trigraphs in comments cannot affect the meaning of the
           program.  However, a trigraph that would form an escaped newline
           (????// at the end of a line) can, by changing where the comment
           begins or ends.  Therefore, only trigraphs that would form escaped
           newlines produce warnings inside a comment.

           This option is implied by --WWaallll.  If --WWaallll is not given, this
           option is still enabled unless trigraphs are enabled.  To get
           trigraph conversion without warnings, but get the other --WWaallll
           warnings, use --ttrriiggrraapphhss --WWaallll --WWnnoo--ttrriiggrraapphhss.

       --WWttrraaddiittiioonnaall
           Warn about certain constructs that behave differently in
           traditional and ISO C.  Also warn about ISO C constructs that have
           no traditional C equivalent, and problematic constructs which
           should be avoided.

       --WWuunnddeeff
           Warn whenever an identifier which is not a macro is encountered in
           an ##iiff directive, outside of ddeeffiinneedd.  Such identifiers are
           replaced with zero.

       --WWuunnuusseedd--mmaaccrrooss
           Warn about macros defined in the main file that are unused.  A
           macro is _u_s_e_d if it is expanded or tested for existence at least
           once.  The preprocessor will also warn if the macro has not been
           used at the time it is redefined or undefined.

           Built-in macros, macros defined on the command line, and macros
           defined in include files are not warned about.

           _N_o_t_e_: If a macro is actually used, but only used in skipped
           conditional blocks, then CPP will report it as unused.  To avoid
           the warning in such a case, you might improve the scope of the
           macroâ€™s definition by, for example, moving it into the first
           skipped block.  Alternatively, you could provide a dummy use with
           something like:

                   #if defined the_macro_causing_the_warning
                   #endif

       --WWeennddiiff--llaabbeellss
           Warn whenever an ##eellssee or an ##eennddiiff are followed by text.  This
           usually happens in code of the form

                   #if FOO
                   ...
                   #else FOO
                   ...
                   #endif FOO

           The second and third "FOO" should be in comments, but often are not
           in older programs.  This warning is on by default.

       --WWeerrrroorr
           Make all warnings into hard errors.  Source code which triggers
           warnings will be rejected.

       --WWssyysstteemm--hheeaaddeerrss
           Issue warnings for code in system headers.  These are normally
           unhelpful in finding bugs in your own code, therefore suppressed.
           If you are responsible for the system library, you may want to see
           them.

       --ww  Suppress all warnings, including those which GNU CPP issues by
           default.

       --ppeeddaannttiicc
           Issue all the mandatory diagnostics listed in the C standard.  Some
           of them are left out by default, since they trigger frequently on
           harmless code.

       --ppeeddaannttiicc--eerrrroorrss
           Issue all the mandatory diagnostics, and make all mandatory
           diagnostics into errors.  This includes mandatory diagnostics that
           GCC issues without --ppeeddaannttiicc but treats as warnings.

       --MM  Instead of outputting the result of preprocessing, output a rule
           suitable for mmaakkee describing the dependencies of the main source
           file.  The preprocessor outputs one mmaakkee rule containing the object
           file name for that source file, a colon, and the names of all the
           included files, including those coming from --iinncclluuddee or --iimmaaccrrooss
           command line options.

           Unless specified explicitly (with --MMTT or --MMQQ), the object file name
           consists of the name of the source file with any suffix replaced
           with object file suffix and with any leading directory parts
           removed.  If there are many included files then the rule is split
           into several lines using \\-newline.  The rule has no commands.

           This option does not suppress the preprocessorâ€™s debug output, such
           as --ddMM.  To avoid mixing such debug output with the dependency
           rules you should explicitly specify the dependency output file with
           --MMFF, or use an environment variable like DDEEPPEENNDDEENNCCIIEESS__OOUUTTPPUUTT.
           Debug output will still be sent to the regular output stream as
           normal.

           Passing --MM to the driver implies --EE, and suppresses warnings with
           an implicit --ww.

       --MMMM Like --MM but do not mention header files that are found in system
           header directories, nor header files that are included, directly or
           indirectly, from such a header.

           This implies that the choice of angle brackets or double quotes in
           an ##iinncclluuddee directive does not in itself determine whether that
           header will appear in --MMMM dependency output.  This is a slight
           change in semantics from GCC versions 3.0 and earlier.

       --MMFF _f_i_l_e
           When used with --MM or --MMMM, specifies a file to write the
           dependencies to.  If no --MMFF switch is given the preprocessor sends
           the rules to the same place it would have sent preprocessed output.

           When used with the driver options --MMDD or --MMMMDD, --MMFF overrides the
           default dependency output file.

       --MMGG In conjunction with an option such as --MM requesting dependency
           generation, --MMGG assumes missing header files are generated files
           and adds them to the dependency list without raising an error.  The
           dependency filename is taken directly from the "#include" directive
           without prepending any path.  --MMGG also suppresses preprocessed
           output, as a missing header file renders this useless.

           This feature is used in automatic updating of makefiles.

       --MMPP This option instructs CPP to add a phony target for each dependency
           other than the main file, causing each to depend on nothing.  These
           dummy rules work around errors mmaakkee gives if you remove header
           files without updating the _M_a_k_e_f_i_l_e to match.

           This is typical output:

                   test.o: test.c test.h

                   test.h:

       --MMTT _t_a_r_g_e_t
           Change the target of the rule emitted by dependency generation.  By
           default CPP takes the name of the main input file, deletes any
           directory components and any file suffix such as ..cc, and appends
           the platformâ€™s usual object suffix.  The result is the target.

           An --MMTT option will set the target to be exactly the string you
           specify.  If you want multiple targets, you can specify them as a
           single argument to --MMTT, or use multiple --MMTT options.

           For example, --MMTT â€™â€™$$((oobbjjppffxx))ffoooo..ooâ€™â€™ might give

                   $(objpfx)foo.o: foo.c

       --MMQQ _t_a_r_g_e_t
           Same as --MMTT, but it quotes any characters which are special to
           Make.  --MMQQ â€™â€™$$((oobbjjppffxx))ffoooo..ooâ€™â€™ gives

                   $$(objpfx)foo.o: foo.c

           The default target is automatically quoted, as if it were given
           with --MMQQ.

       --MMDD --MMDD is equivalent to --MM --MMFF _f_i_l_e, except that --EE is not implied.
           The driver determines _f_i_l_e based on whether an --oo option is given.
           If it is, the driver uses its argument but with a suffix of _._d,
           otherwise it takes the name of the input file, removes any
           directory components and suffix, and applies a _._d suffix.

           If --MMDD is used in conjunction with --EE, any --oo switch is understood
           to specify the dependency output file, but if used without --EE, each
           --oo is understood to specify a target object file.

           Since --EE is not implied, --MMDD can be used to generate a dependency
           output file as a side-effect of the compilation process.

       --MMMMDD
           Like --MMDD except mention only user header files, not system header
           files.

       --ffppcchh--ddeeppss
           When using precompiled headers, this flag will cause the
           dependency-output flags to also list the files from the precompiled
           headerâ€™s dependencies.  If not specified only the precompiled
           header would be listed and not the files that were used to create
           it because those files are not consulted when a precompiled header
           is used.

       --ffppcchh--pprreepprroocceessss
           This option allows use of a precompiled header together with --EE.
           It inserts a special "#pragma", "#pragma GCC pch_preprocess
           "<filename>"" in the output to mark the place where the precompiled
           header was found, and its filename.  When --ffpprreepprroocceesssseedd is in use,
           GCC recognizes this "#pragma" and loads the PCH.

           This option is off by default, because the resulting preprocessed
           output is only really suitable as input to GCC.  It is switched on
           by --ssaavvee--tteemmppss.

           You should not write this "#pragma" in your own code, but it is
           safe to edit the filename if the PCH file is available in a
           different location.  The filename may be absolute or it may be
           relative to GCCâ€™s current directory.

       --xx cc
       --xx cc++++
       --xx oobbjjeeccttiivvee--cc
       --xx aasssseemmbblleerr--wwiitthh--ccpppp
           Specify the source language: C, C++, Objective-C, or assembly.
           This has nothing to do with standards conformance or extensions; it
           merely selects which base syntax to expect.  If you give none of
           these options, cpp will deduce the language from the extension of
           the source file: ..cc, ..cccc, ..mm, or ..SS.  Some other common extensions
           for C++ and assembly are also recognized.  If cpp does not
           recognize the extension, it will treat the file as C; this is the
           most generic mode.

           _N_o_t_e_: Previous versions of cpp accepted a --llaanngg option which
           selected both the language and the standards conformance level.
           This option has been removed, because it conflicts with the --ll
           option.

       --ssttdd==_s_t_a_n_d_a_r_d
       --aannssii
           Specify the standard to which the code should conform.  Currently
           CPP knows about C and C++ standards; others may be added in the
           future.

           _s_t_a_n_d_a_r_d may be one of:

           "iso9899:1990"
           "c89"
               The ISO C standard from 1990.  cc8899 is the customary shorthand
               for this version of the standard.

               The --aannssii option is equivalent to --ssttdd==cc8899.

           "iso9899:199409"
               The 1990 C standard, as amended in 1994.

           "iso9899:1999"
           "c99"
           "iso9899:199x"
           "c9x"
               The revised ISO C standard, published in December 1999.  Before
               publication, this was known as C9X.

           "gnu89"
               The 1990 C standard plus GNU extensions.  This is the default.

           "gnu99"
           "gnu9x"
               The 1999 C standard plus GNU extensions.

           "c++98"
               The 1998 ISO C++ standard plus amendments.

           "gnu++98"
               The same as --ssttdd==cc++++9988 plus GNU extensions.  This is the
               default for C++ code.

       --II-- Split the include path.  Any directories specified with --II options
           before --II-- are searched only for headers requested with
           "#include "file""; they are not searched for "#include <file>".  If
           additional directories are specified with --II options after the --II--,
           those directories are searched for all ##iinncclluuddee directives.

           In addition, --II-- inhibits the use of the directory of the current
           file directory as the first search directory for "#include "file"".
           This option has been deprecated.

       --nnoossttddiinncc
           Do not search the standard system directories for header files.
           Only the directories you have specified with --II options (and the
           directory of the current file, if appropriate) are searched.

       --nnoossttddiinncc++++
           Do not search for header files in the C++-specific standard
           directories, but do still search the other standard directories.
           (This option is used when building the C++ library.)

       --iinncclluuddee _f_i_l_e
           Process _f_i_l_e as if "#include "file"" appeared as the first line of
           the primary source file.  However, the first directory searched for
           _f_i_l_e is the preprocessorâ€™s working directory _i_n_s_t_e_a_d _o_f the
           directory containing the main source file.  If not found there, it
           is searched for in the remainder of the "#include "..."" search
           chain as normal.

           If multiple --iinncclluuddee options are given, the files are included in
           the order they appear on the command line.

       --iimmaaccrrooss _f_i_l_e
           Exactly like --iinncclluuddee, except that any output produced by scanning
           _f_i_l_e is thrown away.  Macros it defines remain defined.  This
           allows you to acquire all the macros from a header without also
           processing its declarations.

           All files specified by --iimmaaccrrooss are processed before all files
           specified by --iinncclluuddee.

       --iiddiirraafftteerr _d_i_r
           Search _d_i_r for header files, but do it _a_f_t_e_r all directories
           specified with --II and the standard system directories have been
           exhausted.  _d_i_r is treated as a system include directory.  If _d_i_r
           begins with "=", then the "=" will be replaced by the sysroot
           prefix; see ----ssyyssrroooott and --iissyyssrroooott.

       --iipprreeffiixx _p_r_e_f_i_x
           Specify _p_r_e_f_i_x as the prefix for subsequent --iiwwiitthhpprreeffiixx options.
           If the prefix represents a directory, you should include the final
           //.

       --iiwwiitthhpprreeffiixx _d_i_r
       --iiwwiitthhpprreeffiixxbbeeffoorree _d_i_r
           Append _d_i_r to the prefix specified previously with --iipprreeffiixx, and
           add the resulting directory to the include search path.
           --iiwwiitthhpprreeffiixxbbeeffoorree puts it in the same place --II would; --iiwwiitthhpprreeffiixx
           puts it where --iiddiirraafftteerr would.

       --iissyyssrroooott _d_i_r
           This option is like the ----ssyyssrroooott option, but applies only to
           header files.  See the ----ssyyssrroooott option for more information.

       --iimmuullttiilliibb _d_i_r
           Use _d_i_r as a subdirectory of the directory containing target-
           specific C++ headers.

       --iissyysstteemm _d_i_r
           Search _d_i_r for header files, after all directories specified by --II
           but before the standard system directories.  Mark it as a system
           directory, so that it gets the same special treatment as is applied
           to the standard system directories.  If _d_i_r begins with "=", then
           the "=" will be replaced by the sysroot prefix; see ----ssyyssrroooott and
           --iissyyssrroooott.

       --iiqquuoottee _d_i_r
           Search _d_i_r only for header files requested with "#include "file"";
           they are not searched for "#include <file>", before all directories
           specified by --II and before the standard system directories.  If _d_i_r
           begins with "=", then the "=" will be replaced by the sysroot
           prefix; see ----ssyyssrroooott and --iissyyssrroooott.

       --ffddiirreeccttiivveess--oonnllyy
           When preprocessing, handle directives, but do not expand macros.

           The optionâ€™s behavior depends on the --EE and --ffpprreepprroocceesssseedd options.

           With --EE, preprocessing is limited to the handling of directives
           such as "#define", "#ifdef", and "#error".  Other preprocessor
           operations, such as macro expansion and trigraph conversion are not
           performed.  In addition, the --ddDD option is implicitly enabled.

           With --ffpprreepprroocceesssseedd, predefinition of command line and most builtin
           macros is disabled.  Macros such as "__LINE__", which are
           contextually dependent, are handled normally.  This enables
           compilation of files previously preprocessed with "-E
           -fdirectives-only".

           With both --EE and --ffpprreepprroocceesssseedd, the rules for --ffpprreepprroocceesssseedd take
           precedence.  This enables full preprocessing of files previously
           preprocessed with "-E -fdirectives-only".

       --ffddoollllaarrss--iinn--iiddeennttiiffiieerrss
           Accept $$ in identifiers.

       --ffeexxtteennddeedd--iiddeennttiiffiieerrss
           Accept universal character names in identifiers.  This option is
           experimental; in a future version of GCC, it will be enabled by
           default for C99 and C++.

       --ffpprreepprroocceesssseedd
           Indicate to the preprocessor that the input file has already been
           preprocessed.  This suppresses things like macro expansion,
           trigraph conversion, escaped newline splicing, and processing of
           most directives.  The preprocessor still recognizes and removes
           comments, so that you can pass a file preprocessed with --CC to the
           compiler without problems.  In this mode the integrated
           preprocessor is little more than a tokenizer for the front ends.

           --ffpprreepprroocceesssseedd is implicit if the input file has one of the
           extensions ..ii, ..iiii or ..mmii.  These are the extensions that GCC uses
           for preprocessed files created by --ssaavvee--tteemmppss.

       --ffttaabbssttoopp==_w_i_d_t_h
           Set the distance between tab stops.  This helps the preprocessor
           report correct column numbers in warnings or errors, even if tabs
           appear on the line.  If the value is less than 1 or greater than
           100, the option is ignored.  The default is 8.

       --ffeexxeecc--cchhaarrsseett==_c_h_a_r_s_e_t
           Set the execution character set, used for string and character
           constants.  The default is UTF-8.  _c_h_a_r_s_e_t can be any encoding
           supported by the systemâ€™s "iconv" library routine.

       --ffwwiiddee--eexxeecc--cchhaarrsseett==_c_h_a_r_s_e_t
           Set the wide execution character set, used for wide string and
           character constants.  The default is UTF-32 or UTF-16, whichever
           corresponds to the width of "wchar_t".  As with --ffeexxeecc--cchhaarrsseett,
           _c_h_a_r_s_e_t can be any encoding supported by the systemâ€™s "iconv"
           library routine; however, you will have problems with encodings
           that do not fit exactly in "wchar_t".

       --ffiinnppuutt--cchhaarrsseett==_c_h_a_r_s_e_t
           Set the input character set, used for translation from the
           character set of the input file to the source character set used by
           GCC.  If the locale does not specify, or GCC cannot get this
           information from the locale, the default is UTF-8.  This can be
           overridden by either the locale or this command line option.
           Currently the command line option takes precedence if thereâ€™s a
           conflict.  _c_h_a_r_s_e_t can be any encoding supported by the systemâ€™s
           "iconv" library routine.

       --ffwwoorrkkiinngg--ddiirreeccttoorryy
           Enable generation of linemarkers in the preprocessor output that
           will let the compiler know the current working directory at the
           time of preprocessing.  When this option is enabled, the
           preprocessor will emit, after the initial linemarker, a second
           linemarker with the current working directory followed by two
           slashes.  GCC will use this directory, when itâ€™s present in the
           preprocessed input, as the directory emitted as the current working
           directory in some debugging information formats.  This option is
           implicitly enabled if debugging information is enabled, but this
           can be inhibited with the negated form --ffnnoo--wwoorrkkiinngg--ddiirreeccttoorryy.  If
           the --PP flag is present in the command line, this option has no
           effect, since no "#line" directives are emitted whatsoever.

       --ffnnoo--sshhooww--ccoolluummnn
           Do not print column numbers in diagnostics.  This may be necessary
           if diagnostics are being scanned by a program that does not
           understand the column numbers, such as ddeejjaaggnnuu.

       --AA _p_r_e_d_i_c_a_t_e==_a_n_s_w_e_r
           Make an assertion with the predicate _p_r_e_d_i_c_a_t_e and answer _a_n_s_w_e_r.
           This form is preferred to the older form --AA _p_r_e_d_i_c_a_t_e((_a_n_s_w_e_r)),
           which is still supported, because it does not use shell special
           characters.

       --AA --_p_r_e_d_i_c_a_t_e==_a_n_s_w_e_r
           Cancel an assertion with the predicate _p_r_e_d_i_c_a_t_e and answer _a_n_s_w_e_r.

       --ddCCHHAARRSS
           _C_H_A_R_S is a sequence of one or more of the following characters, and
           must not be preceded by a space.  Other characters are interpreted
           by the compiler proper, or reserved for future versions of GCC, and
           so are silently ignored.  If you specify characters whose behavior
           conflicts, the result is undefined.

           MM   Instead of the normal output, generate a list of ##ddeeffiinnee
               directives for all the macros defined during the execution of
               the preprocessor, including predefined macros.  This gives you
               a way of finding out what is predefined in your version of the
               preprocessor.  Assuming you have no file _f_o_o_._h, the command

                       touch foo.h; cpp -dM foo.h

               will show all the predefined macros.

               If you use --ddMM without the --EE option, --ddMM is interpreted as a
               synonym for --ffdduummpp--rrttll--mmaacchh.

           DD   Like MM except in two respects: it does _n_o_t include the
               predefined macros, and it outputs _b_o_t_h the ##ddeeffiinnee directives
               and the result of preprocessing.  Both kinds of output go to
               the standard output file.

           NN   Like DD, but emit only the macro names, not their expansions.

           II   Output ##iinncclluuddee directives in addition to the result of
               preprocessing.

           UU   Like DD except that only macros that are expanded, or whose
               definedness is tested in preprocessor directives, are output;
               the output is delayed until the use or test of the macro; and
               ##uunnddeeff directives are also output for macros tested but
               undefined at the time.

       --PP  Inhibit generation of linemarkers in the output from the
           preprocessor.  This might be useful when running the preprocessor
           on something that is not C code, and will be sent to a program
           which might be confused by the linemarkers.

       --CC  Do not discard comments.  All comments are passed through to the
           output file, except for comments in processed directives, which are
           deleted along with the directive.

           You should be prepared for side effects when using --CC; it causes
           the preprocessor to treat comments as tokens in their own right.
           For example, comments appearing at the start of what would be a
           directive line have the effect of turning that line into an
           ordinary source line, since the first token on the line is no
           longer a ##.

       --CCCC Do not discard comments, including during macro expansion.  This is
           like --CC, except that comments contained within macros are also
           passed through to the output file where the macro is expanded.

           In addition to the side-effects of the --CC option, the --CCCC option
           causes all C++-style comments inside a macro to be converted to
           C-style comments.  This is to prevent later use of that macro from
           inadvertently commenting out the remainder of the source line.

           The --CCCC option is generally used to support lint comments.

       --ttrraaddiittiioonnaall--ccpppp
           Try to imitate the behavior of old-fashioned C preprocessors, as
           opposed to ISO C preprocessors.

       --ttrriiggrraapphhss
           Process trigraph sequences.  These are three-character sequences,
           all starting with ????, that are defined by ISO C to stand for single
           characters.  For example, ????// stands for \\, so â€™â€™????//nnâ€™â€™ is a
           character constant for a newline.  By default, GCC ignores
           trigraphs, but in standard-conforming modes it converts them.  See
           the --ssttdd and --aannssii options.

           The nine trigraphs and their replacements are

                   Trigraph:       ??(  ??)  ??<  ??>  ??=  ??/  ??'  ??!  ??-
                   Replacement:      [    ]    {    }    #    \    ^    |    ~

       --rreemmaapp
           Enable special code to work around file systems which only permit
           very short file names, such as MS-DOS.

       ----hheellpp
       ----ttaarrggeett--hheellpp
           Print text describing all the command line options instead of
           preprocessing anything.

       --vv  Verbose mode.  Print out GNU CPPâ€™s version number at the beginning
           of execution, and report the final form of the include path.

       --HH  Print the name of each header file used, in addition to other
           normal activities.  Each name is indented to show how deep in the
           ##iinncclluuddee stack it is.  Precompiled header files are also printed,
           even if they are found to be invalid; an invalid precompiled header
           file is printed with ......xx and a valid one with ......!! .

       --vveerrssiioonn
       ----vveerrssiioonn
           Print out GNU CPPâ€™s version number.  With one dash, proceed to
           preprocess as normal.  With two dashes, exit immediately.

   PPaassssiinngg OOppttiioonnss ttoo tthhee AAsssseemmbblleerr
       You can pass options to the assembler.

       --WWaa,,_o_p_t_i_o_n
           Pass _o_p_t_i_o_n as an option to the assembler.  If _o_p_t_i_o_n contains
           commas, it is split into multiple options at the commas.

       --XXaasssseemmbblleerr _o_p_t_i_o_n
           Pass _o_p_t_i_o_n as an option to the assembler.  You can use this to
           supply system-specific assembler options which GCC does not know
           how to recognize.

           If you want to pass an option that takes an argument, you must use
           --XXaasssseemmbblleerr twice, once for the option and once for the argument.

   OOppttiioonnss ffoorr LLiinnkkiinngg
       These options come into play when the compiler links object files into
       an executable output file.  They are meaningless if the compiler is not
       doing a link step.

       _o_b_j_e_c_t_-_f_i_l_e_-_n_a_m_e
           A file name that does not end in a special recognized suffix is
           considered to name an object file or library.  (Object files are
           distinguished from libraries by the linker according to the file
           contents.)  If linking is done, these object files are used as
           input to the linker.

       --cc
       --SS
       --EE  If any of these options is used, then the linker is not run, and
           object file names should not be used as arguments.

       --ll_l_i_b_r_a_r_y
       --ll _l_i_b_r_a_r_y
           Search the library named _l_i_b_r_a_r_y when linking.  (The second
           alternative with the library as a separate argument is only for
           POSIX compliance and is not recommended.)

           It makes a difference where in the command you write this option;
           the linker searches and processes libraries and object files in the
           order they are specified.  Thus, ffoooo..oo --llzz bbaarr..oo searches library zz
           after file _f_o_o_._o but before _b_a_r_._o.  If _b_a_r_._o refers to functions in
           zz, those functions may not be loaded.

           The linker searches a standard list of directories for the library,
           which is actually a file named _l_i_b_l_i_b_r_a_r_y_._a.  The linker then uses
           this file as if it had been specified precisely by name.

           The directories searched include several standard system
           directories plus any that you specify with --LL.

           Normally the files found this way are library files---archive files
           whose members are object files.  The linker handles an archive file
           by scanning through it for members which define symbols that have
           so far been referenced but not defined.  But if the file that is
           found is an ordinary object file, it is linked in the usual
           fashion.  The only difference between using an --ll option and
           specifying a file name is that --ll surrounds _l_i_b_r_a_r_y with lliibb and ..aa
           and searches several directories.

       --lloobbjjcc
           You need this special case of the --ll option in order to link an
           Objective-C or Objective-C++ program.

       --nnoossttaarrttffiilleess
           Do not use the standard system startup files when linking.  The
           standard system libraries are used normally, unless --nnoossttddlliibb or
           --nnooddeeffaauullttlliibbss is used.

       --nnooddeeffaauullttlliibbss
           Do not use the standard system libraries when linking.  Only the
           libraries you specify will be passed to the linker.  The standard
           startup files are used normally, unless --nnoossttaarrttffiilleess is used.  The
           compiler may generate calls to "memcmp", "memset", "memcpy" and
           "memmove".  These entries are usually resolved by entries in libc.
           These entry points should be supplied through some other mechanism
           when this option is specified.

       --nnoossttddlliibb
           Do not use the standard system startup files or libraries when
           linking.  No startup files and only the libraries you specify will
           be passed to the linker.  The compiler may generate calls to
           "memcmp", "memset", "memcpy" and "memmove".  These entries are
           usually resolved by entries in libc.  These entry points should be
           supplied through some other mechanism when this option is
           specified.

           One of the standard libraries bypassed by --nnoossttddlliibb and
           --nnooddeeffaauullttlliibbss is _l_i_b_g_c_c_._a, a library of internal subroutines that
           GCC uses to overcome shortcomings of particular machines, or
           special needs for some languages.

           In most cases, you need _l_i_b_g_c_c_._a even when you want to avoid other
           standard libraries.  In other words, when you specify --nnoossttddlliibb or
           --nnooddeeffaauullttlliibbss you should usually specify --llggcccc as well.  This
           ensures that you have no unresolved references to internal GCC
           library subroutines.  (For example, ____mmaaiinn, used to ensure C++
           constructors will be called.)

       --ppiiee
           Produce a position independent executable on targets which support
           it.  For predictable results, you must also specify the same set of
           options that were used to generate code (--ffppiiee, --ffPPIIEE, or model
           suboptions) when you specify this option.

       --rrddyynnaammiicc
           Pass the flag --eexxppoorrtt--ddyynnaammiicc to the ELF linker, on targets that
           support it. This instructs the linker to add all symbols, not only
           used ones, to the dynamic symbol table. This option is needed for
           some uses of "dlopen" or to allow obtaining backtraces from within
           a program.

       --ss  Remove all symbol table and relocation information from the
           executable.

       --ssttaattiicc
           On systems that support dynamic linking, this prevents linking with
           the shared libraries.  On other systems, this option has no effect.

       --sshhaarreedd
           Produce a shared object which can then be linked with other objects
           to form an executable.  Not all systems support this option.  For
           predictable results, you must also specify the same set of options
           that were used to generate code (--ffppiicc, --ffPPIICC, or model suboptions)
           when you specify this option.[1]

       --sshhaarreedd--lliibbggcccc
       --ssttaattiicc--lliibbggcccc
           On systems that provide _l_i_b_g_c_c as a shared library, these options
           force the use of either the shared or static version respectively.
           If no shared version of _l_i_b_g_c_c was built when the compiler was
           configured, these options have no effect.

           There are several situations in which an application should use the
           shared _l_i_b_g_c_c instead of the static version.  The most common of
           these is when the application wishes to throw and catch exceptions
           across different shared libraries.  In that case, each of the
           libraries as well as the application itself should use the shared
           _l_i_b_g_c_c.

           Therefore, the G++ and GCJ drivers automatically add --sshhaarreedd--lliibbggcccc
           whenever you build a shared library or a main executable, because
           C++ and Java programs typically use exceptions, so this is the
           right thing to do.

           If, instead, you use the GCC driver to create shared libraries, you
           may find that they will not always be linked with the shared
           _l_i_b_g_c_c.  If GCC finds, at its configuration time, that you have a
           non-GNU linker or a GNU linker that does not support option
           ----eehh--ffrraammee--hhddrr, it will link the shared version of _l_i_b_g_c_c into
           shared libraries by default.  Otherwise, it will take advantage of
           the linker and optimize away the linking with the shared version of
           _l_i_b_g_c_c, linking with the static version of libgcc by default.  This
           allows exceptions to propagate through such shared libraries,
           without incurring relocation costs at library load time.

           However, if a library or main executable is supposed to throw or
           catch exceptions, you must link it using the G++ or GCJ driver, as
           appropriate for the languages used in the program, or using the
           option --sshhaarreedd--lliibbggcccc, such that it is linked with the shared
           _l_i_b_g_c_c.

       --ssyymmbboolliicc
           Bind references to global symbols when building a shared object.
           Warn about any unresolved references (unless overridden by the link
           editor option --XXlliinnkkeerr --zz --XXlliinnkkeerr ddeeffss).  Only a few systems
           support this option.

       --TT _s_c_r_i_p_t
           Use _s_c_r_i_p_t as the linker script.  This option is supported by most
           systems using the GNU linker.  On some targets, such as bare-board
           targets without an operating system, the --TT option may be required
           when linking to avoid references to undefined symbols.

       --XXlliinnkkeerr _o_p_t_i_o_n
           Pass _o_p_t_i_o_n as an option to the linker.  You can use this to supply
           system-specific linker options which GCC does not know how to
           recognize.

           If you want to pass an option that takes a separate argument, you
           must use --XXlliinnkkeerr twice, once for the option and once for the
           argument.  For example, to pass --aasssseerrtt ddeeffiinniittiioonnss, you must write
           --XXlliinnkkeerr --aasssseerrtt --XXlliinnkkeerr ddeeffiinniittiioonnss.  It does not work to write
           --XXlliinnkkeerr ""--aasssseerrtt ddeeffiinniittiioonnss"", because this passes the entire
           string as a single argument, which is not what the linker expects.

           When using the GNU linker, it is usually more convenient to pass
           arguments to linker options using the _o_p_t_i_o_n==_v_a_l_u_e syntax than as
           separate arguments.  For example, you can specify --XXlliinnkkeerr
           --MMaapp==oouuttppuutt..mmaapp rather than --XXlliinnkkeerr --MMaapp --XXlliinnkkeerr oouuttppuutt..mmaapp.
           Other linkers may not support this syntax for command-line options.

       --WWll,,_o_p_t_i_o_n
           Pass _o_p_t_i_o_n as an option to the linker.  If _o_p_t_i_o_n contains commas,
           it is split into multiple options at the commas.  You can use this
           syntax to pass an argument to the option.  For example,
           --WWll,,--MMaapp,,oouuttppuutt..mmaapp passes --MMaapp oouuttppuutt..mmaapp to the linker.  When
           using the GNU linker, you can also get the same effect with
           --WWll,,--MMaapp==oouuttppuutt..mmaapp.

       --uu _s_y_m_b_o_l
           Pretend the symbol _s_y_m_b_o_l is undefined, to force linking of library
           modules to define it.  You can use --uu multiple times with different
           symbols to force loading of additional library modules.

   OOppttiioonnss ffoorr DDiirreeccttoorryy SSeeaarrcchh
       These options specify directories to search for header files, for
       libraries and for parts of the compiler:

       --II_d_i_r
           Add the directory _d_i_r to the head of the list of directories to be
           searched for header files.  This can be used to override a system
           header file, substituting your own version, since these directories
           are searched before the system header file directories.  However,
           you should not use this option to add directories that contain
           vendor-supplied system header files (use --iissyysstteemm for that).  If
           you use more than one --II option, the directories are scanned in
           left-to-right order; the standard system directories come after.

           If a standard system include directory, or a directory specified
           with --iissyysstteemm, is also specified with --II, the --II option will be
           ignored.  The directory will still be searched but as a system
           directory at its normal position in the system include chain.  This
           is to ensure that GCCâ€™s procedure to fix buggy system headers and
           the ordering for the include_next directive are not inadvertently
           changed.  If you really need to change the search order for system
           directories, use the --nnoossttddiinncc and/or --iissyysstteemm options.

       --iiqquuoottee_d_i_r
           Add the directory _d_i_r to the head of the list of directories to be
           searched for header files only for the case of ##iinncclluuddee ""_f_i_l_e"";
           they are not searched for ##iinncclluuddee <<_f_i_l_e>>, otherwise just like --II.

       --LL_d_i_r
           Add directory _d_i_r to the list of directories to be searched for --ll.

       --BB_p_r_e_f_i_x
           This option specifies where to find the executables, libraries,
           include files, and data files of the compiler itself.

           The compiler driver program runs one or more of the subprograms
           _c_p_p, _c_c_1, _a_s and _l_d.  It tries _p_r_e_f_i_x as a prefix for each program
           it tries to run, both with and without _m_a_c_h_i_n_e//_v_e_r_s_i_o_n//.

           For each subprogram to be run, the compiler driver first tries the
           --BB prefix, if any.  If that name is not found, or if --BB was not
           specified, the driver tries two standard prefixes, which are
           _/_u_s_r_/_l_i_b_/_g_c_c_/ and _/_u_s_r_/_l_o_c_a_l_/_l_i_b_/_g_c_c_/.  If neither of those results
           in a file name that is found, the unmodified program name is
           searched for using the directories specified in your PPAATTHH
           environment variable.

           The compiler will check to see if the path provided by the --BB
           refers to a directory, and if necessary it will add a directory
           separator character at the end of the path.

           --BB prefixes that effectively specify directory names also apply to
           libraries in the linker, because the compiler translates these
           options into --LL options for the linker.  They also apply to
           includes files in the preprocessor, because the compiler translates
           these options into --iissyysstteemm options for the preprocessor.  In this
           case, the compiler appends iinncclluuddee to the prefix.

           The run-time support file _l_i_b_g_c_c_._a can also be searched for using
           the --BB prefix, if needed.  If it is not found there, the two
           standard prefixes above are tried, and that is all.  The file is
           left out of the link if it is not found by those means.

           Another way to specify a prefix much like the --BB prefix is to use
           the environment variable GGCCCC__EEXXEECC__PPRREEFFIIXX.

           As a special kludge, if the path provided by --BB is _[_d_i_r_/_]_s_t_a_g_e_N_/,
           where _N is a number in the range 0 to 9, then it will be replaced
           by _[_d_i_r_/_]_i_n_c_l_u_d_e.  This is to help with boot-strapping the
           compiler.

       --ssppeeccss==_f_i_l_e
           Process _f_i_l_e after the compiler reads in the standard _s_p_e_c_s file,
           in order to override the defaults that the _g_c_c driver program uses
           when determining what switches to pass to _c_c_1, _c_c_1_p_l_u_s, _a_s, _l_d,
           etc.  More than one --ssppeeccss==_f_i_l_e can be specified on the command
           line, and they are processed in order, from left to right.

       ----ssyyssrroooott==_d_i_r
           Use _d_i_r as the logical root directory for headers and libraries.
           For example, if the compiler would normally search for headers in
           _/_u_s_r_/_i_n_c_l_u_d_e and libraries in _/_u_s_r_/_l_i_b, it will instead search
           _d_i_r_/_u_s_r_/_i_n_c_l_u_d_e and _d_i_r_/_u_s_r_/_l_i_b.

           If you use both this option and the --iissyyssrroooott option, then the
           ----ssyyssrroooott option will apply to libraries, but the --iissyyssrroooott option
           will apply to header files.

           The GNU linker (beginning with version 2.16) has the necessary
           support for this option.  If your linker does not support this
           option, the header file aspect of ----ssyyssrroooott will still work, but
           the library aspect will not.

       --II-- This option has been deprecated.  Please use --iiqquuoottee instead for --II
           directories before the --II-- and remove the --II--.  Any directories you
           specify with --II options before the --II-- option are searched only for
           the case of ##iinncclluuddee ""_f_i_l_e""; they are not searched for ##iinncclluuddee
           <<_f_i_l_e>>.

           If additional directories are specified with --II options after the
           --II--, these directories are searched for all ##iinncclluuddee directives.
           (Ordinarily _a_l_l --II directories are used this way.)

           In addition, the --II-- option inhibits the use of the current
           directory (where the current input file came from) as the first
           search directory for ##iinncclluuddee ""_f_i_l_e"".  There is no way to override
           this effect of --II--.  With --II.. you can specify searching the
           directory which was current when the compiler was invoked.  That is
           not exactly the same as what the preprocessor does by default, but
           it is often satisfactory.

           --II-- does not inhibit the use of the standard system directories for
           header files.  Thus, --II-- and --nnoossttddiinncc are independent.

   SSppeecciiffyyiinngg TTaarrggeett MMaacchhiinnee aanndd CCoommppiilleerr VVeerrssiioonn
       The usual way to run GCC is to run the executable called _g_c_c, or
       _<_m_a_c_h_i_n_e_>_-_g_c_c when cross-compiling, or _<_m_a_c_h_i_n_e_>_-_g_c_c_-_<_v_e_r_s_i_o_n_> to run a
       version other than the one that was installed last.  Sometimes this is
       inconvenient, so GCC provides options that will switch to another
       cross-compiler or version.

       --bb _m_a_c_h_i_n_e
           The argument _m_a_c_h_i_n_e specifies the target machine for compilation.

           The value to use for _m_a_c_h_i_n_e is the same as was specified as the
           machine type when configuring GCC as a cross-compiler.  For
           example, if a cross-compiler was configured with ccoonnffiigguurree aarrmm--eellff,
           meaning to compile for an arm processor with elf binaries, then you
           would specify --bb aarrmm--eellff to run that cross compiler.  Because there
           are other options beginning with --bb, the configuration must contain
           a hyphen, or --bb alone should be one argument followed by the
           configuration in the next argument.

       --VV _v_e_r_s_i_o_n
           The argument _v_e_r_s_i_o_n specifies which version of GCC to run.  This
           is useful when multiple versions are installed.  For example,
           _v_e_r_s_i_o_n might be 44..00, meaning to run GCC version 4.0.

       The --VV and --bb options work by running the _<_m_a_c_h_i_n_e_>_-_g_c_c_-_<_v_e_r_s_i_o_n_>
       executable, so thereâ€™s no real reason to use them if you can just run
       that directly.

   HHaarrddwwaarree MMooddeellss aanndd CCoonnffiigguurraattiioonnss
       Earlier we discussed the standard option --bb which chooses among
       different installed compilers for completely different target machines,
       such as VAX vs. 68000 vs. 80386.

       In addition, each of these target machine types can have its own
       special options, starting with --mm, to choose among various hardware
       models or configurations---for example, 68010 vs 68020, floating
       coprocessor or none.  A single installed version of the compiler can
       compile for any model or configuration, according to the options
       specified.

       Some configurations of the compiler also support additional special
       options, usually for compatibility with other compilers on the same
       platform.

   AARRCC OOppttiioonnss
       These options are defined for ARC implementations:

       --EELL Compile code for little endian mode.  This is the default.

       --EEBB Compile code for big endian mode.

       --mmmmaannggllee--ccppuu
           Prepend the name of the cpu to all public symbol names.  In
           multiple-processor systems, there are many ARC variants with
           different instruction and register set characteristics.  This flag
           prevents code compiled for one cpu to be linked with code compiled
           for another.  No facility exists for handling variants that are
           "almost identical".  This is an all or nothing option.

       --mmccppuu==_c_p_u
           Compile code for ARC variant _c_p_u.  Which variants are supported
           depend on the configuration.  All variants support --mmccppuu==bbaassee, this
           is the default.

       --mmtteexxtt==_t_e_x_t_-_s_e_c_t_i_o_n
       --mmddaattaa==_d_a_t_a_-_s_e_c_t_i_o_n
       --mmrrooddaattaa==_r_e_a_d_o_n_l_y_-_d_a_t_a_-_s_e_c_t_i_o_n
           Put functions, data, and readonly data in _t_e_x_t_-_s_e_c_t_i_o_n, _d_a_t_a_-
           _s_e_c_t_i_o_n, and _r_e_a_d_o_n_l_y_-_d_a_t_a_-_s_e_c_t_i_o_n respectively by default.  This
           can be overridden with the "section" attribute.

       --mmffiixx--ccoorrtteexx--mm33--llddrrdd
           Some Cortex-M3 cores can cause data corruption when "ldrd"
           instructions with overlapping destination and base registers are
           used.  This option avoids generating these instructions.  This
           option is enabled by default when --mmccppuu==ccoorrtteexx--mm33 is specified.

   AARRMM OOppttiioonnss
       These --mm options are defined for Advanced RISC Machines (ARM)
       architectures:

       --mmaabbii==_n_a_m_e
           Generate code for the specified ABI.  Permissible values are: aappccss--
           ggnnuu, aattppccss, aaaappccss, aaaappccss--lliinnuuxx and iiwwmmmmxxtt.

       --mmaappccss--ffrraammee
           Generate a stack frame that is compliant with the ARM Procedure
           Call Standard for all functions, even if this is not strictly
           necessary for correct execution of the code.  Specifying
           --ffoommiitt--ffrraammee--ppooiinntteerr with this option will cause the stack frames
           not to be generated for leaf functions.  The default is
           --mmnnoo--aappccss--ffrraammee.

       --mmaappccss
           This is a synonym for --mmaappccss--ffrraammee.

       --mmtthhuummbb--iinntteerrwwoorrkk
           Generate code which supports calling between the ARM and Thumb
           instruction sets.  Without this option the two instruction sets
           cannot be reliably used inside one program.  The default is
           --mmnnoo--tthhuummbb--iinntteerrwwoorrkk, since slightly larger code is generated when
           --mmtthhuummbb--iinntteerrwwoorrkk is specified.

       --mmnnoo--sscchheedd--pprroolloogg
           Prevent the reordering of instructions in the function prolog, or
           the merging of those instruction with the instructions in the
           functionâ€™s body.  This means that all functions will start with a
           recognizable set of instructions (or in fact one of a choice from a
           small set of different function prologues), and this information
           can be used to locate the start if functions inside an executable
           piece of code.  The default is --mmsscchheedd--pprroolloogg.

       --mmffllooaatt--aabbii==_n_a_m_e
           Specifies which floating-point ABI to use.  Permissible values are:
           ssoofftt, ssooffttffpp and hhaarrdd.

           Specifying ssoofftt causes GCC to generate output containing library
           calls for floating-point operations.  ssooffttffpp allows the generation
           of code using hardware floating-point instructions, but still uses
           the soft-float calling conventions.  hhaarrdd allows generation of
           floating-point instructions and uses FPU-specific calling
           conventions.

           Using --mmffllooaatt--aabbii==hhaarrdd with VFP coprocessors is not supported.  Use
           --mmffllooaatt--aabbii==ssooffttffpp with the appropriate --mmffppuu option to allow the
           compiler to generate code that makes use of the hardware floating-
           point capabilities for these CPUs.

           The default depends on the specific target configuration.  Note
           that the hard-float and soft-float ABIs are not link-compatible;
           you must compile your entire program with the same ABI, and link
           with a compatible set of libraries.

       --mmhhaarrdd--ffllooaatt
           Equivalent to --mmffllooaatt--aabbii==hhaarrdd.

       --mmssoofftt--ffllooaatt
           Equivalent to --mmffllooaatt--aabbii==ssoofftt.

       --mmlliittttllee--eennddiiaann
           Generate code for a processor running in little-endian mode.  This
           is the default for all standard configurations.

       --mmbbiigg--eennddiiaann
           Generate code for a processor running in big-endian mode; the
           default is to compile code for a little-endian processor.

       --mmwwoorrddss--lliittttllee--eennddiiaann
           This option only applies when generating code for big-endian
           processors.  Generate code for a little-endian word order but a
           big-endian byte order.  That is, a byte order of the form 3322110077665544.
           Note: this option should only be used if you require compatibility
           with code for big-endian ARM processors generated by versions of
           the compiler prior to 2.8.

       --mmccppuu==_n_a_m_e
           This specifies the name of the target ARM processor.  GCC uses this
           name to determine what kind of instructions it can emit when
           generating assembly code.  Permissible names are: aarrmm22, aarrmm225500,
           aarrmm33, aarrmm66, aarrmm6600, aarrmm660000, aarrmm661100, aarrmm662200, aarrmm77, aarrmm77mm, aarrmm77dd,
           aarrmm77ddmm, aarrmm77ddii, aarrmm77ddmmii, aarrmm7700, aarrmm770000, aarrmm770000ii, aarrmm771100, aarrmm771100cc,
           aarrmm77110000, aarrmm772200, aarrmm77550000, aarrmm77550000ffee, aarrmm77ttddmmii, aarrmm77ttddmmii--ss, aarrmm771100tt,
           aarrmm772200tt, aarrmm774400tt, ssttrroonnggaarrmm, ssttrroonnggaarrmm111100, ssttrroonnggaarrmm11110000,
           ssttrroonnggaarrmm11111100, aarrmm88, aarrmm881100, aarrmm99, aarrmm99ee, aarrmm992200, aarrmm992200tt, aarrmm992222tt,
           aarrmm994466ee--ss, aarrmm996666ee--ss, aarrmm996688ee--ss, aarrmm992266eejj--ss, aarrmm994400tt, aarrmm99ttddmmii,
           aarrmm1100ttddmmii, aarrmm11002200tt, aarrmm11002266eejj--ss, aarrmm1100ee, aarrmm11002200ee, aarrmm11002222ee,
           aarrmm11113366jj--ss, aarrmm11113366jjff--ss, mmppccoorree, mmppccoorreennoovvffpp, aarrmm11115566tt22--ss,
           aarrmm11117766jjzz--ss, aarrmm11117766jjzzff--ss, ccoorrtteexx--aa88, ccoorrtteexx--aa99, ccoorrtteexx--rr44,
           ccoorrtteexx--rr44ff, ccoorrtteexx--mm33, ccoorrtteexx--mm11, xxssccaallee, iiwwmmmmxxtt, iiwwmmmmxxtt22, eepp99331122.

       --mmttuunnee==_n_a_m_e
           This option is very similar to the --mmccppuu== option, except that
           instead of specifying the actual target processor type, and hence
           restricting which instructions can be used, it specifies that GCC
           should tune the performance of the code as if the target were of
           the type specified in this option, but still choosing the
           instructions that it will generate based on the cpu specified by a
           --mmccppuu== option.  For some ARM implementations better performance can
           be obtained by using this option.

       --mmaarrcchh==_n_a_m_e
           This specifies the name of the target ARM architecture.  GCC uses
           this name to determine what kind of instructions it can emit when
           generating assembly code.  This option can be used in conjunction
           with or instead of the --mmccppuu== option.  Permissible names are:
           aarrmmvv22, aarrmmvv22aa, aarrmmvv33, aarrmmvv33mm, aarrmmvv44, aarrmmvv44tt, aarrmmvv55, aarrmmvv55tt, aarrmmvv55ee,
           aarrmmvv55ttee, aarrmmvv66, aarrmmvv66jj, aarrmmvv66tt22, aarrmmvv66zz, aarrmmvv66zzkk, aarrmmvv66--mm, aarrmmvv77,
           aarrmmvv77--aa, aarrmmvv77--rr, aarrmmvv77--mm, iiwwmmmmxxtt, iiwwmmmmxxtt22, eepp99331122.

       --mmffppuu==_n_a_m_e
       --mmffppee==_n_u_m_b_e_r
       --mmffpp==_n_u_m_b_e_r
           This specifies what floating point hardware (or hardware emulation)
           is available on the target.  Permissible names are: ffppaa, ffppee22,
           ffppee33, mmaavveerriicckk, vvffpp, vvffppvv33, vvffppvv33--dd1166 and nneeoonn.  --mmffpp and --mmffppee are
           synonyms for --mmffppuu=ffppee_n_u_m_b_e_r, for compatibility with older versions
           of GCC.

           If --mmssoofftt--ffllooaatt is specified this specifies the format of floating
           point values.

       --mmssttrruuccttuurree--ssiizzee--bboouunnddaarryy==_n
           The size of all structures and unions will be rounded up to a
           multiple of the number of bits set by this option.  Permissible
           values are 8, 32 and 64.  The default value varies for different
           toolchains.  For the COFF targeted toolchain the default value is
           8.  A value of 64 is only allowed if the underlying ABI supports
           it.

           Specifying the larger number can produce faster, more efficient
           code, but can also increase the size of the program.  Different
           values are potentially incompatible.  Code compiled with one value
           cannot necessarily expect to work with code or libraries compiled
           with another value, if they exchange information using structures
           or unions.

       --mmaabboorrtt--oonn--nnoorreettuurrnn
           Generate a call to the function "abort" at the end of a "noreturn"
           function.  It will be executed if the function tries to return.

       --mmlloonngg--ccaallllss
       --mmnnoo--lloonngg--ccaallllss
           Tells the compiler to perform function calls by first loading the
           address of the function into a register and then performing a
           subroutine call on this register.  This switch is needed if the
           target function will lie outside of the 64 megabyte addressing
           range of the offset based version of subroutine call instruction.

           Even if this switch is enabled, not all function calls will be
           turned into long calls.  The heuristic is that static functions,
           functions which have the sshhoorrtt--ccaallll attribute, functions that are
           inside the scope of a ##pprraaggmmaa nnoo__lloonngg__ccaallllss directive and functions
           whose definitions have already been compiled within the current
           compilation unit, will not be turned into long calls.  The
           exception to this rule is that weak function definitions, functions
           with the lloonngg--ccaallll attribute or the sseeccttiioonn attribute, and
           functions that are within the scope of a ##pprraaggmmaa lloonngg__ccaallllss
           directive, will always be turned into long calls.

           This feature is not enabled by default.  Specifying --mmnnoo--lloonngg--ccaallllss
           will restore the default behavior, as will placing the function
           calls within the scope of a ##pprraaggmmaa lloonngg__ccaallllss__ooffff directive.  Note
           these switches have no effect on how the compiler generates code to
           handle function calls via function pointers.

       --mmssiinnggllee--ppiicc--bbaassee
           Treat the register used for PIC addressing as read-only, rather
           than loading it in the prologue for each function.  The run-time
           system is responsible for initializing this register with an
           appropriate value before execution begins.

       --mmppiicc--rreeggiisstteerr==_r_e_g
           Specify the register to be used for PIC addressing.  The default is
           R10 unless stack-checking is enabled, when R9 is used.

       --mmcciirrrruuss--ffiixx--iinnvvaalliidd--iinnssnnss
           Insert NOPs into the instruction stream to in order to work around
           problems with invalid Maverick instruction combinations.  This
           option is only valid if the --mmccppuu==eepp99331122 option has been used to
           enable generation of instructions for the Cirrus Maverick floating
           point co-processor.  This option is not enabled by default, since
           the problem is only present in older Maverick implementations.  The
           default can be re-enabled by use of the
           --mmnnoo--cciirrrruuss--ffiixx--iinnvvaalliidd--iinnssnnss switch.

       --mmppookkee--ffuunnccttiioonn--nnaammee
           Write the name of each function into the text section, directly
           preceding the function prologue.  The generated code is similar to
           this:

                        t0
                            .ascii "arm_poke_function_name", 0
                            .align
                        t1
                            .word 0xff000000 + (t1 - t0)
                        arm_poke_function_name
                            mov     ip, sp
                            stmfd   sp!, {fp, ip, lr, pc}
                            sub     fp, ip, #4

           When performing a stack backtrace, code can inspect the value of
           "pc" stored at "fp + 0".  If the trace function then looks at
           location "pc - 12" and the top 8 bits are set, then we know that
           there is a function name embedded immediately preceding this
           location and has length "((pc[-3]) & 0xff000000)".

       --mmtthhuummbb
           Generate code for the Thumb instruction set.  The default is to use
           the 32-bit ARM instruction set.  This option automatically enables
           either 16-bit Thumb-1 or mixed 16/32-bit Thumb-2 instructions based
           on the --mmccppuu==_n_a_m_e and --mmaarrcchh==_n_a_m_e options.

       --mmttppccss--ffrraammee
           Generate a stack frame that is compliant with the Thumb Procedure
           Call Standard for all non-leaf functions.  (A leaf function is one
           that does not call any other functions.)  The default is
           --mmnnoo--ttppccss--ffrraammee.

       --mmttppccss--lleeaaff--ffrraammee
           Generate a stack frame that is compliant with the Thumb Procedure
           Call Standard for all leaf functions.  (A leaf function is one that
           does not call any other functions.)  The default is
           --mmnnoo--aappccss--lleeaaff--ffrraammee.

       --mmccaalllleeee--ssuuppeerr--iinntteerrwwoorrkkiinngg
           Gives all externally visible functions in the file being compiled
           an ARM instruction set header which switches to Thumb mode before
           executing the rest of the function.  This allows these functions to
           be called from non-interworking code.

       --mmccaalllleerr--ssuuppeerr--iinntteerrwwoorrkkiinngg
           Allows calls via function pointers (including virtual functions) to
           execute correctly regardless of whether the target code has been
           compiled for interworking or not.  There is a small overhead in the
           cost of executing a function pointer if this option is enabled.

       --mmttpp==_n_a_m_e
           Specify the access model for the thread local storage pointer.  The
           valid models are ssoofftt, which generates calls to "__aeabi_read_tp",
           ccpp1155, which fetches the thread pointer from "cp15" directly
           (supported in the arm6k architecture), and aauuttoo, which uses the
           best available method for the selected processor.  The default
           setting is aauuttoo.

       --mmwwoorrdd--rreellooccaattiioonnss
           Only generate absolute relocations on word sized values (i.e.
           R_ARM_ABS32).  This is enabled by default on targets (uClinux,
           SymbianOS) where the runtime loader imposes this restriction, and
           when --ffppiicc or --ffPPIICC is specified.

   AAVVRR OOppttiioonnss
       These options are defined for AVR implementations:

       --mmmmccuu==_m_c_u
           Specify ATMEL AVR instruction set or MCU type.

           Instruction set avr1 is for the minimal AVR core, not supported by
           the C compiler, only for assembler programs (MCU types: at90s1200,
           attiny10, attiny11, attiny12, attiny15, attiny28).

           Instruction set avr2 (default) is for the classic AVR core with up
           to 8K program memory space (MCU types: at90s2313, at90s2323,
           attiny22, at90s2333, at90s2343, at90s4414, at90s4433, at90s4434,
           at90s8515, at90c8534, at90s8535).

           Instruction set avr3 is for the classic AVR core with up to 128K
           program memory space (MCU types: atmega103, atmega603, at43usb320,
           at76c711).

           Instruction set avr4 is for the enhanced AVR core with up to 8K
           program memory space (MCU types: atmega8, atmega83, atmega85).

           Instruction set avr5 is for the enhanced AVR core with up to 128K
           program memory space (MCU types: atmega16, atmega161, atmega163,
           atmega32, atmega323, atmega64, atmega128, at43usb355, at94k).

       --mmssiizzee
           Output instruction sizes to the asm file.

       --mmnnoo--iinntteerrrruuppttss
           Generated code is not compatible with hardware interrupts.  Code
           size will be smaller.

       --mmccaallll--pprroolloogguueess
           Functions prologues/epilogues expanded as call to appropriate
           subroutines.  Code size will be smaller.

       --mmnnoo--ttaabblleejjuummpp
           Do not generate tablejump insns which sometimes increase code size.
           The option is now deprecated in favor of the equivalent
           --ffnnoo--jjuummpp--ttaabblleess

       --mmttiinnyy--ssttaacckk
           Change only the low 8 bits of the stack pointer.

       --mmiinntt88
           Assume int to be 8 bit integer.  This affects the sizes of all
           types: A char will be 1 byte, an int will be 1 byte, an long will
           be 2 bytes and long long will be 4 bytes.  Please note that this
           option does not comply to the C standards, but it will provide you
           with smaller code size.

   BBllaacckkffiinn OOppttiioonnss
       --mmccppuu==_c_p_u[--_s_i_r_e_v_i_s_i_o_n]
           Specifies the name of the target Blackfin processor.  Currently,
           _c_p_u can be one of bbff551122, bbff551144, bbff551166, bbff551188, bbff552222, bbff552233, bbff552244,
           bbff552255, bbff552266, bbff552277, bbff553311, bbff553322, bbff553333, bbff553344, bbff553366, bbff553377,
           bbff553388, bbff553399, bbff554422, bbff554444, bbff554477, bbff554488, bbff554499, bbff556611.  The
           optional _s_i_r_e_v_i_s_i_o_n specifies the silicon revision of the target
           Blackfin processor.  Any workarounds available for the targeted
           silicon revision will be enabled.  If _s_i_r_e_v_i_s_i_o_n is nnoonnee, no
           workarounds are enabled.  If _s_i_r_e_v_i_s_i_o_n is aannyy, all workarounds for
           the targeted processor will be enabled.  The "__SILICON_REVISION__"
           macro is defined to two hexadecimal digits representing the major
           and minor numbers in the silicon revision.  If _s_i_r_e_v_i_s_i_o_n is nnoonnee,
           the "__SILICON_REVISION__" is not defined.  If _s_i_r_e_v_i_s_i_o_n is aannyy,
           the "__SILICON_REVISION__" is defined to be 0xffff.  If this
           optional _s_i_r_e_v_i_s_i_o_n is not used, GCC assumes the latest known
           silicon revision of the targeted Blackfin processor.

           Support for bbff556611 is incomplete.  For bbff556611, Only the processor
           macro is defined.  Without this option, bbff553322 is used as the
           processor by default.  The corresponding predefined processor
           macros for _c_p_u is to be defined.  And for bbffiinn--eellff toolchain, this
           causes the hardware BSP provided by libgloss to be linked in if
           --mmssiimm is not given.

       --mmssiimm
           Specifies that the program will be run on the simulator.  This
           causes the simulator BSP provided by libgloss to be linked in.
           This option has effect only for bbffiinn--eellff toolchain.  Certain other
           options, such as --mmiidd--sshhaarreedd--lliibbrraarryy and --mmffddppiicc, imply --mmssiimm.

       --mmoommiitt--lleeaaff--ffrraammee--ppooiinntteerr
           Donâ€™t keep the frame pointer in a register for leaf functions.
           This avoids the instructions to save, set up and restore frame
           pointers and makes an extra register available in leaf functions.
           The option --ffoommiitt--ffrraammee--ppooiinntteerr removes the frame pointer for all
           functions which might make debugging harder.

       --mmssppeecclldd--aannoommaallyy
           When enabled, the compiler will ensure that the generated code does
           not contain speculative loads after jump instructions. If this
           option is used, "__WORKAROUND_SPECULATIVE_LOADS" is defined.

       --mmnnoo--ssppeecclldd--aannoommaallyy
           Donâ€™t generate extra code to prevent speculative loads from
           occurring.

       --mmccssyynncc--aannoommaallyy
           When enabled, the compiler will ensure that the generated code does
           not contain CSYNC or SSYNC instructions too soon after conditional
           branches.  If this option is used, "__WORKAROUND_SPECULATIVE_SYNCS"
           is defined.

       --mmnnoo--ccssyynncc--aannoommaallyy
           Donâ€™t generate extra code to prevent CSYNC or SSYNC instructions
           from occurring too soon after a conditional branch.

       --mmllooww--6644kk
           When enabled, the compiler is free to take advantage of the
           knowledge that the entire program fits into the low 64k of memory.

       --mmnnoo--llooww--6644kk
           Assume that the program is arbitrarily large.  This is the default.

       --mmssttaacckk--cchheecckk--ll11
           Do stack checking using information placed into L1 scratchpad
           memory by the uClinux kernel.

       --mmiidd--sshhaarreedd--lliibbrraarryy
           Generate code that supports shared libraries via the library ID
           method.  This allows for execute in place and shared libraries in
           an environment without virtual memory management.  This option
           implies --ffPPIICC.  With a bbffiinn--eellff target, this option implies --mmssiimm.

       --mmnnoo--iidd--sshhaarreedd--lliibbrraarryy
           Generate code that doesnâ€™t assume ID based shared libraries are
           being used.  This is the default.

       --mmlleeaaff--iidd--sshhaarreedd--lliibbrraarryy
           Generate code that supports shared libraries via the library ID
           method, but assumes that this library or executable wonâ€™t link
           against any other ID shared libraries.  That allows the compiler to
           use faster code for jumps and calls.

       --mmnnoo--lleeaaff--iidd--sshhaarreedd--lliibbrraarryy
           Do not assume that the code being compiled wonâ€™t link against any
           ID shared libraries.  Slower code will be generated for jump and
           call insns.

       --mmsshhaarreedd--lliibbrraarryy--iidd==nn
           Specified the identification number of the ID based shared library
           being compiled.  Specifying a value of 0 will generate more compact
           code, specifying other values will force the allocation of that
           number to the current library but is no more space or time
           efficient than omitting this option.

       --mmsseepp--ddaattaa
           Generate code that allows the data segment to be located in a
           different area of memory from the text segment.  This allows for
           execute in place in an environment without virtual memory
           management by eliminating relocations against the text section.

       --mmnnoo--sseepp--ddaattaa
           Generate code that assumes that the data segment follows the text
           segment.  This is the default.

       --mmlloonngg--ccaallllss
       --mmnnoo--lloonngg--ccaallllss
           Tells the compiler to perform function calls by first loading the
           address of the function into a register and then performing a
           subroutine call on this register.  This switch is needed if the
           target function will lie outside of the 24 bit addressing range of
           the offset based version of subroutine call instruction.

           This feature is not enabled by default.  Specifying --mmnnoo--lloonngg--ccaallllss
           will restore the default behavior.  Note these switches have no
           effect on how the compiler generates code to handle function calls
           via function pointers.

       --mmffaasstt--ffpp
           Link with the fast floating-point library. This library relaxes
           some of the IEEE floating-point standardâ€™s rules for checking
           inputs against Not-a-Number (NAN), in the interest of performance.

       --mmiinnlliinnee--pplltt
           Enable inlining of PLT entries in function calls to functions that
           are not known to bind locally.  It has no effect without --mmffddppiicc.

       --mmmmuullttiiccoorree
           Build standalone application for multicore Blackfin processor.
           Proper start files and link scripts will be used to support
           multicore.  This option defines "__BFIN_MULTICORE". It can only be
           used with --mmccppuu==bbff556611[--_s_i_r_e_v_i_s_i_o_n]. It can be used with --mmccoorreeaa or
           --mmccoorreebb. If itâ€™s used without --mmccoorreeaa or --mmccoorreebb, single
           application/dual core programming model is used. In this model, the
           main function of Core B should be named as coreb_main. If itâ€™s used
           with --mmccoorreeaa or --mmccoorreebb, one application per core programming model
           is used.  If this option is not used, single core application
           programming model is used.

       --mmccoorreeaa
           Build standalone application for Core A of BF561 when using one
           application per core programming model. Proper start files and link
           scripts will be used to support Core A. This option defines
           "__BFIN_COREA". It must be used with --mmmmuullttiiccoorree.

       --mmccoorreebb
           Build standalone application for Core B of BF561 when using one
           application per core programming model. Proper start files and link
           scripts will be used to support Core B. This option defines
           "__BFIN_COREB". When this option is used, coreb_main should be used
           instead of main. It must be used with --mmmmuullttiiccoorree.

       --mmssddrraamm
           Build standalone application for SDRAM. Proper start files and link
           scripts will be used to put the application into SDRAM.  Loader
           should initialize SDRAM before loading the application into SDRAM.
           This option defines "__BFIN_SDRAM".

       --mmiiccppllbb
           Assume that ICPLBs are enabled at runtime.  This has an effect on
           certain anomaly workarounds.  For Linux targets, the default is to
           assume ICPLBs are enabled; for standalone applications the default
           is off.

   CCRRIISS OOppttiioonnss
       These options are defined specifically for the CRIS ports.

       --mmaarrcchh==_a_r_c_h_i_t_e_c_t_u_r_e_-_t_y_p_e
       --mmccppuu==_a_r_c_h_i_t_e_c_t_u_r_e_-_t_y_p_e
           Generate code for the specified architecture.  The choices for
           _a_r_c_h_i_t_e_c_t_u_r_e_-_t_y_p_e are vv33, vv88 and vv1100 for respectively ETRAX 4,
           ETRAX 100, and ETRAX 100 LX.  Default is vv00 except for cris-axis-
           linux-gnu, where the default is vv1100.

       --mmttuunnee==_a_r_c_h_i_t_e_c_t_u_r_e_-_t_y_p_e
           Tune to _a_r_c_h_i_t_e_c_t_u_r_e_-_t_y_p_e everything applicable about the generated
           code, except for the ABI and the set of available instructions.
           The choices for _a_r_c_h_i_t_e_c_t_u_r_e_-_t_y_p_e are the same as for
           --mmaarrcchh==_a_r_c_h_i_t_e_c_t_u_r_e_-_t_y_p_e.

       --mmmmaaxx--ssttaacckk--ffrraammee==_n
           Warn when the stack frame of a function exceeds _n bytes.

       --mmeettrraaxx44
       --mmeettrraaxx110000
           The options --mmeettrraaxx44 and --mmeettrraaxx110000 are synonyms for --mmaarrcchh==vv33 and
           --mmaarrcchh==vv88 respectively.

       --mmmmuull--bbuugg--wwoorrkkaarroouunndd
       --mmnnoo--mmuull--bbuugg--wwoorrkkaarroouunndd
           Work around a bug in the "muls" and "mulu" instructions for CPU
           models where it applies.  This option is active by default.

       --mmppddeebbuugg
           Enable CRIS-specific verbose debug-related information in the
           assembly code.  This option also has the effect to turn off the
           ##NNOO__AAPPPP formatted-code indicator to the assembler at the beginning
           of the assembly file.

       --mmcccc--iinniitt
           Do not use condition-code results from previous instruction; always
           emit compare and test instructions before use of condition codes.

       --mmnnoo--ssiiddee--eeffffeeccttss
           Do not emit instructions with side-effects in addressing modes
           other than post-increment.

       --mmssttaacckk--aalliiggnn
       --mmnnoo--ssttaacckk--aalliiggnn
       --mmddaattaa--aalliiggnn
       --mmnnoo--ddaattaa--aalliiggnn
       --mmccoonnsstt--aalliiggnn
       --mmnnoo--ccoonnsstt--aalliiggnn
           These options (no-options) arranges (eliminate arrangements) for
           the stack-frame, individual data and constants to be aligned for
           the maximum single data access size for the chosen CPU model.  The
           default is to arrange for 32-bit alignment.  ABI details such as
           structure layout are not affected by these options.

       --mm3322--bbiitt
       --mm1166--bbiitt
       --mm88--bbiitt
           Similar to the stack- data- and const-align options above, these
           options arrange for stack-frame, writable data and constants to all
           be 32-bit, 16-bit or 8-bit aligned.  The default is 32-bit
           alignment.

       --mmnnoo--pprroolloogguuee--eeppiilloogguuee
       --mmpprroolloogguuee--eeppiilloogguuee
           With --mmnnoo--pprroolloogguuee--eeppiilloogguuee, the normal function prologue and
           epilogue that sets up the stack-frame are omitted and no return
           instructions or return sequences are generated in the code.  Use
           this option only together with visual inspection of the compiled
           code: no warnings or errors are generated when call-saved registers
           must be saved, or storage for local variable needs to be allocated.

       --mmnnoo--ggoottpplltt
       --mmggoottpplltt
           With --ffppiicc and --ffPPIICC, donâ€™t generate (do generate) instruction
           sequences that load addresses for functions from the PLT part of
           the GOT rather than (traditional on other architectures) calls to
           the PLT.  The default is --mmggoottpplltt.

       --mmeellff
           Legacy no-op option only recognized with the cris-axis-elf and
           cris-axis-linux-gnu targets.

       --mmlliinnuuxx
           Legacy no-op option only recognized with the cris-axis-linux-gnu
           target.

       --ssiimm
           This option, recognized for the cris-axis-elf arranges to link with
           input-output functions from a simulator library.  Code, initialized
           data and zero-initialized data are allocated consecutively.

       --ssiimm22
           Like --ssiimm, but pass linker options to locate initialized data at
           0x40000000 and zero-initialized data at 0x80000000.

   CCRRXX OOppttiioonnss
       These options are defined specifically for the CRX ports.

       --mmmmaacc
           Enable the use of multiply-accumulate instructions. Disabled by
           default.

       --mmppuusshh--aarrggss
           Push instructions will be used to pass outgoing arguments when
           functions are called. Enabled by default.

   DDaarrwwiinn OOppttiioonnss
       These options are defined for all architectures running the Darwin
       operating system.

       FSF GCC on Darwin does not create "fat" object files; it will create an
       object file for the single architecture that it was built to target.
       Appleâ€™s GCC on Darwin does create "fat" files if multiple --aarrcchh options
       are used; it does so by running the compiler or linker multiple times
       and joining the results together with _l_i_p_o.

       The subtype of the file created (like ppppcc77440000 or ppppcc997700 or ii668866) is
       determined by the flags that specify the ISA that GCC is targetting,
       like --mmccppuu or --mmaarrcchh.  The --ffoorrccee__ccppuussuubbttyyppee__AALLLL option can be used to
       override this.

       The Darwin tools vary in their behavior when presented with an ISA
       mismatch.  The assembler, _a_s, will only permit instructions to be used
       that are valid for the subtype of the file it is generating, so you
       cannot put 64-bit instructions in an ppppcc775500 object file.  The linker
       for shared libraries, _/_u_s_r_/_b_i_n_/_l_i_b_t_o_o_l, will fail and print an error if
       asked to create a shared library with a less restrictive subtype than
       its input files (for instance, trying to put a ppppcc997700 object file in a
       ppppcc77440000 library).  The linker for executables, _l_d, will quietly give
       the executable the most restrictive subtype of any of its input files.

       --FF_d_i_r
           Add the framework directory _d_i_r to the head of the list of
           directories to be searched for header files.  These directories are
           interleaved with those specified by --II options and are scanned in a
           left-to-right order.

           A framework directory is a directory with frameworks in it.  A
           framework is a directory with a ""HHeeaaddeerrss"" and/or ""PPrriivvaatteeHHeeaaddeerrss""
           directory contained directly in it that ends in ""..ffrraammeewwoorrkk"".  The
           name of a framework is the name of this directory excluding the
           ""..ffrraammeewwoorrkk"".  Headers associated with the framework are found in
           one of those two directories, with ""HHeeaaddeerrss"" being searched first.
           A subframework is a framework directory that is in a frameworkâ€™s
           ""FFrraammeewwoorrkkss"" directory.  Includes of subframework headers can only
           appear in a header of a framework that contains the subframework,
           or in a sibling subframework header.  Two subframeworks are
           siblings if they occur in the same framework.  A subframework
           should not have the same name as a framework, a warning will be
           issued if this is violated.  Currently a subframework cannot have
           subframeworks, in the future, the mechanism may be extended to
           support this.  The standard frameworks can be found in
           ""//SSyysstteemm//LLiibbrraarryy//FFrraammeewwoorrkkss"" and ""//LLiibbrraarryy//FFrraammeewwoorrkkss"".  An example
           include looks like "#include <Framework/header.h>", where FFrraammeewwoorrkk
           denotes the name of the framework and header.h is found in the
           ""PPrriivvaatteeHHeeaaddeerrss"" or ""HHeeaaddeerrss"" directory.

       --iiffrraammeewwoorrkk_d_i_r
           Like --FF except the directory is a treated as a system directory.
           The main difference between this --iiffrraammeewwoorrkk and --FF is that with
           --iiffrraammeewwoorrkk the compiler does not warn about constructs contained
           within header files found via _d_i_r.  This option is valid only for
           the C family of languages.

       --gguusseedd
           Emit debugging information for symbols that are used.  For STABS
           debugging format, this enables --ffeelliimmiinnaattee--uunnuusseedd--ddeebbuugg--ssyymmbboollss.
           This is by default ON.

       --ggffuullll
           Emit debugging information for all symbols and types.

       --mmmmaaccoossxx--vveerrssiioonn--mmiinn==_v_e_r_s_i_o_n
           The earliest version of MacOS X that this executable will run on is
           _v_e_r_s_i_o_n.  Typical values of _v_e_r_s_i_o_n include 10.1, 10.2, and 10.3.9.

           If the compiler was built to use the systemâ€™s headers by default,
           then the default for this option is the system version on which the
           compiler is running, otherwise the default is to make choices which
           are compatible with as many systems and code bases as possible.

       --mmkkeerrnneell
           Enable kernel development mode.  The --mmkkeerrnneell option sets --ssttaattiicc,
           --ffnnoo--ccoommmmoonn, --ffnnoo--ccxxaa--aatteexxiitt, --ffnnoo--eexxcceeppttiioonnss,
           --ffnnoo--nnoonn--ccaallll--eexxcceeppttiioonnss, --ffaappppllee--kkeexxtt, --ffnnoo--wweeaakk and --ffnnoo--rrttttii
           where applicable.  This mode also sets --mmnnoo--aallttiivveecc, --mmssoofftt--ffllooaatt,
           --ffnnoo--bbuuiillttiinn and --mmlloonngg--bbrraanncchh for PowerPC targets.

       --mmoonnee--bbyyttee--bbooooll
           Override the defaults for bbooooll so that ssiizzeeooff((bbooooll))====11.  By default
           ssiizzeeooff((bbooooll)) is 44 when compiling for Darwin/PowerPC and 11 when
           compiling for Darwin/x86, so this option has no effect on x86.

           WWaarrnniinngg:: The --mmoonnee--bbyyttee--bbooooll switch causes GCC to generate code
           that is not binary compatible with code generated without that
           switch.  Using this switch may require recompiling all other
           modules in a program, including system libraries.  Use this switch
           to conform to a non-default data model.

       --mmffiixx--aanndd--ccoonnttiinnuuee
       --ffffiixx--aanndd--ccoonnttiinnuuee
       --ffiinnddiirreecctt--ddaattaa
           Generate code suitable for fast turn around development.  Needed to
           enable gdb to dynamically load ".o" files into already running
           programs.  --ffiinnddiirreecctt--ddaattaa and --ffffiixx--aanndd--ccoonnttiinnuuee are provided for
           backwards compatibility.

       --aallll__llooaadd
           Loads all members of static archive libraries.  See man _l_d(1) for
           more information.

       --aarrcchh__eerrrroorrss__ffaattaall
           Cause the errors having to do with files that have the wrong
           architecture to be fatal.

       --bbiinndd__aatt__llooaadd
           Causes the output file to be marked such that the dynamic linker
           will bind all undefined references when the file is loaded or
           launched.

       --bbuunnddllee
           Produce a Mach-o bundle format file.  See man _l_d(1) for more
           information.

       --bbuunnddllee__llooaaddeerr _e_x_e_c_u_t_a_b_l_e
           This option specifies the _e_x_e_c_u_t_a_b_l_e that will be loading the build
           output file being linked.  See man _l_d(1) for more information.

       --ddyynnaammiicclliibb
           When passed this option, GCC will produce a dynamic library instead
           of an executable when linking, using the Darwin _l_i_b_t_o_o_l command.

       --ffoorrccee__ccppuussuubbttyyppee__AALLLL
           This causes GCCâ€™s output file to have the _A_L_L subtype, instead of
           one controlled by the --mmccppuu or --mmaarrcchh option.

       --aalllloowwaabbllee__cclliieenntt  _c_l_i_e_n_t___n_a_m_e
       --cclliieenntt__nnaammee
       --ccoommppaattiibbiilliittyy__vveerrssiioonn
       --ccuurrrreenntt__vveerrssiioonn
       --ddeeaadd__ssttrriipp
       --ddeeppeennddeennccyy--ffiillee
       --ddyylliibb__ffiillee
       --ddyylliinnkkeerr__iinnssttaallll__nnaammee
       --ddyynnaammiicc
       --eexxppoorrtteedd__ssyymmbboollss__lliisstt
       --ffiilleelliisstt
       --ffllaatt__nnaammeessppaaccee
       --ffoorrccee__ffllaatt__nnaammeessppaaccee
       --hheeaaddeerrppaadd__mmaaxx__iinnssttaallll__nnaammeess
       --iimmaaggee__bbaassee
       --iinniitt
       --iinnssttaallll__nnaammee
       --kkeeeepp__pprriivvaattee__eexxtteerrnnss
       --mmuullttii__mmoodduullee
       --mmuullttiippllyy__ddeeffiinneedd
       --mmuullttiippllyy__ddeeffiinneedd__uunnuusseedd
       --nnooaallll__llooaadd
       --nnoo__ddeeaadd__ssttrriipp__iinniittss__aanndd__tteerrmmss
       --nnooffiixxpprreebbiinnddiinngg
       --nnoommuullttiiddeeffss
       --nnoopprreebbiinndd
       --nnoosseegglliinnkkeeddiitt
       --ppaaggeezzeerroo__ssiizzee
       --pprreebbiinndd
       --pprreebbiinndd__aallll__ttwwoolleevveell__mmoodduulleess
       --pprriivvaattee__bbuunnddllee
       --rreeaadd__oonnllyy__rreellooccss
       --sseeccttaalliiggnn
       --sseeccttoobbjjeeccttssyymmbboollss
       --wwhhyyllooaadd
       --sseegg11aaddddrr
       --sseeccttccrreeaattee
       --sseeccttoobbjjeeccttssyymmbboollss
       --sseeccttoorrddeerr
       --sseeggaaddddrr
       --sseeggss__rreeaadd__oonnllyy__aaddddrr
       --sseeggss__rreeaadd__wwrriittee__aaddddrr
       --sseegg__aaddddrr__ttaabbllee
       --sseegg__aaddddrr__ttaabbllee__ffiilleennaammee
       --sseegglliinnkkeeddiitt
       --sseeggpprroott
       --sseeggss__rreeaadd__oonnllyy__aaddddrr
       --sseeggss__rreeaadd__wwrriittee__aaddddrr
       --ssiinnggllee__mmoodduullee
       --ssttaattiicc
       --ssuubb__lliibbrraarryy
       --ssuubb__uummbbrreellllaa
       --ttwwoolleevveell__nnaammeessppaaccee
       --uummbbrreellllaa
       --uunnddeeffiinneedd
       --uunneexxppoorrtteedd__ssyymmbboollss__lliisstt
       --wweeaakk__rreeffeerreennccee__mmiissmmaattcchheess
       --wwhhaattssllooaaddeedd
           These options are passed to the Darwin linker.  The Darwin linker
           man page describes them in detail.

   DDEECC AAllpphhaa OOppttiioonnss
       These --mm options are defined for the DEC Alpha implementations:

       --mmnnoo--ssoofftt--ffllooaatt
       --mmssoofftt--ffllooaatt
           Use (do not use) the hardware floating-point instructions for
           floating-point operations.  When --mmssoofftt--ffllooaatt is specified,
           functions in _l_i_b_g_c_c_._a will be used to perform floating-point
           operations.  Unless they are replaced by routines that emulate the
           floating-point operations, or compiled in such a way as to call
           such emulations routines, these routines will issue floating-point
           operations.   If you are compiling for an Alpha without floating-
           point operations, you must ensure that the library is built so as
           not to call them.

           Note that Alpha implementations without floating-point operations
           are required to have floating-point registers.

       --mmffpp--rreegg
       --mmnnoo--ffpp--rreeggss
           Generate code that uses (does not use) the floating-point register
           set.  --mmnnoo--ffpp--rreeggss implies --mmssoofftt--ffllooaatt.  If the floating-point
           register set is not used, floating point operands are passed in
           integer registers as if they were integers and floating-point
           results are passed in $0 instead of $f0.  This is a non-standard
           calling sequence, so any function with a floating-point argument or
           return value called by code compiled with --mmnnoo--ffpp--rreeggss must also be
           compiled with that option.

           A typical use of this option is building a kernel that does not
           use, and hence need not save and restore, any floating-point
           registers.

       --mmiieeeeee
           The Alpha architecture implements floating-point hardware optimized
           for maximum performance.  It is mostly compliant with the IEEE
           floating point standard.  However, for full compliance, software
           assistance is required.  This option generates code fully IEEE
           compliant code _e_x_c_e_p_t that the _i_n_e_x_a_c_t_-_f_l_a_g is not maintained (see
           below).  If this option is turned on, the preprocessor macro
           "_IEEE_FP" is defined during compilation.  The resulting code is
           less efficient but is able to correctly support denormalized
           numbers and exceptional IEEE values such as not-a-number and
           plus/minus infinity.  Other Alpha compilers call this option
           --iieeeeee__wwiitthh__nnoo__iinneexxaacctt.

       --mmiieeeeee--wwiitthh--iinneexxaacctt
           This is like --mmiieeeeee except the generated code also maintains the
           IEEE _i_n_e_x_a_c_t_-_f_l_a_g.  Turning on this option causes the generated
           code to implement fully-compliant IEEE math.  In addition to
           "_IEEE_FP", "_IEEE_FP_EXACT" is defined as a preprocessor macro.
           On some Alpha implementations the resulting code may execute
           significantly slower than the code generated by default.  Since
           there is very little code that depends on the _i_n_e_x_a_c_t_-_f_l_a_g, you
           should normally not specify this option.  Other Alpha compilers
           call this option --iieeeeee__wwiitthh__iinneexxaacctt.

       --mmffpp--ttrraapp--mmooddee==_t_r_a_p_-_m_o_d_e
           This option controls what floating-point related traps are enabled.
           Other Alpha compilers call this option --ffppttmm _t_r_a_p_-_m_o_d_e.  The trap
           mode can be set to one of four values:

           nn   This is the default (normal) setting.  The only traps that are
               enabled are the ones that cannot be disabled in software (e.g.,
               division by zero trap).

           uu   In addition to the traps enabled by nn, underflow traps are
               enabled as well.

           ssuu  Like uu, but the instructions are marked to be safe for software
               completion (see Alpha architecture manual for details).

           ssuuii Like ssuu, but inexact traps are enabled as well.

       --mmffpp--rroouunnddiinngg--mmooddee==_r_o_u_n_d_i_n_g_-_m_o_d_e
           Selects the IEEE rounding mode.  Other Alpha compilers call this
           option --ffpprrmm _r_o_u_n_d_i_n_g_-_m_o_d_e.  The _r_o_u_n_d_i_n_g_-_m_o_d_e can be one of:

           nn   Normal IEEE rounding mode.  Floating point numbers are rounded
               towards the nearest machine number or towards the even machine
               number in case of a tie.

           mm   Round towards minus infinity.

           cc   Chopped rounding mode.  Floating point numbers are rounded
               towards zero.

           dd   Dynamic rounding mode.  A field in the floating point control
               register (_f_p_c_r, see Alpha architecture reference manual)
               controls the rounding mode in effect.  The C library
               initializes this register for rounding towards plus infinity.
               Thus, unless your program modifies the _f_p_c_r, dd corresponds to
               round towards plus infinity.

       --mmttrraapp--pprreecciissiioonn==_t_r_a_p_-_p_r_e_c_i_s_i_o_n
           In the Alpha architecture, floating point traps are imprecise.
           This means without software assistance it is impossible to recover
           from a floating trap and program execution normally needs to be
           terminated.  GCC can generate code that can assist operating system
           trap handlers in determining the exact location that caused a
           floating point trap.  Depending on the requirements of an
           application, different levels of precisions can be selected:

           pp   Program precision.  This option is the default and means a trap
               handler can only identify which program caused a floating point
               exception.

           ff   Function precision.  The trap handler can determine the
               function that caused a floating point exception.

           ii   Instruction precision.  The trap handler can determine the
               exact instruction that caused a floating point exception.

           Other Alpha compilers provide the equivalent options called
           --ssccooppee__ssaaffee and --rreessuummppttiioonn__ssaaffee.

       --mmiieeeeee--ccoonnffoorrmmaanntt
           This option marks the generated code as IEEE conformant.  You must
           not use this option unless you also specify --mmttrraapp--pprreecciissiioonn==ii and
           either --mmffpp--ttrraapp--mmooddee==ssuu or --mmffpp--ttrraapp--mmooddee==ssuuii.  Its only effect is
           to emit the line ..eeffllaagg 4488 in the function prologue of the
           generated assembly file.  Under DEC Unix, this has the effect that
           IEEE-conformant math library routines will be linked in.

       --mmbbuuiilldd--ccoonnssttaannttss
           Normally GCC examines a 32- or 64-bit integer constant to see if it
           can construct it from smaller constants in two or three
           instructions.  If it cannot, it will output the constant as a
           literal and generate code to load it from the data segment at
           runtime.

           Use this option to require GCC to construct _a_l_l integer constants
           using code, even if it takes more instructions (the maximum is
           six).

           You would typically use this option to build a shared library
           dynamic loader.  Itself a shared library, it must relocate itself
           in memory before it can find the variables and constants in its own
           data segment.

       --mmaallpphhaa--aass
       --mmggaass
           Select whether to generate code to be assembled by the vendor-
           supplied assembler (--mmaallpphhaa--aass) or by the GNU assembler --mmggaass.

       --mmbbwwxx
       --mmnnoo--bbwwxx
       --mmcciixx
       --mmnnoo--cciixx
       --mmffiixx
       --mmnnoo--ffiixx
       --mmmmaaxx
       --mmnnoo--mmaaxx
           Indicate whether GCC should generate code to use the optional BWX,
           CIX, FIX and MAX instruction sets.  The default is to use the
           instruction sets supported by the CPU type specified via --mmccppuu==
           option or that of the CPU on which GCC was built if none was
           specified.

       --mmffllooaatt--vvaaxx
       --mmffllooaatt--iieeeeee
           Generate code that uses (does not use) VAX F and G floating point
           arithmetic instead of IEEE single and double precision.

       --mmeexxpplliicciitt--rreellooccss
       --mmnnoo--eexxpplliicciitt--rreellooccss
           Older Alpha assemblers provided no way to generate symbol
           relocations except via assembler macros.  Use of these macros does
           not allow optimal instruction scheduling.  GNU binutils as of
           version 2.12 supports a new syntax that allows the compiler to
           explicitly mark which relocations should apply to which
           instructions.  This option is mostly useful for debugging, as GCC
           detects the capabilities of the assembler when it is built and sets
           the default accordingly.

       --mmssmmaallll--ddaattaa
       --mmllaarrggee--ddaattaa
           When --mmeexxpplliicciitt--rreellooccss is in effect, static data is accessed via
           _g_p_-_r_e_l_a_t_i_v_e relocations.  When --mmssmmaallll--ddaattaa is used, objects 8
           bytes long or smaller are placed in a _s_m_a_l_l _d_a_t_a _a_r_e_a (the ".sdata"
           and ".sbss" sections) and are accessed via 16-bit relocations off
           of the $gp register.  This limits the size of the small data area
           to 64KB, but allows the variables to be directly accessed via a
           single instruction.

           The default is --mmllaarrggee--ddaattaa.  With this option the data area is
           limited to just below 2GB.  Programs that require more than 2GB of
           data must use "malloc" or "mmap" to allocate the data in the heap
           instead of in the programâ€™s data segment.

           When generating code for shared libraries, --ffppiicc implies
           --mmssmmaallll--ddaattaa and --ffPPIICC implies --mmllaarrggee--ddaattaa.

       --mmssmmaallll--tteexxtt
       --mmllaarrggee--tteexxtt
           When --mmssmmaallll--tteexxtt is used, the compiler assumes that the code of
           the entire program (or shared library) fits in 4MB, and is thus
           reachable with a branch instruction.  When --mmssmmaallll--ddaattaa is used,
           the compiler can assume that all local symbols share the same $gp
           value, and thus reduce the number of instructions required for a
           function call from 4 to 1.

           The default is --mmllaarrggee--tteexxtt.

       --mmccppuu==_c_p_u___t_y_p_e
           Set the instruction set and instruction scheduling parameters for
           machine type _c_p_u___t_y_p_e.  You can specify either the EEVV style name or
           the corresponding chip number.  GCC supports scheduling parameters
           for the EV4, EV5 and EV6 family of processors and will choose the
           default values for the instruction set from the processor you
           specify.  If you do not specify a processor type, GCC will default
           to the processor on which the compiler was built.

           Supported values for _c_p_u___t_y_p_e are

           eevv44
           eevv4455
           2211006644
               Schedules as an EV4 and has no instruction set extensions.

           eevv55
           2211116644
               Schedules as an EV5 and has no instruction set extensions.

           eevv5566
           2211116644aa
               Schedules as an EV5 and supports the BWX extension.

           ppccaa5566
           2211116644ppcc
           2211116644PPCC
               Schedules as an EV5 and supports the BWX and MAX extensions.

           eevv66
           2211226644
               Schedules as an EV6 and supports the BWX, FIX, and MAX
               extensions.

           eevv6677
           2211226644aa
               Schedules as an EV6 and supports the BWX, CIX, FIX, and MAX
               extensions.

           Native Linux/GNU toolchains also support the value nnaattiivvee, which
           selects the best architecture option for the host processor.
           --mmccppuu==nnaattiivvee has no effect if GCC does not recognize the processor.

       --mmttuunnee==_c_p_u___t_y_p_e
           Set only the instruction scheduling parameters for machine type
           _c_p_u___t_y_p_e.  The instruction set is not changed.

           Native Linux/GNU toolchains also support the value nnaattiivvee, which
           selects the best architecture option for the host processor.
           --mmttuunnee==nnaattiivvee has no effect if GCC does not recognize the
           processor.

       --mmmmeemmoorryy--llaatteennccyy==_t_i_m_e
           Sets the latency the scheduler should assume for typical memory
           references as seen by the application.  This number is highly
           dependent on the memory access patterns used by the application and
           the size of the external cache on the machine.

           Valid options for _t_i_m_e are

           _n_u_m_b_e_r
               A decimal number representing clock cycles.

           LL11
           LL22
           LL33
           mmaaiinn
               The compiler contains estimates of the number of clock cycles
               for "typical" EV4 & EV5 hardware for the Level 1, 2 & 3 caches
               (also called Dcache, Scache, and Bcache), as well as to main
               memory.  Note that L3 is only valid for EV5.

   DDEECC AAllpphhaa//VVMMSS OOppttiioonnss
       These --mm options are defined for the DEC Alpha/VMS implementations:

       --mmvvmmss--rreettuurrnn--ccooddeess
           Return VMS condition codes from main.  The default is to return
           POSIX style condition (e.g. error) codes.

   FFRR3300 OOppttiioonnss
       These options are defined specifically for the FR30 port.

       --mmssmmaallll--mmooddeell
           Use the small address space model.  This can produce smaller code,
           but it does assume that all symbolic values and addresses will fit
           into a 20-bit range.

       --mmnnoo--llssiimm
           Assume that run-time support has been provided and so there is no
           need to include the simulator library (_l_i_b_s_i_m_._a) on the linker
           command line.

   FFRRVV OOppttiioonnss
       --mmggpprr--3322
           Only use the first 32 general purpose registers.

       --mmggpprr--6644
           Use all 64 general purpose registers.

       --mmffpprr--3322
           Use only the first 32 floating point registers.

       --mmffpprr--6644
           Use all 64 floating point registers

       --mmhhaarrdd--ffllooaatt
           Use hardware instructions for floating point operations.

       --mmssoofftt--ffllooaatt
           Use library routines for floating point operations.

       --mmaalllloocc--cccc
           Dynamically allocate condition code registers.

       --mmffiixxeedd--cccc
           Do not try to dynamically allocate condition code registers, only
           use "icc0" and "fcc0".

       --mmddwwoorrdd
           Change ABI to use double word insns.

       --mmnnoo--ddwwoorrdd
           Do not use double word instructions.

       --mmddoouubbllee
           Use floating point double instructions.

       --mmnnoo--ddoouubbllee
           Do not use floating point double instructions.

       --mmmmeeddiiaa
           Use media instructions.

       --mmnnoo--mmeeddiiaa
           Do not use media instructions.

       --mmmmuullaadddd
           Use multiply and add/subtract instructions.

       --mmnnoo--mmuullaadddd
           Do not use multiply and add/subtract instructions.

       --mmffddppiicc
           Select the FDPIC ABI, that uses function descriptors to represent
           pointers to functions.  Without any PIC/PIE-related options, it
           implies --ffPPIIEE.  With --ffppiicc or --ffppiiee, it assumes GOT entries and
           small data are within a 12-bit range from the GOT base address;
           with --ffPPIICC or --ffPPIIEE, GOT offsets are computed with 32 bits.  With a
           bbffiinn--eellff target, this option implies --mmssiimm.

       --mmiinnlliinnee--pplltt
           Enable inlining of PLT entries in function calls to functions that
           are not known to bind locally.  It has no effect without --mmffddppiicc.
           Itâ€™s enabled by default if optimizing for speed and compiling for
           shared libraries (i.e., --ffPPIICC or --ffppiicc), or when an optimization
           option such as --OO33 or above is present in the command line.

       --mmTTLLSS
           Assume a large TLS segment when generating thread-local code.

       --mmttllss
           Do not assume a large TLS segment when generating thread-local
           code.

       --mmggpprreell--rroo
           Enable the use of "GPREL" relocations in the FDPIC ABI for data
           that is known to be in read-only sections.  Itâ€™s enabled by
           default, except for --ffppiicc or --ffppiiee: even though it may help make
           the global offset table smaller, it trades 1 instruction for 4.
           With --ffPPIICC or --ffPPIIEE, it trades 3 instructions for 4, one of which
           may be shared by multiple symbols, and it avoids the need for a GOT
           entry for the referenced symbol, so itâ€™s more likely to be a win.
           If it is not, --mmnnoo--ggpprreell--rroo can be used to disable it.

       --mmuullttiilliibb--lliibbrraarryy--ppiicc
           Link with the (library, not FD) pic libraries.  Itâ€™s implied by
           --mmlliibbrraarryy--ppiicc, as well as by --ffPPIICC and --ffppiicc without --mmffddppiicc.  You
           should never have to use it explicitly.

       --mmlliinnkkeedd--ffpp
           Follow the EABI requirement of always creating a frame pointer
           whenever a stack frame is allocated.  This option is enabled by
           default and can be disabled with --mmnnoo--lliinnkkeedd--ffpp.

       --mmlloonngg--ccaallllss
           Use indirect addressing to call functions outside the current
           compilation unit.  This allows the functions to be placed anywhere
           within the 32-bit address space.

       --mmaalliiggnn--llaabbeellss
           Try to align labels to an 8-byte boundary by inserting nops into
           the previous packet.  This option only has an effect when VLIW
           packing is enabled.  It doesnâ€™t create new packets; it merely adds
           nops to existing ones.

       --mmlliibbrraarryy--ppiicc
           Generate position-independent EABI code.

       --mmaacccc--44
           Use only the first four media accumulator registers.

       --mmaacccc--88
           Use all eight media accumulator registers.

       --mmppaacckk
           Pack VLIW instructions.

       --mmnnoo--ppaacckk
           Do not pack VLIW instructions.

       --mmnnoo--eeffllaaggss
           Do not mark ABI switches in e_flags.

       --mmccoonndd--mmoovvee
           Enable the use of conditional-move instructions (default).

           This switch is mainly for debugging the compiler and will likely be
           removed in a future version.

       --mmnnoo--ccoonndd--mmoovvee
           Disable the use of conditional-move instructions.

           This switch is mainly for debugging the compiler and will likely be
           removed in a future version.

       --mmsscccc
           Enable the use of conditional set instructions (default).

           This switch is mainly for debugging the compiler and will likely be
           removed in a future version.

       --mmnnoo--sscccc
           Disable the use of conditional set instructions.

           This switch is mainly for debugging the compiler and will likely be
           removed in a future version.

       --mmccoonndd--eexxeecc
           Enable the use of conditional execution (default).

           This switch is mainly for debugging the compiler and will likely be
           removed in a future version.

       --mmnnoo--ccoonndd--eexxeecc
           Disable the use of conditional execution.

           This switch is mainly for debugging the compiler and will likely be
           removed in a future version.

       --mmvvlliiww--bbrraanncchh
           Run a pass to pack branches into VLIW instructions (default).

           This switch is mainly for debugging the compiler and will likely be
           removed in a future version.

       --mmnnoo--vvlliiww--bbrraanncchh
           Do not run a pass to pack branches into VLIW instructions.

           This switch is mainly for debugging the compiler and will likely be
           removed in a future version.

       --mmmmuullttii--ccoonndd--eexxeecc
           Enable optimization of "&&" and "||" in conditional execution
           (default).

           This switch is mainly for debugging the compiler and will likely be
           removed in a future version.

       --mmnnoo--mmuullttii--ccoonndd--eexxeecc
           Disable optimization of "&&" and "||" in conditional execution.

           This switch is mainly for debugging the compiler and will likely be
           removed in a future version.

       --mmnneesstteedd--ccoonndd--eexxeecc
           Enable nested conditional execution optimizations (default).

           This switch is mainly for debugging the compiler and will likely be
           removed in a future version.

       --mmnnoo--nneesstteedd--ccoonndd--eexxeecc
           Disable nested conditional execution optimizations.

           This switch is mainly for debugging the compiler and will likely be
           removed in a future version.

       --mmooppttiimmiizzee--mmeemmbbaarr
           This switch removes redundant "membar" instructions from the
           compiler generated code.  It is enabled by default.

       --mmnnoo--ooppttiimmiizzee--mmeemmbbaarr
           This switch disables the automatic removal of redundant "membar"
           instructions from the generated code.

       --mmttoommccaatt--ssttaattss
           Cause gas to print out tomcat statistics.

       --mmccppuu==_c_p_u
           Select the processor type for which to generate code.  Possible
           values are ffrrvv, ffrr555500, ttoommccaatt, ffrr550000, ffrr445500, ffrr440055, ffrr440000, ffrr330000
           and ssiimmppllee.

   GGNNUU//LLiinnuuxx OOppttiioonnss
       These --mm options are defined for GNU/Linux targets:

       --mmgglliibbcc
           Use the GNU C library instead of uClibc.  This is the default
           except on **--**--lliinnuuxx--**uucclliibbcc** targets.

       --mmuucclliibbcc
           Use uClibc instead of the GNU C library.  This is the default on
           **--**--lliinnuuxx--**uucclliibbcc** targets.

   HH88//330000 OOppttiioonnss
       These --mm options are defined for the H8/300 implementations:

       --mmrreellaaxx
           Shorten some address references at link time, when possible; uses
           the linker option --rreellaaxx.

       --mmhh Generate code for the H8/300H.

       --mmss Generate code for the H8S.

       --mmnn Generate code for the H8S and H8/300H in the normal mode.  This
           switch must be used either with --mmhh or --mmss.

       --mmss22660000
           Generate code for the H8S/2600.  This switch must be used with --mmss.

       --mmiinntt3322
           Make "int" data 32 bits by default.

       --mmaalliiggnn--330000
           On the H8/300H and H8S, use the same alignment rules as for the
           H8/300.  The default for the H8/300H and H8S is to align longs and
           floats on 4 byte boundaries.  --mmaalliiggnn--330000 causes them to be aligned
           on 2 byte boundaries.  This option has no effect on the H8/300.

   HHPPPPAA OOppttiioonnss
       These --mm options are defined for the HPPA family of computers:

       --mmaarrcchh==_a_r_c_h_i_t_e_c_t_u_r_e_-_t_y_p_e
           Generate code for the specified architecture.  The choices for
           _a_r_c_h_i_t_e_c_t_u_r_e_-_t_y_p_e are 11..00 for PA 1.0, 11..11 for PA 1.1, and 22..00 for
           PA 2.0 processors.  Refer to _/_u_s_r_/_l_i_b_/_s_c_h_e_d_._m_o_d_e_l_s on an HP-UX
           system to determine the proper architecture option for your
           machine.  Code compiled for lower numbered architectures will run
           on higher numbered architectures, but not the other way around.

       --mmppaa--rriisscc--11--00
       --mmppaa--rriisscc--11--11
       --mmppaa--rriisscc--22--00
           Synonyms for --mmaarrcchh==11..00, --mmaarrcchh==11..11, and --mmaarrcchh==22..00 respectively.

       --mmbbiigg--sswwiittcchh
           Generate code suitable for big switch tables.  Use this option only
           if the assembler/linker complain about out of range branches within
           a switch table.

       --mmjjuummpp--iinn--ddeellaayy
           Fill delay slots of function calls with unconditional jump
           instructions by modifying the return pointer for the function call
           to be the target of the conditional jump.

       --mmddiissaabbllee--ffpprreeggss
           Prevent floating point registers from being used in any manner.
           This is necessary for compiling kernels which perform lazy context
           switching of floating point registers.  If you use this option and
           attempt to perform floating point operations, the compiler will
           abort.

       --mmddiissaabbllee--iinnddeexxiinngg
           Prevent the compiler from using indexing address modes.  This
           avoids some rather obscure problems when compiling MIG generated
           code under MACH.

       --mmnnoo--ssppaaccee--rreeggss
           Generate code that assumes the target has no space registers.  This
           allows GCC to generate faster indirect calls and use unscaled index
           address modes.

           Such code is suitable for level 0 PA systems and kernels.

       --mmffaasstt--iinnddiirreecctt--ccaallllss
           Generate code that assumes calls never cross space boundaries.
           This allows GCC to emit code which performs faster indirect calls.

           This option will not work in the presence of shared libraries or
           nested functions.

       --mmffiixxeedd--rraannggee==_r_e_g_i_s_t_e_r_-_r_a_n_g_e
           Generate code treating the given register range as fixed registers.
           A fixed register is one that the register allocator can not use.
           This is useful when compiling kernel code.  A register range is
           specified as two registers separated by a dash.  Multiple register
           ranges can be specified separated by a comma.

       --mmlloonngg--llooaadd--ssttoorree
           Generate 3-instruction load and store sequences as sometimes
           required by the HP-UX 10 linker.  This is equivalent to the ++kk
           option to the HP compilers.

       --mmppoorrttaabbllee--rruunnttiimmee
           Use the portable calling conventions proposed by HP for ELF
           systems.

       --mmggaass
           Enable the use of assembler directives only GAS understands.

       --mmsscchheedduullee==_c_p_u_-_t_y_p_e
           Schedule code according to the constraints for the machine type
           _c_p_u_-_t_y_p_e.  The choices for _c_p_u_-_t_y_p_e are 770000 77110000, 77110000LLCC, 77220000,
           77330000 and 88000000.  Refer to _/_u_s_r_/_l_i_b_/_s_c_h_e_d_._m_o_d_e_l_s on an HP-UX system
           to determine the proper scheduling option for your machine.  The
           default scheduling is 88000000.

       --mmlliinnkkeerr--oopptt
           Enable the optimization pass in the HP-UX linker.  Note this makes
           symbolic debugging impossible.  It also triggers a bug in the HP-UX
           8 and HP-UX 9 linkers in which they give bogus error messages when
           linking some programs.

       --mmssoofftt--ffllooaatt
           Generate output containing library calls for floating point.
           WWaarrnniinngg:: the requisite libraries are not available for all HPPA
           targets.  Normally the facilities of the machineâ€™s usual C compiler
           are used, but this cannot be done directly in cross-compilation.
           You must make your own arrangements to provide suitable library
           functions for cross-compilation.

           --mmssoofftt--ffllooaatt changes the calling convention in the output file;
           therefore, it is only useful if you compile _a_l_l of a program with
           this option.  In particular, you need to compile _l_i_b_g_c_c_._a, the
           library that comes with GCC, with --mmssoofftt--ffllooaatt in order for this to
           work.

       --mmssiioo
           Generate the predefine, "_SIO", for server IO.  The default is
           --mmwwssiioo.  This generates the predefines, "__hp9000s700",
           "__hp9000s700__" and "_WSIO", for workstation IO.  These options
           are available under HP-UX and HI-UX.

       --mmggnnuu--lldd
           Use GNU ld specific options.  This passes --sshhaarreedd to ld when
           building a shared library.  It is the default when GCC is
           configured, explicitly or implicitly, with the GNU linker.  This
           option does not have any affect on which ld is called, it only
           changes what parameters are passed to that ld.  The ld that is
           called is determined by the ----wwiitthh--lldd configure option, GCCâ€™s
           program search path, and finally by the userâ€™s PPAATTHH.  The linker
           used by GCC can be printed using wwhhiicchh â€˜â€˜ggcccc --pprriinntt--pprroogg--nnaammee==llddâ€˜â€˜.
           This option is only available on the 64 bit HP-UX GCC, i.e.
           configured with hhppppaa**6644**--**--hhppuuxx**.

       --mmhhpp--lldd
           Use HP ld specific options.  This passes --bb to ld when building a
           shared library and passes ++AAcccceepptt TTyyppeeMMiissmmaattcchh to ld on all links.
           It is the default when GCC is configured, explicitly or implicitly,
           with the HP linker.  This option does not have any affect on which
           ld is called, it only changes what parameters are passed to that
           ld.  The ld that is called is determined by the ----wwiitthh--lldd configure
           option, GCCâ€™s program search path, and finally by the userâ€™s PPAATTHH.
           The linker used by GCC can be printed using wwhhiicchh â€˜â€˜ggcccc
           --pprriinntt--pprroogg--nnaammee==llddâ€˜â€˜.  This option is only available on the 64 bit
           HP-UX GCC, i.e. configured with hhppppaa**6644**--**--hhppuuxx**.

       --mmlloonngg--ccaallllss
           Generate code that uses long call sequences.  This ensures that a
           call is always able to reach linker generated stubs.  The default
           is to generate long calls only when the distance from the call site
           to the beginning of the function or translation unit, as the case
           may be, exceeds a predefined limit set by the branch type being
           used.  The limits for normal calls are 7,600,000 and 240,000 bytes,
           respectively for the PA 2.0 and PA 1.X architectures.  Sibcalls are
           always limited at 240,000 bytes.

           Distances are measured from the beginning of functions when using
           the --ffffuunnccttiioonn--sseeccttiioonnss option, or when using the --mmggaass and
           --mmnnoo--ppoorrttaabbllee--rruunnttiimmee options together under HP-UX with the SOM
           linker.

           It is normally not desirable to use this option as it will degrade
           performance.  However, it may be useful in large applications,
           particularly when partial linking is used to build the application.

           The types of long calls used depends on the capabilities of the
           assembler and linker, and the type of code being generated.  The
           impact on systems that support long absolute calls, and long pic
           symbol-difference or pc-relative calls should be relatively small.
           However, an indirect call is used on 32-bit ELF systems in pic code
           and it is quite long.

       --mmuunniixx==_u_n_i_x_-_s_t_d
           Generate compiler predefines and select a startfile for the
           specified UNIX standard.  The choices for _u_n_i_x_-_s_t_d are 9933, 9955 and
           9988.  9933 is supported on all HP-UX versions.  9955 is available on HP-
           UX 10.10 and later.  9988 is available on HP-UX 11.11 and later.  The
           default values are 9933 for HP-UX 10.00, 9955 for HP-UX 10.10 though to
           11.00, and 9988 for HP-UX 11.11 and later.

           --mmuunniixx==9933 provides the same predefines as GCC 3.3 and 3.4.
           --mmuunniixx==9955 provides additional predefines for "XOPEN_UNIX" and
           "_XOPEN_SOURCE_EXTENDED", and the startfile _u_n_i_x_9_5_._o.  --mmuunniixx==9988
           provides additional predefines for "_XOPEN_UNIX",
           "_XOPEN_SOURCE_EXTENDED", "_INCLUDE__STDC_A1_SOURCE" and
           "_INCLUDE_XOPEN_SOURCE_500", and the startfile _u_n_i_x_9_8_._o.

           It is _i_m_p_o_r_t_a_n_t to note that this option changes the interfaces for
           various library routines.  It also affects the operational behavior
           of the C library.  Thus, _e_x_t_r_e_m_e care is needed in using this
           option.

           Library code that is intended to operate with more than one UNIX
           standard must test, set and restore the variable
           _____x_p_g_4___e_x_t_e_n_d_e_d___m_a_s_k as appropriate.  Most GNU software doesnâ€™t
           provide this capability.

       --nnoolliibbddlldd
           Suppress the generation of link options to search libdld.sl when
           the --ssttaattiicc option is specified on HP-UX 10 and later.

       --ssttaattiicc
           The HP-UX implementation of setlocale in libc has a dependency on
           libdld.sl.  There isnâ€™t an archive version of libdld.sl.  Thus,
           when the --ssttaattiicc option is specified, special link options are
           needed to resolve this dependency.

           On HP-UX 10 and later, the GCC driver adds the necessary options to
           link with libdld.sl when the --ssttaattiicc option is specified.  This
           causes the resulting binary to be dynamic.  On the 64-bit port, the
           linkers generate dynamic binaries by default in any case.  The
           --nnoolliibbddlldd option can be used to prevent the GCC driver from adding
           these link options.

       --tthhrreeaaddss
           Add support for multithreading with the _d_c_e _t_h_r_e_a_d library under
           HP-UX.  This option sets flags for both the preprocessor and
           linker.

   IInntteell 338866 aanndd AAMMDD xx8866--6644 OOppttiioonnss
       These --mm options are defined for the i386 and x86-64 family of
       computers:

       --mmttuunnee==_c_p_u_-_t_y_p_e
           Tune to _c_p_u_-_t_y_p_e everything applicable about the generated code,
           except for the ABI and the set of available instructions.  The
           choices for _c_p_u_-_t_y_p_e are:

           _g_e_n_e_r_i_c
               Produce code optimized for the most common IA32/AMD64/EM64T
               processors.  If you know the CPU on which your code will run,
               then you should use the corresponding --mmttuunnee option instead of
               --mmttuunnee==ggeenneerriicc.  But, if you do not know exactly what CPU users
               of your application will have, then you should use this option.

               As new processors are deployed in the marketplace, the behavior
               of this option will change.  Therefore, if you upgrade to a
               newer version of GCC, the code generated option will change to
               reflect the processors that were most common when that version
               of GCC was released.

               There is no --mmaarrcchh==ggeenneerriicc option because --mmaarrcchh indicates the
               instruction set the compiler can use, and there is no generic
               instruction set applicable to all processors.  In contrast,
               --mmttuunnee indicates the processor (or, in this case, collection of
               processors) for which the code is optimized.

           _n_a_t_i_v_e
               This selects the CPU to tune for at compilation time by
               determining the processor type of the compiling machine.  Using
               --mmttuunnee==nnaattiivvee will produce code optimized for the local machine
               under the constraints of the selected instruction set.  Using
               --mmaarrcchh==nnaattiivvee will enable all instruction subsets supported by
               the local machine (hence the result might not run on different
               machines).

           _i_3_8_6
               Original Intelâ€™s i386 CPU.

           _i_4_8_6
               Intelâ€™s i486 CPU.  (No scheduling is implemented for this
               chip.)

           _i_5_8_6_, _p_e_n_t_i_u_m
               Intel Pentium CPU with no MMX support.

           _p_e_n_t_i_u_m_-_m_m_x
               Intel PentiumMMX CPU based on Pentium core with MMX instruction
               set support.

           _p_e_n_t_i_u_m_p_r_o
               Intel PentiumPro CPU.

           _i_6_8_6
               Same as "generic", but when used as "march" option, PentiumPro
               instruction set will be used, so the code will run on all i686
               family chips.

           _p_e_n_t_i_u_m_2
               Intel Pentium2 CPU based on PentiumPro core with MMX
               instruction set support.

           _p_e_n_t_i_u_m_3_, _p_e_n_t_i_u_m_3_m
               Intel Pentium3 CPU based on PentiumPro core with MMX and SSE
               instruction set support.

           _p_e_n_t_i_u_m_-_m
               Low power version of Intel Pentium3 CPU with MMX, SSE and SSE2
               instruction set support.  Used by Centrino notebooks.

           _p_e_n_t_i_u_m_4_, _p_e_n_t_i_u_m_4_m
               Intel Pentium4 CPU with MMX, SSE and SSE2 instruction set
               support.

           _p_r_e_s_c_o_t_t
               Improved version of Intel Pentium4 CPU with MMX, SSE, SSE2 and
               SSE3 instruction set support.

           _n_o_c_o_n_a
               Improved version of Intel Pentium4 CPU with 64-bit extensions,
               MMX, SSE, SSE2 and SSE3 instruction set support.

           _c_o_r_e_2
               Intel Core2 CPU with 64-bit extensions, MMX, SSE, SSE2, SSE3
               and SSSE3 instruction set support.

           _k_6  AMD K6 CPU with MMX instruction set support.

           _k_6_-_2_, _k_6_-_3
               Improved versions of AMD K6 CPU with MMX and 3dNOW! instruction
               set support.

           _a_t_h_l_o_n_, _a_t_h_l_o_n_-_t_b_i_r_d
               AMD Athlon CPU with MMX, 3dNOW!, enhanced 3dNOW! and SSE
               prefetch instructions support.

           _a_t_h_l_o_n_-_4_, _a_t_h_l_o_n_-_x_p_, _a_t_h_l_o_n_-_m_p
               Improved AMD Athlon CPU with MMX, 3dNOW!, enhanced 3dNOW! and
               full SSE instruction set support.

           _k_8_, _o_p_t_e_r_o_n_, _a_t_h_l_o_n_6_4_, _a_t_h_l_o_n_-_f_x
               AMD K8 core based CPUs with x86-64 instruction set support.
               (This supersets MMX, SSE, SSE2, 3dNOW!, enhanced 3dNOW! and
               64-bit instruction set extensions.)

           _k_8_-_s_s_e_3_, _o_p_t_e_r_o_n_-_s_s_e_3_, _a_t_h_l_o_n_6_4_-_s_s_e_3
               Improved versions of k8, opteron and athlon64 with SSE3
               instruction set support.

           _a_m_d_f_a_m_1_0_, _b_a_r_c_e_l_o_n_a
               AMD Family 10h core based CPUs with x86-64 instruction set
               support.  (This supersets MMX, SSE, SSE2, SSE3, SSE4A, 3dNOW!,
               enhanced 3dNOW!, ABM and 64-bit instruction set extensions.)

           _w_i_n_c_h_i_p_-_c_6
               IDT Winchip C6 CPU, dealt in same way as i486 with additional
               MMX instruction set support.

           _w_i_n_c_h_i_p_2
               IDT Winchip2 CPU, dealt in same way as i486 with additional MMX
               and 3dNOW!  instruction set support.

           _c_3  Via C3 CPU with MMX and 3dNOW! instruction set support.  (No
               scheduling is implemented for this chip.)

           _c_3_-_2
               Via C3-2 CPU with MMX and SSE instruction set support.  (No
               scheduling is implemented for this chip.)

           _g_e_o_d_e
               Embedded AMD CPU with MMX and 3dNOW! instruction set support.

           While picking a specific _c_p_u_-_t_y_p_e will schedule things
           appropriately for that particular chip, the compiler will not
           generate any code that does not run on the i386 without the
           --mmaarrcchh==_c_p_u_-_t_y_p_e option being used.

       --mmaarrcchh==_c_p_u_-_t_y_p_e
           Generate instructions for the machine type _c_p_u_-_t_y_p_e.  The choices
           for _c_p_u_-_t_y_p_e are the same as for --mmttuunnee.  Moreover, specifying
           --mmaarrcchh==_c_p_u_-_t_y_p_e implies --mmttuunnee==_c_p_u_-_t_y_p_e.

       --mmccppuu==_c_p_u_-_t_y_p_e
           A deprecated synonym for --mmttuunnee.

       --mmffppmmaatthh==_u_n_i_t
           Generate floating point arithmetics for selected unit _u_n_i_t.  The
           choices for _u_n_i_t are:

           338877 Use the standard 387 floating point coprocessor present
               majority of chips and emulated otherwise.  Code compiled with
               this option will run almost everywhere.  The temporary results
               are computed in 80bit precision instead of precision specified
               by the type resulting in slightly different results compared to
               most of other chips.  See --ffffllooaatt--ssttoorree for more detailed
               description.

               This is the default choice for i386 compiler.

           ssssee Use scalar floating point instructions present in the SSE
               instruction set.  This instruction set is supported by Pentium3
               and newer chips, in the AMD line by Athlon-4, Athlon-xp and
               Athlon-mp chips.  The earlier version of SSE instruction set
               supports only single precision arithmetics, thus the double and
               extended precision arithmetics is still done using 387.  Later
               version, present only in Pentium4 and the future AMD x86-64
               chips supports double precision arithmetics too.

               For the i386 compiler, you need to use --mmaarrcchh==_c_p_u_-_t_y_p_e, --mmssssee
               or --mmssssee22 switches to enable SSE extensions and make this
               option effective.  For the x86-64 compiler, these extensions
               are enabled by default.

               The resulting code should be considerably faster in the
               majority of cases and avoid the numerical instability problems
               of 387 code, but may break some existing code that expects
               temporaries to be 80bit.

               This is the default choice for the x86-64 compiler.

           ssssee,,338877
           ssssee++338877
           bbootthh
               Attempt to utilize both instruction sets at once.  This
               effectively double the amount of available registers and on
               chips with separate execution units for 387 and SSE the
               execution resources too.  Use this option with care, as it is
               still experimental, because the GCC register allocator does not
               model separate functional units well resulting in instable
               performance.

       --mmaassmm==_d_i_a_l_e_c_t
           Output asm instructions using selected _d_i_a_l_e_c_t.  Supported choices
           are iinntteell or aatttt (the default one).  Darwin does not support iinntteell.

       --mmiieeeeee--ffpp
       --mmnnoo--iieeeeee--ffpp
           Control whether or not the compiler uses IEEE floating point
           comparisons.  These handle correctly the case where the result of a
           comparison is unordered.

       --mmssoofftt--ffllooaatt
           Generate output containing library calls for floating point.
           WWaarrnniinngg:: the requisite libraries are not part of GCC.  Normally the
           facilities of the machineâ€™s usual C compiler are used, but this
           canâ€™t be done directly in cross-compilation.  You must make your
           own arrangements to provide suitable library functions for cross-
           compilation.

           On machines where a function returns floating point results in the
           80387 register stack, some floating point opcodes may be emitted
           even if --mmssoofftt--ffllooaatt is used.

       --mmnnoo--ffpp--rreett--iinn--338877
           Do not use the FPU registers for return values of functions.

           The usual calling convention has functions return values of types
           "float" and "double" in an FPU register, even if there is no FPU.
           The idea is that the operating system should emulate an FPU.

           The option --mmnnoo--ffpp--rreett--iinn--338877 causes such values to be returned in
           ordinary CPU registers instead.

       --mmnnoo--ffaannccyy--mmaatthh--338877
           Some 387 emulators do not support the "sin", "cos" and "sqrt"
           instructions for the 387.  Specify this option to avoid generating
           those instructions.  This option is the default on FreeBSD, OpenBSD
           and NetBSD.  This option is overridden when --mmaarrcchh indicates that
           the target cpu will always have an FPU and so the instruction will
           not need emulation.  As of revision 2.6.1, these instructions are
           not generated unless you also use the --ffuunnssaaffee--mmaatthh--ooppttiimmiizzaattiioonnss
           switch.

       --mmaalliiggnn--ddoouubbllee
       --mmnnoo--aalliiggnn--ddoouubbllee
           Control whether GCC aligns "double", "long double", and "long long"
           variables on a two word boundary or a one word boundary.  Aligning
           "double" variables on a two word boundary will produce code that
           runs somewhat faster on a PPeennttiiuumm at the expense of more memory.

           On x86-64, --mmaalliiggnn--ddoouubbllee is enabled by default.

           WWaarrnniinngg:: if you use the --mmaalliiggnn--ddoouubbllee switch, structures
           containing the above types will be aligned differently than the
           published application binary interface specifications for the 386
           and will not be binary compatible with structures in code compiled
           without that switch.

       --mm9966bbiitt--lloonngg--ddoouubbllee
       --mm112288bbiitt--lloonngg--ddoouubbllee
           These switches control the size of "long double" type.  The i386
           application binary interface specifies the size to be 96 bits, so
           --mm9966bbiitt--lloonngg--ddoouubbllee is the default in 32 bit mode.

           Modern architectures (Pentium and newer) would prefer "long double"
           to be aligned to an 8 or 16 byte boundary.  In arrays or structures
           conforming to the ABI, this would not be possible.  So specifying a
           --mm112288bbiitt--lloonngg--ddoouubbllee will align "long double" to a 16 byte boundary
           by padding the "long double" with an additional 32 bit zero.

           In the x86-64 compiler, --mm112288bbiitt--lloonngg--ddoouubbllee is the default choice
           as its ABI specifies that "long double" is to be aligned on 16 byte
           boundary.

           Notice that neither of these options enable any extra precision
           over the x87 standard of 80 bits for a "long double".

           WWaarrnniinngg:: if you override the default value for your target ABI, the
           structures and arrays containing "long double" variables will
           change their size as well as function calling convention for
           function taking "long double" will be modified.  Hence they will
           not be binary compatible with arrays or structures in code compiled
           without that switch.

       --mmllaarrggee--ddaattaa--tthhrreesshhoolldd==_n_u_m_b_e_r
           When --mmccmmooddeell==mmeeddiiuumm is specified, the data greater than _t_h_r_e_s_h_o_l_d
           are placed in large data section.  This value must be the same
           across all object linked into the binary and defaults to 65535.

       --mmrrttdd
           Use a different function-calling convention, in which functions
           that take a fixed number of arguments return with the "ret" _n_u_m
           instruction, which pops their arguments while returning.  This
           saves one instruction in the caller since there is no need to pop
           the arguments there.

           You can specify that an individual function is called with this
           calling sequence with the function attribute ssttddccaallll.  You can also
           override the --mmrrttdd option by using the function attribute ccddeeccll.

           WWaarrnniinngg:: this calling convention is incompatible with the one
           normally used on Unix, so you cannot use it if you need to call
           libraries compiled with the Unix compiler.

           Also, you must provide function prototypes for all functions that
           take variable numbers of arguments (including "printf"); otherwise
           incorrect code will be generated for calls to those functions.

           In addition, seriously incorrect code will result if you call a
           function with too many arguments.  (Normally, extra arguments are
           harmlessly ignored.)

       --mmrreeggppaarrmm==_n_u_m
           Control how many registers are used to pass integer arguments.  By
           default, no registers are used to pass arguments, and at most 3
           registers can be used.  You can control this behavior for a
           specific function by using the function attribute rreeggppaarrmm.

           WWaarrnniinngg:: if you use this switch, and _n_u_m is nonzero, then you must
           build all modules with the same value, including any libraries.
           This includes the system libraries and startup modules.

       --mmsssseerreeggppaarrmm
           Use SSE register passing conventions for float and double arguments
           and return values.  You can control this behavior for a specific
           function by using the function attribute sssseerreeggppaarrmm.

           WWaarrnniinngg:: if you use this switch then you must build all modules
           with the same value, including any libraries.  This includes the
           system libraries and startup modules.

       --mmppcc3322
       --mmppcc6644
       --mmppcc8800
           Set 80387 floating-point precision to 32, 64 or 80 bits.  When
           --mmppcc3322 is specified, the significands of results of floating-point
           operations are rounded to 24 bits (single precision); --mmppcc6644 rounds
           the significands of results of floating-point operations to 53 bits
           (double precision) and --mmppcc8800 rounds the significands of results of
           floating-point operations to 64 bits (extended double precision),
           which is the default.  When this option is used, floating-point
           operations in higher precisions are not available to the programmer
           without setting the FPU control word explicitly.

           Setting the rounding of floating-point operations to less than the
           default 80 bits can speed some programs by 2% or more.  Note that
           some mathematical libraries assume that extended precision (80 bit)
           floating-point operations are enabled by default; routines in such
           libraries could suffer significant loss of accuracy, typically
           through so-called "catastrophic cancellation", when this option is
           used to set the precision to less than extended precision.

       --mmssttaacckkrreeaalliiggnn
           Realign the stack at entry.  On the Intel x86, the --mmssttaacckkrreeaalliiggnn
           option will generate an alternate prologue and epilogue that
           realigns the runtime stack if necessary.  This supports mixing
           legacy codes that keep a 4-byte aligned stack with modern codes
           that keep a 16-byte stack for SSE compatibility.  See also the
           attribute "force_align_arg_pointer", applicable to individual
           functions.

       --mmpprreeffeerrrreedd--ssttaacckk--bboouunnddaarryy==_n_u_m
           Attempt to keep the stack boundary aligned to a 2 raised to _n_u_m
           byte boundary.  If --mmpprreeffeerrrreedd--ssttaacckk--bboouunnddaarryy is not specified, the
           default is 4 (16 bytes or 128 bits).

       --mmiinnccoommiinngg--ssttaacckk--bboouunnddaarryy==_n_u_m
           Assume the incoming stack is aligned to a 2 raised to _n_u_m byte
           boundary.  If --mmiinnccoommiinngg--ssttaacckk--bboouunnddaarryy is not specified, the one
           specified by --mmpprreeffeerrrreedd--ssttaacckk--bboouunnddaarryy will be used.

           On Pentium and PentiumPro, "double" and "long double" values should
           be aligned to an 8 byte boundary (see --mmaalliiggnn--ddoouubbllee) or suffer
           significant run time performance penalties.  On Pentium III, the
           Streaming SIMD Extension (SSE) data type "__m128" may not work
           properly if it is not 16 byte aligned.

           To ensure proper alignment of this values on the stack, the stack
           boundary must be as aligned as that required by any value stored on
           the stack.  Further, every function must be generated such that it
           keeps the stack aligned.  Thus calling a function compiled with a
           higher preferred stack boundary from a function compiled with a
           lower preferred stack boundary will most likely misalign the stack.
           It is recommended that libraries that use callbacks always use the
           default setting.

           This extra alignment does consume extra stack space, and generally
           increases code size.  Code that is sensitive to stack space usage,
           such as embedded systems and operating system kernels, may want to
           reduce the preferred alignment to --mmpprreeffeerrrreedd--ssttaacckk--bboouunnddaarryy==22.

       --mmmmmmxx
       --mmnnoo--mmmmxx
       --mmssssee
       --mmnnoo--ssssee
       --mmssssee22
       --mmnnoo--ssssee22
       --mmssssee33
       --mmnnoo--ssssee33
       --mmssssssee33
       --mmnnoo--ssssssee33
       --mmssssee44..11
       --mmnnoo--ssssee44..11
       --mmssssee44..22
       --mmnnoo--ssssee44..22
       --mmssssee44
       --mmnnoo--ssssee44
       --mmaavvxx
       --mmnnoo--aavvxx
       --mmaaeess
       --mmnnoo--aaeess
       --mmppccllmmuull
       --mmnnoo--ppccllmmuull
       --mmffssggssbbaassee
       --mmnnoo--ffssggssbbaassee
       --mmrrddrrnndd
       --mmnnoo--rrddrrnndd
       --mmff1166cc
       --mmnnoo--ff1166cc
       --mmssssee44aa
       --mmnnoo--ssssee44aa
       --mmffmmaa44
       --mmnnoo--ffmmaa44
       --mmxxoopp
       --mmnnoo--xxoopp
       --mmllwwpp
       --mmnnoo--llwwpp
       --mm33ddnnooww
       --mmnnoo--33ddnnooww
       --mmppooppccnntt
       --mmnnoo--ppooppccnntt
       --mmaabbmm
       --mmnnoo--aabbmm
       --mmbbmmii
       --mmnnoo--bbmmii
       --mmttbbmm
       --mmnnoo--ttbbmm
           These switches enable or disable the use of instructions in the
           MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, AVX, AES, PCLMUL, FSGSBASE,
           RDRND, F16C, SSE4A, FMA4, XOP, LWP, ABM, BMI, or 3DNow! extended
           instruction sets.  These extensions are also available as built-in
           functions: see XX8866 BBuuiilltt--iinn FFuunnccttiioonnss, for details of the functions
           enabled and disabled by these switches.

           To have SSE/SSE2 instructions generated automatically from
           floating-point code (as opposed to 387 instructions), see
           --mmffppmmaatthh==ssssee.

           GCC depresses SSEx instructions when --mmaavvxx is used. Instead, it
           generates new AVX instructions or AVX equivalence for all SSEx
           instructions when needed.

           These options will enable GCC to use these extended instructions in
           generated code, even without --mmffppmmaatthh==ssssee.  Applications which
           perform runtime CPU detection must compile separate files for each
           supported architecture, using the appropriate flags.  In
           particular, the file containing the CPU detection code should be
           compiled without these options.

       --mmffuusseedd--mmaadddd
       --mmnnoo--ffuusseedd--mmaadddd
           Do (donâ€™t) generate code that uses the fused multiply/add or
           multiply/subtract instructions.  The default is to use these
           instructions.

       --mmcclldd
           This option instructs GCC to emit a "cld" instruction in the
           prologue of functions that use string instructions.  String
           instructions depend on the DF flag to select between autoincrement
           or autodecrement mode.  While the ABI specifies the DF flag to be
           cleared on function entry, some operating systems violate this
           specification by not clearing the DF flag in their exception
           dispatchers.  The exception handler can be invoked with the DF flag
           set which leads to wrong direction mode, when string instructions
           are used.  This option can be enabled by default on 32-bit x86
           targets by configuring GCC with the ----eennaabbllee--cclldd configure option.
           Generation of "cld" instructions can be suppressed with the
           --mmnnoo--cclldd compiler option in this case.

       --mmccxx1166
           This option will enable GCC to use CMPXCHG16B instruction in
           generated code.  CMPXCHG16B allows for atomic operations on 128-bit
           double quadword (or oword) data types.  This is useful for high
           resolution counters that could be updated by multiple processors
           (or cores).  This instruction is generated as part of atomic built-
           in functions: see AAttoommiicc BBuuiillttiinnss for details.

       --mmssaahhff
           This option will enable GCC to use SAHF instruction in generated
           64-bit code.  Early Intel CPUs with Intel 64 lacked LAHF and SAHF
           instructions supported by AMD64 until introduction of Pentium 4 G1
           step in December 2005.  LAHF and SAHF are load and store
           instructions, respectively, for certain status flags.  In 64-bit
           mode, SAHF instruction is used to optimize "fmod", "drem" or
           "remainder" built-in functions: see OOtthheerr BBuuiillttiinnss for details.

       --mmmmoovvbbee
           This option will enable GCC to use movbe instruction to implement
           "__builtin_bswap32" and "__builtin_bswap64".

       --mmccrrcc3322
           This option will enable built-in functions,
           "__builtin_ia32_crc32qi", "__builtin_ia32_crc32hi".
           "__builtin_ia32_crc32si" and "__builtin_ia32_crc32di" to generate
           the crc32 machine instruction.

       --mmrreecciipp
           This option will enable GCC to use RCPSS and RSQRTSS instructions
           (and their vectorized variants RCPPS and RSQRTPS) with an
           additional Newton-Raphson step to increase precision instead of
           DIVSS and SQRTSS (and their vectorized variants) for single
           precision floating point arguments.  These instructions are
           generated only when --ffuunnssaaffee--mmaatthh--ooppttiimmiizzaattiioonnss is enabled together
           with --ffiinniittee--mmaatthh--oonnllyy and --ffnnoo--ttrraappppiinngg--mmaatthh.  Note that while the
           throughput of the sequence is higher than the throughput of the
           non-reciprocal instruction, the precision of the sequence can be
           decreased by up to 2 ulp (i.e. the inverse of 1.0 equals
           0.99999994).

       --mmvveecclliibbaabbii==_t_y_p_e
           Specifies the ABI type to use for vectorizing intrinsics using an
           external library.  Supported types are "svml" for the Intel short
           vector math library and "acml" for the AMD math core library style
           of interfacing.  GCC will currently emit calls to "vmldExp2",
           "vmldLn2", "vmldLog102", "vmldLog102", "vmldPow2", "vmldTanh2",
           "vmldTan2", "vmldAtan2", "vmldAtanh2", "vmldCbrt2", "vmldSinh2",
           "vmldSin2", "vmldAsinh2", "vmldAsin2", "vmldCosh2", "vmldCos2",
           "vmldAcosh2", "vmldAcos2", "vmlsExp4", "vmlsLn4", "vmlsLog104",
           "vmlsLog104", "vmlsPow4", "vmlsTanh4", "vmlsTan4", "vmlsAtan4",
           "vmlsAtanh4", "vmlsCbrt4", "vmlsSinh4", "vmlsSin4", "vmlsAsinh4",
           "vmlsAsin4", "vmlsCosh4", "vmlsCos4", "vmlsAcosh4" and "vmlsAcos4"
           for corresponding function type when --mmvveecclliibbaabbii==ssvvmmll is used and
           "__vrd2_sin", "__vrd2_cos", "__vrd2_exp", "__vrd2_log",
           "__vrd2_log2", "__vrd2_log10", "__vrs4_sinf", "__vrs4_cosf",
           "__vrs4_expf", "__vrs4_logf", "__vrs4_log2f", "__vrs4_log10f" and
           "__vrs4_powf" for corresponding function type when --mmvveecclliibbaabbii==aaccmmll
           is used. Both --ffttrreeee--vveeccttoorriizzee and --ffuunnssaaffee--mmaatthh--ooppttiimmiizzaattiioonnss have
           to be enabled. A SVML or ACML ABI compatible library will have to
           be specified at link time.

       --mmppuusshh--aarrggss
       --mmnnoo--ppuusshh--aarrggss
           Use PUSH operations to store outgoing parameters.  This method is
           shorter and usually equally fast as method using SUB/MOV operations
           and is enabled by default.  In some cases disabling it may improve
           performance because of improved scheduling and reduced
           dependencies.

       --mmaaccccuummuullaattee--oouuttggooiinngg--aarrggss
           If enabled, the maximum amount of space required for outgoing
           arguments will be computed in the function prologue.  This is
           faster on most modern CPUs because of reduced dependencies,
           improved scheduling and reduced stack usage when preferred stack
           boundary is not equal to 2.  The drawback is a notable increase in
           code size.  This switch implies --mmnnoo--ppuusshh--aarrggss.

       --mmtthhrreeaaddss
           Support thread-safe exception handling on MMiinnggww3322.  Code that
           relies on thread-safe exception handling must compile and link all
           code with the --mmtthhrreeaaddss option.  When compiling, --mmtthhrreeaaddss defines
           --DD__MMTT; when linking, it links in a special thread helper library
           --llmmiinnggwwtthhrrdd which cleans up per thread exception handling data.

       --mmnnoo--aalliiggnn--ssttrriinnggooppss
           Do not align destination of inlined string operations.  This switch
           reduces code size and improves performance in case the destination
           is already aligned, but GCC doesnâ€™t know about it.

       --mmiinnlliinnee--aallll--ssttrriinnggooppss
           By default GCC inlines string operations only when destination is
           known to be aligned at least to 4 byte boundary.  This enables more
           inlining, increase code size, but may improve performance of code
           that depends on fast memcpy, strlen and memset for short lengths.

       --mmiinnlliinnee--ssttrriinnggooppss--ddyynnaammiiccaallllyy
           For string operation of unknown size, inline runtime checks so for
           small blocks inline code is used, while for large blocks library
           call is used.

       --mmssttrriinnggoopp--ssttrraatteeggyy==_a_l_g
           Overwrite internal decision heuristic about particular algorithm to
           inline string operation with.  The allowed values are "rep_byte",
           "rep_4byte", "rep_8byte" for expanding using i386 "rep" prefix of
           specified size, "byte_loop", "loop", "unrolled_loop" for expanding
           inline loop, "libcall" for always expanding library call.

       --mmoommiitt--lleeaaff--ffrraammee--ppooiinntteerr
           Donâ€™t keep the frame pointer in a register for leaf functions.
           This avoids the instructions to save, set up and restore frame
           pointers and makes an extra register available in leaf functions.
           The option --ffoommiitt--ffrraammee--ppooiinntteerr removes the frame pointer for all
           functions which might make debugging harder.

       --mmttllss--ddiirreecctt--sseegg--rreeffss
       --mmnnoo--ttllss--ddiirreecctt--sseegg--rreeffss
           Controls whether TLS variables may be accessed with offsets from
           the TLS segment register (%gs for 32-bit, %fs for 64-bit), or
           whether the thread base pointer must be added.  Whether or not this
           is legal depends on the operating system, and whether it maps the
           segment to cover the entire TLS area.

           For systems that use GNU libc, the default is on.

       --mmssssee22aavvxx
       --mmnnoo--ssssee22aavvxx
           Specify that the assembler should encode SSE instructions with VEX
           prefix.  The option --mmaavvxx turns this on by default.

       These --mm switches are supported in addition to the above on AMD x86-64
       processors in 64-bit environments.

       --mm3322
       --mm6644
           Generate code for a 32-bit or 64-bit environment.  The 32-bit
           environment sets int, long and pointer to 32 bits and generates
           code that runs on any i386 system.  The 64-bit environment sets int
           to 32 bits and long and pointer to 64 bits and generates code for
           AMDâ€™s x86-64 architecture. For darwin only the -m64 option turns
           off the --ffnnoo--ppiicc and --mmddyynnaammiicc--nnoo--ppiicc options.

       --mmnnoo--rreedd--zzoonnee
           Do not use a so called red zone for x86-64 code.  The red zone is
           mandated by the x86-64 ABI, it is a 128-byte area beyond the
           location of the stack pointer that will not be modified by signal
           or interrupt handlers and therefore can be used for temporary data
           without adjusting the stack pointer.  The flag --mmnnoo--rreedd--zzoonnee
           disables this red zone.

       --mmccmmooddeell==ssmmaallll
           Generate code for the small code model: the program and its symbols
           must be linked in the lower 2 GB of the address space.  Pointers
           are 64 bits.  Programs can be statically or dynamically linked.
           This is the default code model.

       --mmccmmooddeell==kkeerrnneell
           Generate code for the kernel code model.  The kernel runs in the
           negative 2 GB of the address space.  This model has to be used for
           Linux kernel code.

       --mmccmmooddeell==mmeeddiiuumm
           Generate code for the medium model: The program is linked in the
           lower 2 GB of the address space.  Small symbols are also placed
           there.  Symbols with sizes larger than --mmllaarrggee--ddaattaa--tthhrreesshhoolldd are
           put into large data or bss sections and can be located above 2GB.
           Programs can be statically or dynamically linked.

       --mmccmmooddeell==llaarrggee
           Generate code for the large model: This model makes no assumptions
           about addresses and sizes of sections.

   ii338866 aanndd xx8866--6644 WWiinnddoowwss OOppttiioonnss
       These additional options are available for Windows targets:

       --mmccoonnssoollee
           This option is available for Cygwin and MinGW targets.  It
           specifies that a console application is to be generated, by
           instructing the linker to set the PE header subsystem type required
           for console applications.  This is the default behaviour for Cygwin
           and MinGW targets.

       --mmccyyggwwiinn
           This option is available for Cygwin targets.  It specifies that the
           Cygwin internal interface is to be used for predefined preprocessor
           macros, C runtime libraries and related linker paths and options.
           For Cygwin targets this is the default behaviour.  This option is
           deprecated and will be removed in a future release.

       --mmnnoo--ccyyggwwiinn
           This option is available for Cygwin targets.  It specifies that the
           MinGW internal interface is to be used instead of Cygwinâ€™s, by
           setting MinGW-related predefined macros and linker paths and
           default library options.  This option is deprecated and will be
           removed in a future release.

       --mmddllll
           This option is available for Cygwin and MinGW targets.  It
           specifies that a DLL - a dynamic link library - is to be generated,
           enabling the selection of the required runtime startup object and
           entry point.

       --mmnnoopp--ffuunn--ddlllliimmppoorrtt
           This option is available for Cygwin and MinGW targets.  It
           specifies that the dllimport attribute should be ignored.

       --mmtthhrreeaadd
           This option is available for MinGW targets. It specifies that
           MinGW-specific thread support is to be used.

       --mmwwiinn3322
           This option is available for Cygwin and MinGW targets.  It
           specifies that the typical Windows pre-defined macros are to be set
           in the pre-processor, but does not influence the choice of runtime
           library/startup code.

       --mmwwiinnddoowwss
           This option is available for Cygwin and MinGW targets.  It
           specifies that a GUI application is to be generated by instructing
           the linker to set the PE header subsystem type appropriately.

       See also under ii338866 aanndd xx8866--6644 OOppttiioonnss for standard options.

   IIAA--6644 OOppttiioonnss
       These are the --mm options defined for the Intel IA-64 architecture.

       --mmbbiigg--eennddiiaann
           Generate code for a big endian target.  This is the default for HP-
           UX.

       --mmlliittttllee--eennddiiaann
           Generate code for a little endian target.  This is the default for
           AIX5 and GNU/Linux.

       --mmggnnuu--aass
       --mmnnoo--ggnnuu--aass
           Generate (or donâ€™t) code for the GNU assembler.  This is the
           default.

       --mmggnnuu--lldd
       --mmnnoo--ggnnuu--lldd
           Generate (or donâ€™t) code for the GNU linker.  This is the default.

       --mmnnoo--ppiicc
           Generate code that does not use a global pointer register.  The
           result is not position independent code, and violates the IA-64
           ABI.

       --mmvvoollaattiillee--aassmm--ssttoopp
       --mmnnoo--vvoollaattiillee--aassmm--ssttoopp
           Generate (or donâ€™t) a stop bit immediately before and after
           volatile asm statements.

       --mmrreeggiisstteerr--nnaammeess
       --mmnnoo--rreeggiisstteerr--nnaammeess
           Generate (or donâ€™t) iinn, lloocc, and oouutt register names for the stacked
           registers.  This may make assembler output more readable.

       --mmnnoo--ssddaattaa
       --mmssddaattaa
           Disable (or enable) optimizations that use the small data section.
           This may be useful for working around optimizer bugs.

       --mmccoonnssttaanntt--ggpp
           Generate code that uses a single constant global pointer value.
           This is useful when compiling kernel code.

       --mmaauuttoo--ppiicc
           Generate code that is self-relocatable.  This implies
           --mmccoonnssttaanntt--ggpp.  This is useful when compiling firmware code.

       --mmiinnlliinnee--ffllooaatt--ddiivviiddee--mmiinn--llaatteennccyy
           Generate code for inline divides of floating point values using the
           minimum latency algorithm.

       --mmiinnlliinnee--ffllooaatt--ddiivviiddee--mmaaxx--tthhrroouugghhppuutt
           Generate code for inline divides of floating point values using the
           maximum throughput algorithm.

       --mmiinnlliinnee--iinntt--ddiivviiddee--mmiinn--llaatteennccyy
           Generate code for inline divides of integer values using the
           minimum latency algorithm.

       --mmiinnlliinnee--iinntt--ddiivviiddee--mmaaxx--tthhrroouugghhppuutt
           Generate code for inline divides of integer values using the
           maximum throughput algorithm.

       --mmiinnlliinnee--ssqqrrtt--mmiinn--llaatteennccyy
           Generate code for inline square roots using the minimum latency
           algorithm.

       --mmiinnlliinnee--ssqqrrtt--mmaaxx--tthhrroouugghhppuutt
           Generate code for inline square roots using the maximum throughput
           algorithm.

       --mmnnoo--ddwwaarrff22--aassmm
       --mmddwwaarrff22--aassmm
           Donâ€™t (or do) generate assembler code for the DWARF2 line number
           debugging info.  This may be useful when not using the GNU
           assembler.

       --mmeeaarrllyy--ssttoopp--bbiittss
       --mmnnoo--eeaarrllyy--ssttoopp--bbiittss
           Allow stop bits to be placed earlier than immediately preceding the
           instruction that triggered the stop bit.  This can improve
           instruction scheduling, but does not always do so.

       --mmffiixxeedd--rraannggee==_r_e_g_i_s_t_e_r_-_r_a_n_g_e
           Generate code treating the given register range as fixed registers.
           A fixed register is one that the register allocator can not use.
           This is useful when compiling kernel code.  A register range is
           specified as two registers separated by a dash.  Multiple register
           ranges can be specified separated by a comma.

       --mmttllss--ssiizzee==_t_l_s_-_s_i_z_e
           Specify bit size of immediate TLS offsets.  Valid values are 14,
           22, and 64.

       --mmttuunnee==_c_p_u_-_t_y_p_e
           Tune the instruction scheduling for a particular CPU, Valid values
           are itanium, itanium1, merced, itanium2, and mckinley.

       --mmtt
       --pptthhrreeaadd
           Add support for multithreading using the POSIX threads library.
           This option sets flags for both the preprocessor and linker.  It
           does not affect the thread safety of object code produced by the
           compiler or that of libraries supplied with it.  These are HP-UX
           specific flags.

       --mmiillpp3322
       --mmllpp6644
           Generate code for a 32-bit or 64-bit environment.  The 32-bit
           environment sets int, long and pointer to 32 bits.  The 64-bit
           environment sets int to 32 bits and long and pointer to 64 bits.
           These are HP-UX specific flags.

       --mmnnoo--sscchheedd--bbrr--ddaattaa--ssppeecc
       --mmsscchheedd--bbrr--ddaattaa--ssppeecc
           (Dis/En)able data speculative scheduling before reload.  This will
           result in generation of the ld.a instructions and the corresponding
           check instructions (ld.c / chk.a).  The default is â€™disableâ€™.

       --mmsscchheedd--aarr--ddaattaa--ssppeecc
       --mmnnoo--sscchheedd--aarr--ddaattaa--ssppeecc
           (En/Dis)able data speculative scheduling after reload.  This will
           result in generation of the ld.a instructions and the corresponding
           check instructions (ld.c / chk.a).  The default is â€™enableâ€™.

       --mmnnoo--sscchheedd--ccoonnttrrooll--ssppeecc
       --mmsscchheedd--ccoonnttrrooll--ssppeecc
           (Dis/En)able control speculative scheduling.  This feature is
           available only during region scheduling (i.e. before reload).  This
           will result in generation of the ld.s instructions and the
           corresponding check instructions chk.s .  The default is â€™disableâ€™.

       --mmsscchheedd--bbrr--iinn--ddaattaa--ssppeecc
       --mmnnoo--sscchheedd--bbrr--iinn--ddaattaa--ssppeecc
           (En/Dis)able speculative scheduling of the instructions that are
           dependent on the data speculative loads before reload.  This is
           effective only with --mmsscchheedd--bbrr--ddaattaa--ssppeecc enabled.  The default is
           â€™enableâ€™.

       --mmsscchheedd--aarr--iinn--ddaattaa--ssppeecc
       --mmnnoo--sscchheedd--aarr--iinn--ddaattaa--ssppeecc
           (En/Dis)able speculative scheduling of the instructions that are
           dependent on the data speculative loads after reload.  This is
           effective only with --mmsscchheedd--aarr--ddaattaa--ssppeecc enabled.  The default is
           â€™enableâ€™.

       --mmsscchheedd--iinn--ccoonnttrrooll--ssppeecc
       --mmnnoo--sscchheedd--iinn--ccoonnttrrooll--ssppeecc
           (En/Dis)able speculative scheduling of the instructions that are
           dependent on the control speculative loads.  This is effective only
           with --mmsscchheedd--ccoonnttrrooll--ssppeecc enabled.  The default is â€™enableâ€™.

       --mmsscchheedd--llddcc
       --mmnnoo--sscchheedd--llddcc
           (En/Dis)able use of simple data speculation checks ld.c .  If
           disabled, only chk.a instructions will be emitted to check data
           speculative loads.  The default is â€™enableâ€™.

       --mmnnoo--sscchheedd--ccoonnttrrooll--llddcc
       --mmsscchheedd--ccoonnttrrooll--llddcc
           (Dis/En)able use of ld.c instructions to check control speculative
           loads.  If enabled, in case of control speculative load with no
           speculatively scheduled dependent instructions this load will be
           emitted as ld.sa and ld.c will be used to check it.  The default is
           â€™disableâ€™.

       --mmnnoo--sscchheedd--ssppeecc--vveerrbboossee
       --mmsscchheedd--ssppeecc--vveerrbboossee
           (Dis/En)able printing of the information about speculative motions.

       --mmnnoo--sscchheedd--pprreeffeerr--nnoonn--ddaattaa--ssppeecc--iinnssnnss
       --mmsscchheedd--pprreeffeerr--nnoonn--ddaattaa--ssppeecc--iinnssnnss
           If enabled, data speculative instructions will be chosen for
           schedule only if there are no other choices at the moment.  This
           will make the use of the data speculation much more conservative.
           The default is â€™disableâ€™.

       --mmnnoo--sscchheedd--pprreeffeerr--nnoonn--ccoonnttrrooll--ssppeecc--iinnssnnss
       --mmsscchheedd--pprreeffeerr--nnoonn--ccoonnttrrooll--ssppeecc--iinnssnnss
           If enabled, control speculative instructions will be chosen for
           schedule only if there are no other choices at the moment.  This
           will make the use of the control speculation much more
           conservative.  The default is â€™disableâ€™.

       --mmnnoo--sscchheedd--ccoouunntt--ssppeecc--iinn--ccrriittiiccaall--ppaatthh
       --mmsscchheedd--ccoouunntt--ssppeecc--iinn--ccrriittiiccaall--ppaatthh
           If enabled, speculative dependencies will be considered during
           computation of the instructions priorities.  This will make the use
           of the speculation a bit more conservative.  The default is
           â€™disableâ€™.

   MM3322CC OOppttiioonnss
       --mmccppuu==_n_a_m_e
           Select the CPU for which code is generated.  _n_a_m_e may be one of rr88cc
           for the R8C/Tiny series, mm1166cc for the M16C (up to /60) series,
           mm3322ccmm for the M16C/80 series, or mm3322cc for the M32C/80 series.

       --mmssiimm
           Specifies that the program will be run on the simulator.  This
           causes an alternate runtime library to be linked in which supports,
           for example, file I/O.  You must not use this option when
           generating programs that will run on real hardware; you must
           provide your own runtime library for whatever I/O functions are
           needed.

       --mmeemmrreeggss==_n_u_m_b_e_r
           Specifies the number of memory-based pseudo-registers GCC will use
           during code generation.  These pseudo-registers will be used like
           real registers, so there is a tradeoff between GCCâ€™s ability to fit
           the code into available registers, and the performance penalty of
           using memory instead of registers.  Note that all modules in a
           program must be compiled with the same value for this option.
           Because of that, you must not use this option with the default
           runtime libraries gcc builds.

   MM3322RR//DD OOppttiioonnss
       These --mm options are defined for Renesas M32R/D architectures:

       --mm3322rr22
           Generate code for the M32R/2.

       --mm3322rrxx
           Generate code for the M32R/X.

       --mm3322rr
           Generate code for the M32R.  This is the default.

       --mmmmooddeell==ssmmaallll
           Assume all objects live in the lower 16MB of memory (so that their
           addresses can be loaded with the "ld24" instruction), and assume
           all subroutines are reachable with the "bl" instruction.  This is
           the default.

           The addressability of a particular object can be set with the
           "model" attribute.

       --mmmmooddeell==mmeeddiiuumm
           Assume objects may be anywhere in the 32-bit address space (the
           compiler will generate "seth/add3" instructions to load their
           addresses), and assume all subroutines are reachable with the "bl"
           instruction.

       --mmmmooddeell==llaarrggee
           Assume objects may be anywhere in the 32-bit address space (the
           compiler will generate "seth/add3" instructions to load their
           addresses), and assume subroutines may not be reachable with the
           "bl" instruction (the compiler will generate the much slower
           "seth/add3/jl" instruction sequence).

       --mmssddaattaa==nnoonnee
           Disable use of the small data area.  Variables will be put into one
           of ..ddaattaa, bbssss, or ..rrooddaattaa (unless the "section" attribute has been
           specified).  This is the default.

           The small data area consists of sections ..ssddaattaa and ..ssbbssss.  Objects
           may be explicitly put in the small data area with the "section"
           attribute using one of these sections.

       --mmssddaattaa==ssddaattaa
           Put small global and static data in the small data area, but do not
           generate special code to reference them.

       --mmssddaattaa==uussee
           Put small global and static data in the small data area, and
           generate special instructions to reference them.

       --GG _n_u_m
           Put global and static objects less than or equal to _n_u_m bytes into
           the small data or bss sections instead of the normal data or bss
           sections.  The default value of _n_u_m is 8.  The --mmssddaattaa option must
           be set to one of ssddaattaa or uussee for this option to have any effect.

           All modules should be compiled with the same --GG _n_u_m value.
           Compiling with different values of _n_u_m may or may not work; if it
           doesnâ€™t the linker will give an error message---incorrect code will
           not be generated.

       --mmddeebbuugg
           Makes the M32R specific code in the compiler display some
           statistics that might help in debugging programs.

       --mmaalliiggnn--llooooppss
           Align all loops to a 32-byte boundary.

       --mmnnoo--aalliiggnn--llooooppss
           Do not enforce a 32-byte alignment for loops.  This is the default.

       --mmiissssuuee--rraattee==_n_u_m_b_e_r
           Issue _n_u_m_b_e_r instructions per cycle.  _n_u_m_b_e_r can only be 1 or 2.

       --mmbbrraanncchh--ccoosstt==_n_u_m_b_e_r
           _n_u_m_b_e_r can only be 1 or 2.  If it is 1 then branches will be
           preferred over conditional code, if it is 2, then the opposite will
           apply.

       --mmfflluusshh--ttrraapp==_n_u_m_b_e_r
           Specifies the trap number to use to flush the cache.  The default
           is 12.  Valid numbers are between 0 and 15 inclusive.

       --mmnnoo--fflluusshh--ttrraapp
           Specifies that the cache cannot be flushed by using a trap.

       --mmfflluusshh--ffuunncc==_n_a_m_e
           Specifies the name of the operating system function to call to
           flush the cache.  The default is ___f_l_u_s_h___c_a_c_h_e, but a function call
           will only be used if a trap is not available.

       --mmnnoo--fflluusshh--ffuunncc
           Indicates that there is no OS function for flushing the cache.

   MM668800xx00 OOppttiioonnss
       These are the --mm options defined for M680x0 and ColdFire processors.
       The default settings depend on which architecture was selected when the
       compiler was configured; the defaults for the most common choices are
       given below.

       --mmaarrcchh==_a_r_c_h
           Generate code for a specific M680x0 or ColdFire instruction set
           architecture.  Permissible values of _a_r_c_h for M680x0 architectures
           are: 6688000000, 6688001100, 6688002200, 6688003300, 6688004400, 6688006600 and ccppuu3322.  ColdFire
           architectures are selected according to Freescaleâ€™s ISA
           classification and the permissible values are: iissaaaa, iissaaaapplluuss, iissaabb
           and iissaacc.

           gcc defines a macro ____mmccff_a_r_c_h____ whenever it is generating code for
           a ColdFire target.  The _a_r_c_h in this macro is one of the --mmaarrcchh
           arguments given above.

           When used together, --mmaarrcchh and --mmttuunnee select code that runs on a
           family of similar processors but that is optimized for a particular
           microarchitecture.

       --mmccppuu==_c_p_u
           Generate code for a specific M680x0 or ColdFire processor.  The
           M680x0 _c_p_us are: 6688000000, 6688001100, 6688002200, 6688003300, 6688004400, 6688006600, 6688330022,
           6688333322 and ccppuu3322.  The ColdFire _c_p_us are given by the table below,
           which also classifies the CPUs into families:

           Family : --mmccppuu arguments
           5511qqee : 5511qqee
           55220066 : 55220022 55220044 55220066
           55220066ee : 55220066ee
           55220088 : 55220077 55220088
           55221111aa : 55221100aa 55221111aa
           55221133 : 55221111 55221122 55221133
           55221166 : 55221144 55221166
           5522223355 : 5522223300 5522223311 5522223322 5522223333 5522223344 5522223355
           55222255 : 55222244 55222255
           55223355 : 55223322 55223333 55223344 55223355 552233xx
           55224499 : 55224499
           55225500 : 55225500
           55227711 : 55227700 55227711
           55227722 : 55227722
           55227755 : 55227744 55227755
           55228822 : 55228800 55228811 55228822 552288xx
           55330077 : 55330077
           55332299 : 55332277 55332288 55332299 553322xx
           55337733 : 55337722 55337733 553377xx
           55440077 : 55440077
           55447755 : 55447700 55447711 55447722 55447733 55447744 55447755 554477xx 55448800 55448811 55448822 55448833 55448844
           55448855

           --mmccppuu==_c_p_u overrides --mmaarrcchh==_a_r_c_h if _a_r_c_h is compatible with _c_p_u.
           Other combinations of --mmccppuu and --mmaarrcchh are rejected.

           gcc defines the macro ____mmccff__ccppuu___c_p_u when ColdFire target _c_p_u is
           selected.  It also defines ____mmccff__ffaammiillyy___f_a_m_i_l_y, where the value of
           _f_a_m_i_l_y is given by the table above.

       --mmttuunnee==_t_u_n_e
           Tune the code for a particular microarchitecture, within the
           constraints set by --mmaarrcchh and --mmccppuu.  The M680x0 microarchitectures
           are: 6688000000, 6688001100, 6688002200, 6688003300, 6688004400, 6688006600 and ccppuu3322.  The
           ColdFire microarchitectures are: ccffvv11, ccffvv22, ccffvv33, ccffvv44 and ccffvv44ee.

           You can also use --mmttuunnee==6688002200--4400 for code that needs to run
           relatively well on 68020, 68030 and 68040 targets.  --mmttuunnee==6688002200--6600
           is similar but includes 68060 targets as well.  These two options
           select the same tuning decisions as --mm6688002200--4400 and --mm6688002200--6600
           respectively.

           gcc defines the macros ____mmcc_a_r_c_h and ____mmcc_a_r_c_h____ when tuning for
           680x0 architecture _a_r_c_h.  It also defines mmcc_a_r_c_h unless either
           --aannssii or a non-GNU --ssttdd option is used.  If gcc is tuning for a
           range of architectures, as selected by --mmttuunnee==6688002200--4400 or
           --mmttuunnee==6688002200--6600, it defines the macros for every architecture in
           the range.

           gcc also defines the macro ____mm_u_a_r_c_h____ when tuning for ColdFire
           microarchitecture _u_a_r_c_h, where _u_a_r_c_h is one of the arguments given
           above.

       --mm6688000000
       --mmcc6688000000
           Generate output for a 68000.  This is the default when the compiler
           is configured for 68000-based systems.  It is equivalent to
           --mmaarrcchh==6688000000.

           Use this option for microcontrollers with a 68000 or EC000 core,
           including the 68008, 68302, 68306, 68307, 68322, 68328 and 68356.

       --mm6688001100
           Generate output for a 68010.  This is the default when the compiler
           is configured for 68010-based systems.  It is equivalent to
           --mmaarrcchh==6688001100.

       --mm6688002200
       --mmcc6688002200
           Generate output for a 68020.  This is the default when the compiler
           is configured for 68020-based systems.  It is equivalent to
           --mmaarrcchh==6688002200.

       --mm6688003300
           Generate output for a 68030.  This is the default when the compiler
           is configured for 68030-based systems.  It is equivalent to
           --mmaarrcchh==6688003300.

       --mm6688004400
           Generate output for a 68040.  This is the default when the compiler
           is configured for 68040-based systems.  It is equivalent to
           --mmaarrcchh==6688004400.

           This option inhibits the use of 68881/68882 instructions that have
           to be emulated by software on the 68040.  Use this option if your
           68040 does not have code to emulate those instructions.

       --mm6688006600
           Generate output for a 68060.  This is the default when the compiler
           is configured for 68060-based systems.  It is equivalent to
           --mmaarrcchh==6688006600.

           This option inhibits the use of 68020 and 68881/68882 instructions
           that have to be emulated by software on the 68060.  Use this option
           if your 68060 does not have code to emulate those instructions.

       --mmccppuu3322
           Generate output for a CPU32.  This is the default when the compiler
           is configured for CPU32-based systems.  It is equivalent to
           --mmaarrcchh==ccppuu3322.

           Use this option for microcontrollers with a CPU32 or CPU32+ core,
           including the 68330, 68331, 68332, 68333, 68334, 68336, 68340,
           68341, 68349 and 68360.

       --mm55220000
           Generate output for a 520X ColdFire CPU.  This is the default when
           the compiler is configured for 520X-based systems.  It is
           equivalent to --mmccppuu==55220066, and is now deprecated in favor of that
           option.

           Use this option for microcontroller with a 5200 core, including the
           MCF5202, MCF5203, MCF5204 and MCF5206.

       --mm55220066ee
           Generate output for a 5206e ColdFire CPU.  The option is now
           deprecated in favor of the equivalent --mmccppuu==55220066ee.

       --mm552288xx
           Generate output for a member of the ColdFire 528X family.  The
           option is now deprecated in favor of the equivalent --mmccppuu==552288xx.

       --mm55330077
           Generate output for a ColdFire 5307 CPU.  The option is now
           deprecated in favor of the equivalent --mmccppuu==55330077.

       --mm55440077
           Generate output for a ColdFire 5407 CPU.  The option is now
           deprecated in favor of the equivalent --mmccppuu==55440077.

       --mmccffvv44ee
           Generate output for a ColdFire V4e family CPU (e.g. 547x/548x).
           This includes use of hardware floating point instructions.  The
           option is equivalent to --mmccppuu==554477xx, and is now deprecated in favor
           of that option.

       --mm6688002200--4400
           Generate output for a 68040, without using any of the new
           instructions.  This results in code which can run relatively
           efficiently on either a 68020/68881 or a 68030 or a 68040.  The
           generated code does use the 68881 instructions that are emulated on
           the 68040.

           The option is equivalent to --mmaarrcchh==6688002200 --mmttuunnee==6688002200--4400.

       --mm6688002200--6600
           Generate output for a 68060, without using any of the new
           instructions.  This results in code which can run relatively
           efficiently on either a 68020/68881 or a 68030 or a 68040.  The
           generated code does use the 68881 instructions that are emulated on
           the 68060.

           The option is equivalent to --mmaarrcchh==6688002200 --mmttuunnee==6688002200--6600.

       --mmhhaarrdd--ffllooaatt
       --mm6688888811
           Generate floating-point instructions.  This is the default for
           68020 and above, and for ColdFire devices that have an FPU.  It
           defines the macro ____HHAAVVEE__6688888811____ on M680x0 targets and ____mmccffffppuu____
           on ColdFire targets.

       --mmssoofftt--ffllooaatt
           Do not generate floating-point instructions; use library calls
           instead.  This is the default for 68000, 68010, and 68832 targets.
           It is also the default for ColdFire devices that have no FPU.

       --mmddiivv
       --mmnnoo--ddiivv
           Generate (do not generate) ColdFire hardware divide and remainder
           instructions.  If --mmaarrcchh is used without --mmccppuu, the default is "on"
           for ColdFire architectures and "off" for M680x0 architectures.
           Otherwise, the default is taken from the target CPU (either the
           default CPU, or the one specified by --mmccppuu).  For example, the
           default is "off" for --mmccppuu==55220066 and "on" for --mmccppuu==55220066ee.

           gcc defines the macro ____mmccffhhwwddiivv____ when this option is enabled.

       --mmsshhoorrtt
           Consider type "int" to be 16 bits wide, like "short int".
           Additionally, parameters passed on the stack are also aligned to a
           16-bit boundary even on targets whose API mandates promotion to
           32-bit.

       --mmnnoo--sshhoorrtt
           Do not consider type "int" to be 16 bits wide.  This is the
           default.

       --mmnnoobbiittffiieelldd
       --mmnnoo--bbiittffiieelldd
           Do not use the bit-field instructions.  The --mm6688000000, --mmccppuu3322 and
           --mm55220000 options imply --mmnnoobbiittffiieelldd.

       --mmbbiittffiieelldd
           Do use the bit-field instructions.  The --mm6688002200 option implies
           --mmbbiittffiieelldd.  This is the default if you use a configuration
           designed for a 68020.

       --mmrrttdd
           Use a different function-calling convention, in which functions
           that take a fixed number of arguments return with the "rtd"
           instruction, which pops their arguments while returning.  This
           saves one instruction in the caller since there is no need to pop
           the arguments there.

           This calling convention is incompatible with the one normally used
           on Unix, so you cannot use it if you need to call libraries
           compiled with the Unix compiler.

           Also, you must provide function prototypes for all functions that
           take variable numbers of arguments (including "printf"); otherwise
           incorrect code will be generated for calls to those functions.

           In addition, seriously incorrect code will result if you call a
           function with too many arguments.  (Normally, extra arguments are
           harmlessly ignored.)

           The "rtd" instruction is supported by the 68010, 68020, 68030,
           68040, 68060 and CPU32 processors, but not by the 68000 or 5200.

       --mmnnoo--rrttdd
           Do not use the calling conventions selected by --mmrrttdd.  This is the
           default.

       --mmaalliiggnn--iinntt
       --mmnnoo--aalliiggnn--iinntt
           Control whether GCC aligns "int", "long", "long long", "float",
           "double", and "long double" variables on a 32-bit boundary
           (--mmaalliiggnn--iinntt) or a 16-bit boundary (--mmnnoo--aalliiggnn--iinntt).  Aligning
           variables on 32-bit boundaries produces code that runs somewhat
           faster on processors with 32-bit busses at the expense of more
           memory.

           WWaarrnniinngg:: if you use the --mmaalliiggnn--iinntt switch, GCC will align
           structures containing the above types  differently than most
           published application binary interface specifications for the m68k.

       --mmppccrreell
           Use the pc-relative addressing mode of the 68000 directly, instead
           of using a global offset table.  At present, this option implies
           --ffppiicc, allowing at most a 16-bit offset for pc-relative addressing.
           --ffPPIICC is not presently supported with --mmppccrreell, though this could be
           supported for 68020 and higher processors.

       --mmnnoo--ssttrriicctt--aalliiggnn
       --mmssttrriicctt--aalliiggnn
           Do not (do) assume that unaligned memory references will be handled
           by the system.

       --mmsseepp--ddaattaa
           Generate code that allows the data segment to be located in a
           different area of memory from the text segment.  This allows for
           execute in place in an environment without virtual memory
           management.  This option implies --ffPPIICC.

       --mmnnoo--sseepp--ddaattaa
           Generate code that assumes that the data segment follows the text
           segment.  This is the default.

       --mmiidd--sshhaarreedd--lliibbrraarryy
           Generate code that supports shared libraries via the library ID
           method.  This allows for execute in place and shared libraries in
           an environment without virtual memory management.  This option
           implies --ffPPIICC.

       --mmnnoo--iidd--sshhaarreedd--lliibbrraarryy
           Generate code that doesnâ€™t assume ID based shared libraries are
           being used.  This is the default.

       --mmsshhaarreedd--lliibbrraarryy--iidd==nn
           Specified the identification number of the ID based shared library
           being compiled.  Specifying a value of 0 will generate more compact
           code, specifying other values will force the allocation of that
           number to the current library but is no more space or time
           efficient than omitting this option.

       --mmxxggoott
       --mmnnoo--xxggoott
           When generating position-independent code for ColdFire, generate
           code that works if the GOT has more than 8192 entries.  This code
           is larger and slower than code generated without this option.  On
           M680x0 processors, this option is not needed; --ffPPIICC suffices.

           GCC normally uses a single instruction to load values from the GOT.
           While this is relatively efficient, it only works if the GOT is
           smaller than about 64k.  Anything larger causes the linker to
           report an error such as:

                   relocation truncated to fit: R_68K_GOT16O foobar

           If this happens, you should recompile your code with --mmxxggoott.  It
           should then work with very large GOTs.  However, code generated
           with --mmxxggoott is less efficient, since it takes 4 instructions to
           fetch the value of a global symbol.

           Note that some linkers, including newer versions of the GNU linker,
           can create multiple GOTs and sort GOT entries.  If you have such a
           linker, you should only need to use --mmxxggoott when compiling a single
           object file that accesses more than 8192 GOT entries.  Very few do.

           These options have no effect unless GCC is generating position-
           independent code.

   MM6688hhcc11xx OOppttiioonnss
       These are the --mm options defined for the 68hc11 and 68hc12
       microcontrollers.  The default values for these options depends on
       which style of microcontroller was selected when the compiler was
       configured; the defaults for the most common choices are given below.

       --mm66881111
       --mm6688hhcc1111
           Generate output for a 68HC11.  This is the default when the
           compiler is configured for 68HC11-based systems.

       --mm66881122
       --mm6688hhcc1122
           Generate output for a 68HC12.  This is the default when the
           compiler is configured for 68HC12-based systems.

       --mm6688SS1122
       --mm6688hhccss1122
           Generate output for a 68HCS12.

       --mmaauuttoo--iinnccddeecc
           Enable the use of 68HC12 pre and post auto-increment and auto-
           decrement addressing modes.

       --mmiinnmmaaxx
       --nnoommiinnmmaaxx
           Enable the use of 68HC12 min and max instructions.

       --mmlloonngg--ccaallllss
       --mmnnoo--lloonngg--ccaallllss
           Treat all calls as being far away (near).  If calls are assumed to
           be far away, the compiler will use the "call" instruction to call a
           function and the "rtc" instruction for returning.

       --mmsshhoorrtt
           Consider type "int" to be 16 bits wide, like "short int".

       --mmssoofftt--rreegg--ccoouunntt==_c_o_u_n_t
           Specify the number of pseudo-soft registers which are used for the
           code generation.  The maximum number is 32.  Using more pseudo-soft
           register may or may not result in better code depending on the
           program.  The default is 4 for 68HC11 and 2 for 68HC12.

   MMCCoorree OOppttiioonnss
       These are the --mm options defined for the Motorola M*Core processors.

       --mmhhaarrddlliitt
       --mmnnoo--hhaarrddlliitt
           Inline constants into the code stream if it can be done in two
           instructions or less.

       --mmddiivv
       --mmnnoo--ddiivv
           Use the divide instruction.  (Enabled by default).

       --mmrreellaaxx--iimmmmeeddiiaattee
       --mmnnoo--rreellaaxx--iimmmmeeddiiaattee
           Allow arbitrary sized immediates in bit operations.

       --mmwwiiddee--bbiittffiieellddss
       --mmnnoo--wwiiddee--bbiittffiieellddss
           Always treat bit-fields as int-sized.

       --mm44bbyyttee--ffuunnccttiioonnss
       --mmnnoo--44bbyyttee--ffuunnccttiioonnss
           Force all functions to be aligned to a four byte boundary.

       --mmccaallllggrraapphh--ddaattaa
       --mmnnoo--ccaallllggrraapphh--ddaattaa
           Emit callgraph information.

       --mmssllooww--bbyytteess
       --mmnnoo--ssllooww--bbyytteess
           Prefer word access when reading byte quantities.

       --mmlliittttllee--eennddiiaann
       --mmbbiigg--eennddiiaann
           Generate code for a little endian target.

       --mm221100
       --mm334400
           Generate code for the 210 processor.

       --mmnnoo--llssiimm
           Assume that run-time support has been provided and so omit the
           simulator library (_l_i_b_s_i_m_._a_) from the linker command line.

       --mmssttaacckk--iinnccrreemmeenntt==_s_i_z_e
           Set the maximum amount for a single stack increment operation.
           Large values can increase the speed of programs which contain
           functions that need a large amount of stack space, but they can
           also trigger a segmentation fault if the stack is extended too
           much.  The default value is 0x1000.

   MMIIPPSS OOppttiioonnss
       --EEBB Generate big-endian code.

       --EELL Generate little-endian code.  This is the default for mmiippss**eell--**--**
           configurations.

       --mmaarrcchh==_a_r_c_h
           Generate code that will run on _a_r_c_h, which can be the name of a
           generic MIPS ISA, or the name of a particular processor.  The ISA
           names are: mmiippss11, mmiippss22, mmiippss33, mmiippss44, mmiippss3322, mmiippss3322rr22, mmiippss6644 and
           mmiippss6644rr22.  The processor names are: 44kkcc, 44kkmm, 44kkpp, 44kksscc, 44kkeecc,
           44kkeemm, 44kkeepp, 44kkssdd, 55kkcc, 55kkff, 2200kkcc, 2244kkcc, 2244kkff22__11, 2244kkff11__11, 2244kkeecc,
           2244kkeeff22__11, 2244kkeeff11__11, 3344kkcc, 3344kkff22__11, 3344kkff11__11, 7744kkcc, 7744kkff22__11, 7744kkff11__11,
           7744kkff33__22, lloooonnggssoonn22ee, lloooonnggssoonn22ff, mm44kk, oocctteeoonn, oorriioonn, rr22000000, rr33000000,
           rr33990000, rr44000000, rr44440000, rr44660000, rr44665500, rr66000000, rr88000000, rrmm77000000, rrmm99000000,
           rr1100000000, rr1122000000, rr1144000000, rr1166000000, ssbb11, ssrr7711000000, vvrr44110000, vvrr44111111,
           vvrr44112200, vvrr44113300, vvrr44330000, vvrr55000000, vvrr55440000, vvrr55550000 and xxllrr.  The
           special value ffrroomm--aabbii selects the most compatible architecture for
           the selected ABI (that is, mmiippss11 for 32-bit ABIs and mmiippss33 for
           64-bit ABIs).

           Native Linux/GNU toolchains also support the value nnaattiivvee, which
           selects the best architecture option for the host processor.
           --mmaarrcchh==nnaattiivvee has no effect if GCC does not recognize the
           processor.

           In processor names, a final 000000 can be abbreviated as kk (for
           example, --mmaarrcchh==rr22kk).  Prefixes are optional, and vvrr may be written
           rr.

           Names of the form _nff22__11 refer to processors with FPUs clocked at
           half the rate of the core, names of the form _nff11__11 refer to
           processors with FPUs clocked at the same rate as the core, and
           names of the form _nff33__22 refer to processors with FPUs clocked a
           ratio of 3:2 with respect to the core.  For compatibility reasons,
           _nff is accepted as a synonym for _nff22__11 while _nxx and _bffxx are accepted
           as synonyms for _nff11__11.

           GCC defines two macros based on the value of this option.  The
           first is __MMIIPPSS__AARRCCHH, which gives the name of target architecture,
           as a string.  The second has the form __MMIIPPSS__AARRCCHH___f_o_o, where _f_o_o is
           the capitalized value of __MMIIPPSS__AARRCCHH.  For example, --mmaarrcchh==rr22000000
           will set __MMIIPPSS__AARRCCHH to ""rr22000000"" and define the macro
           __MMIIPPSS__AARRCCHH__RR22000000.

           Note that the __MMIIPPSS__AARRCCHH macro uses the processor names given
           above.  In other words, it will have the full prefix and will not
           abbreviate 000000 as kk.  In the case of ffrroomm--aabbii, the macro names the
           resolved architecture (either ""mmiippss11"" or ""mmiippss33"").  It names the
           default architecture when no --mmaarrcchh option is given.

       --mmttuunnee==_a_r_c_h
           Optimize for _a_r_c_h.  Among other things, this option controls the
           way instructions are scheduled, and the perceived cost of
           arithmetic operations.  The list of _a_r_c_h values is the same as for
           --mmaarrcchh.

           When this option is not used, GCC will optimize for the processor
           specified by --mmaarrcchh.  By using --mmaarrcchh and --mmttuunnee together, it is
           possible to generate code that will run on a family of processors,
           but optimize the code for one particular member of that family.

           --mmttuunnee defines the macros __MMIIPPSS__TTUUNNEE and __MMIIPPSS__TTUUNNEE___f_o_o, which work
           in the same way as the --mmaarrcchh ones described above.

       --mmiippss11
           Equivalent to --mmaarrcchh==mmiippss11.

       --mmiippss22
           Equivalent to --mmaarrcchh==mmiippss22.

       --mmiippss33
           Equivalent to --mmaarrcchh==mmiippss33.

       --mmiippss44
           Equivalent to --mmaarrcchh==mmiippss44.

       --mmiippss3322
           Equivalent to --mmaarrcchh==mmiippss3322.

       --mmiippss3322rr22
           Equivalent to --mmaarrcchh==mmiippss3322rr22.

       --mmiippss6644
           Equivalent to --mmaarrcchh==mmiippss6644.

       --mmiippss6644rr22
           Equivalent to --mmaarrcchh==mmiippss6644rr22.

       --mmiippss1166
       --mmnnoo--mmiippss1166
           Generate (do not generate) MIPS16 code.  If GCC is targetting a
           MIPS32 or MIPS64 architecture, it will make use of the MIPS16e ASE.

           MIPS16 code generation can also be controlled on a per-function
           basis by means of "mips16" and "nomips16" attributes.

       --mmfflliipp--mmiippss1166
           Generate MIPS16 code on alternating functions.  This option is
           provided for regression testing of mixed MIPS16/non-MIPS16 code
           generation, and is not intended for ordinary use in compiling user
           code.

       --mmiinntteerrlliinnkk--mmiippss1166
       --mmnnoo--iinntteerrlliinnkk--mmiippss1166
           Require (do not require) that non-MIPS16 code be link-compatible
           with MIPS16 code.

           For example, non-MIPS16 code cannot jump directly to MIPS16 code;
           it must either use a call or an indirect jump.  --mmiinntteerrlliinnkk--mmiippss1166
           therefore disables direct jumps unless GCC knows that the target of
           the jump is not MIPS16.

       --mmaabbii==3322
       --mmaabbii==oo6644
       --mmaabbii==nn3322
       --mmaabbii==6644
       --mmaabbii==eeaabbii
           Generate code for the given ABI.

           Note that the EABI has a 32-bit and a 64-bit variant.  GCC normally
           generates 64-bit code when you select a 64-bit architecture, but
           you can use --mmggpp3322 to get 32-bit code instead.

           For information about the O64 ABI, see
           <hhttttpp::////ggcccc..ggnnuu..oorrgg//pprroojjeeccttss//mmiippssoo6644--aabbii..hhttmmll>.

           GCC supports a variant of the o32 ABI in which floating-point
           registers are 64 rather than 32 bits wide.  You can select this
           combination with --mmaabbii==3322 --mmffpp6644.  This ABI relies on the mmtthhcc11 and
           mmffhhcc11 instructions and is therefore only supported for MIPS32R2
           processors.

           The register assignments for arguments and return values remain the
           same, but each scalar value is passed in a single 64-bit register
           rather than a pair of 32-bit registers.  For example, scalar
           floating-point values are returned in $$ff00 only, not a $$ff00/$$ff11 pair.
           The set of call-saved registers also remains the same, but all 64
           bits are saved.

       --mmaabbiiccaallllss
       --mmnnoo--aabbiiccaallllss
           Generate (do not generate) code that is suitable for SVR4-style
           dynamic objects.  --mmaabbiiccaallllss is the default for SVR4-based systems.

       --mmsshhaarreedd
       --mmnnoo--sshhaarreedd
           Generate (do not generate) code that is fully position-independent,
           and that can therefore be linked into shared libraries.  This
           option only affects --mmaabbiiccaallllss.

           All --mmaabbiiccaallllss code has traditionally been position-independent,
           regardless of options like --ffPPIICC and --ffppiicc.  However, as an
           extension, the GNU toolchain allows executables to use absolute
           accesses for locally-binding symbols.  It can also use shorter GP
           initialization sequences and generate direct calls to locally-
           defined functions.  This mode is selected by --mmnnoo--sshhaarreedd.

           --mmnnoo--sshhaarreedd depends on binutils 2.16 or higher and generates
           objects that can only be linked by the GNU linker.  However, the
           option does not affect the ABI of the final executable; it only
           affects the ABI of relocatable objects.  Using --mmnnoo--sshhaarreedd will
           generally make executables both smaller and quicker.

           --mmsshhaarreedd is the default.

       --mmpplltt
       --mmnnoo--pplltt
           Assume (do not assume) that the static and dynamic linkers support
           PLTs and copy relocations.  This option only affects --mmnnoo--sshhaarreedd
           --mmaabbiiccaallllss.  For the n64 ABI, this option has no effect without
           --mmssyymm3322.

           You can make --mmpplltt the default by configuring GCC with
           ----wwiitthh--mmiippss--pplltt.  The default is --mmnnoo--pplltt otherwise.

       --mmxxggoott
       --mmnnoo--xxggoott
           Lift (do not lift) the usual restrictions on the size of the global
           offset table.

           GCC normally uses a single instruction to load values from the GOT.
           While this is relatively efficient, it will only work if the GOT is
           smaller than about 64k.  Anything larger will cause the linker to
           report an error such as:

                   relocation truncated to fit: R_MIPS_GOT16 foobar

           If this happens, you should recompile your code with --mmxxggoott.  It
           should then work with very large GOTs, although it will also be
           less efficient, since it will take three instructions to fetch the
           value of a global symbol.

           Note that some linkers can create multiple GOTs.  If you have such
           a linker, you should only need to use --mmxxggoott when a single object
           file accesses more than 64kâ€™s worth of GOT entries.  Very few do.

           These options have no effect unless GCC is generating position
           independent code.

       --mmggpp3322
           Assume that general-purpose registers are 32 bits wide.

       --mmggpp6644
           Assume that general-purpose registers are 64 bits wide.

       --mmffpp3322
           Assume that floating-point registers are 32 bits wide.

       --mmffpp6644
           Assume that floating-point registers are 64 bits wide.

       --mmhhaarrdd--ffllooaatt
           Use floating-point coprocessor instructions.

       --mmssoofftt--ffllooaatt
           Do not use floating-point coprocessor instructions.  Implement
           floating-point calculations using library calls instead.

       --mmssiinnggllee--ffllooaatt
           Assume that the floating-point coprocessor only supports single-
           precision operations.

       --mmddoouubbllee--ffllooaatt
           Assume that the floating-point coprocessor supports double-
           precision operations.  This is the default.

       --mmllllsscc
       --mmnnoo--llllsscc
           Use (do not use) llll, sscc, and ssyynncc instructions to implement atomic
           memory built-in functions.  When neither option is specified, GCC
           will use the instructions if the target architecture supports them.

           --mmllllsscc is useful if the runtime environment can emulate the
           instructions and --mmnnoo--llllsscc can be useful when compiling for
           nonstandard ISAs.  You can make either option the default by
           configuring GCC with ----wwiitthh--llllsscc and ----wwiitthhoouutt--llllsscc respectively.
           ----wwiitthh--llllsscc is the default for some configurations; see the
           installation documentation for details.

       --mmddsspp
       --mmnnoo--ddsspp
           Use (do not use) revision 1 of the MIPS DSP ASE.
             This option defines the preprocessor macro ____mmiippss__ddsspp.  It also
           defines ____mmiippss__ddsspp__rreevv to 1.

       --mmddsspprr22
       --mmnnoo--ddsspprr22
           Use (do not use) revision 2 of the MIPS DSP ASE.
             This option defines the preprocessor macros ____mmiippss__ddsspp and
           ____mmiippss__ddsspprr22.  It also defines ____mmiippss__ddsspp__rreevv to 2.

       --mmssmmaarrttmmiippss
       --mmnnoo--ssmmaarrttmmiippss
           Use (do not use) the MIPS SmartMIPS ASE.

       --mmppaaiirreedd--ssiinnggllee
       --mmnnoo--ppaaiirreedd--ssiinnggllee
           Use (do not use) paired-single floating-point instructions.
             This option requires hardware floating-point support to be
           enabled.

       --mmddmmxx
       --mmnnoo--mmddmmxx
           Use (do not use) MIPS Digital Media Extension instructions.  This
           option can only be used when generating 64-bit code and requires
           hardware floating-point support to be enabled.

       --mmiippss33dd
       --mmnnoo--mmiippss33dd
           Use (do not use) the MIPS-3D ASE.  The option --mmiippss33dd implies
           --mmppaaiirreedd--ssiinnggllee.

       --mmmmtt
       --mmnnoo--mmtt
           Use (do not use) MT Multithreading instructions.

       --mmlloonngg6644
           Force "long" types to be 64 bits wide.  See --mmlloonngg3322 for an
           explanation of the default and the way that the pointer size is
           determined.

       --mmlloonngg3322
           Force "long", "int", and pointer types to be 32 bits wide.

           The default size of "int"s, "long"s and pointers depends on the
           ABI.  All the supported ABIs use 32-bit "int"s.  The n64 ABI uses
           64-bit "long"s, as does the 64-bit EABI; the others use 32-bit
           "long"s.  Pointers are the same size as "long"s, or the same size
           as integer registers, whichever is smaller.

       --mmssyymm3322
       --mmnnoo--ssyymm3322
           Assume (do not assume) that all symbols have 32-bit values,
           regardless of the selected ABI.  This option is useful in
           combination with --mmaabbii==6644 and --mmnnoo--aabbiiccaallllss because it allows GCC
           to generate shorter and faster references to symbolic addresses.

       --GG _n_u_m
           Put definitions of externally-visible data in a small data section
           if that data is no bigger than _n_u_m bytes.  GCC can then access the
           data more efficiently; see --mmggppoopptt for details.

           The default --GG option depends on the configuration.

       --mmllooccaall--ssddaattaa
       --mmnnoo--llooccaall--ssddaattaa
           Extend (do not extend) the --GG behavior to local data too, such as
           to static variables in C.  --mmllooccaall--ssddaattaa is the default for all
           configurations.

           If the linker complains that an application is using too much small
           data, you might want to try rebuilding the less performance-
           critical parts with --mmnnoo--llooccaall--ssddaattaa.  You might also want to build
           large libraries with --mmnnoo--llooccaall--ssddaattaa, so that the libraries leave
           more room for the main program.

       --mmeexxtteerrnn--ssddaattaa
       --mmnnoo--eexxtteerrnn--ssddaattaa
           Assume (do not assume) that externally-defined data will be in a
           small data section if that data is within the --GG limit.
           --mmeexxtteerrnn--ssddaattaa is the default for all configurations.

           If you compile a module _M_o_d with --mmeexxtteerrnn--ssddaattaa --GG _n_u_m --mmggppoopptt, and
           _M_o_d references a variable _V_a_r that is no bigger than _n_u_m bytes, you
           must make sure that _V_a_r is placed in a small data section.  If _V_a_r
           is defined by another module, you must either compile that module
           with a high-enough --GG setting or attach a "section" attribute to
           _V_a_râ€™s definition.  If _V_a_r is common, you must link the application
           with a high-enough --GG setting.

           The easiest way of satisfying these restrictions is to compile and
           link every module with the same --GG option.  However, you may wish
           to build a library that supports several different small data
           limits.  You can do this by compiling the library with the highest
           supported --GG setting and additionally using --mmnnoo--eexxtteerrnn--ssddaattaa to
           stop the library from making assumptions about externally-defined
           data.

       --mmggppoopptt
       --mmnnoo--ggppoopptt
           Use (do not use) GP-relative accesses for symbols that are known to
           be in a small data section; see --GG, --mmllooccaall--ssddaattaa and
           --mmeexxtteerrnn--ssddaattaa.  --mmggppoopptt is the default for all configurations.

           --mmnnoo--ggppoopptt is useful for cases where the $gp register might not
           hold the value of "_gp".  For example, if the code is part of a
           library that might be used in a boot monitor, programs that call
           boot monitor routines will pass an unknown value in $gp.  (In such
           situations, the boot monitor itself would usually be compiled with
           --GG00.)

           --mmnnoo--ggppoopptt implies --mmnnoo--llooccaall--ssddaattaa and --mmnnoo--eexxtteerrnn--ssddaattaa.

       --mmeemmbbeeddddeedd--ddaattaa
       --mmnnoo--eemmbbeeddddeedd--ddaattaa
           Allocate variables to the read-only data section first if possible,
           then next in the small data section if possible, otherwise in data.
           This gives slightly slower code than the default, but reduces the
           amount of RAM required when executing, and thus may be preferred
           for some embedded systems.

       --mmuunniinniitt--ccoonnsstt--iinn--rrooddaattaa
       --mmnnoo--uunniinniitt--ccoonnsstt--iinn--rrooddaattaa
           Put uninitialized "const" variables in the read-only data section.
           This option is only meaningful in conjunction with --mmeemmbbeeddddeedd--ddaattaa.

       --mmccooddee--rreeaaddaabbllee==_s_e_t_t_i_n_g
           Specify whether GCC may generate code that reads from executable
           sections.  There are three possible settings:

           --mmccooddee--rreeaaddaabbllee==yyeess
               Instructions may freely access executable sections.  This is
               the default setting.

           --mmccooddee--rreeaaddaabbllee==ppccrreell
               MIPS16 PC-relative load instructions can access executable
               sections, but other instructions must not do so.  This option
               is useful on 4KSc and 4KSd processors when the code TLBs have
               the Read Inhibit bit set.  It is also useful on processors that
               can be configured to have a dual instruction/data SRAM
               interface and that, like the M4K, automatically redirect PC-
               relative loads to the instruction RAM.

           --mmccooddee--rreeaaddaabbllee==nnoo
               Instructions must not access executable sections.  This option
               can be useful on targets that are configured to have a dual
               instruction/data SRAM interface but that (unlike the M4K) do
               not automatically redirect PC-relative loads to the instruction
               RAM.

       --mmsspplliitt--aaddddrreesssseess
       --mmnnoo--sspplliitt--aaddddrreesssseess
           Enable (disable) use of the "%hi()" and "%lo()" assembler
           relocation operators.  This option has been superseded by
           --mmeexxpplliicciitt--rreellooccss but is retained for backwards compatibility.

       --mmeexxpplliicciitt--rreellooccss
       --mmnnoo--eexxpplliicciitt--rreellooccss
           Use (do not use) assembler relocation operators when dealing with
           symbolic addresses.  The alternative, selected by
           --mmnnoo--eexxpplliicciitt--rreellooccss, is to use assembler macros instead.

           --mmeexxpplliicciitt--rreellooccss is the default if GCC was configured to use an
           assembler that supports relocation operators.

       --mmcchheecckk--zzeerroo--ddiivviissiioonn
       --mmnnoo--cchheecckk--zzeerroo--ddiivviissiioonn
           Trap (do not trap) on integer division by zero.

           The default is --mmcchheecckk--zzeerroo--ddiivviissiioonn.

       --mmddiivviiddee--ttrraappss
       --mmddiivviiddee--bbrreeaakkss
           MIPS systems check for division by zero by generating either a
           conditional trap or a break instruction.  Using traps results in
           smaller code, but is only supported on MIPS II and later.  Also,
           some versions of the Linux kernel have a bug that prevents trap
           from generating the proper signal ("SIGFPE").  Use --mmddiivviiddee--ttrraappss
           to allow conditional traps on architectures that support them and
           --mmddiivviiddee--bbrreeaakkss to force the use of breaks.

           The default is usually --mmddiivviiddee--ttrraappss, but this can be overridden
           at configure time using ----wwiitthh--ddiivviiddee==bbrreeaakkss.  Divide-by-zero
           checks can be completely disabled using --mmnnoo--cchheecckk--zzeerroo--ddiivviissiioonn.

       --mmmmeemmccppyy
       --mmnnoo--mmeemmccppyy
           Force (do not force) the use of "memcpy()" for non-trivial block
           moves.  The default is --mmnnoo--mmeemmccppyy, which allows GCC to inline most
           constant-sized copies.

       --mmlloonngg--ccaallllss
       --mmnnoo--lloonngg--ccaallllss
           Disable (do not disable) use of the "jal" instruction.  Calling
           functions using "jal" is more efficient but requires the caller and
           callee to be in the same 256 megabyte segment.

           This option has no effect on abicalls code.  The default is
           --mmnnoo--lloonngg--ccaallllss.

       --mmmmaadd
       --mmnnoo--mmaadd
           Enable (disable) use of the "mad", "madu" and "mul" instructions,
           as provided by the R4650 ISA.

       --mmffuusseedd--mmaadddd
       --mmnnoo--ffuusseedd--mmaadddd
           Enable (disable) use of the floating point multiply-accumulate
           instructions, when they are available.  The default is
           --mmffuusseedd--mmaadddd.

           When multiply-accumulate instructions are used, the intermediate
           product is calculated to infinite precision and is not subject to
           the FCSR Flush to Zero bit.  This may be undesirable in some
           circumstances.

       --nnooccpppp
           Tell the MIPS assembler to not run its preprocessor over user
           assembler files (with a ..ss suffix) when assembling them.

       --mmffiixx--rr44000000
       --mmnnoo--ffiixx--rr44000000
           Work around certain R4000 CPU errata:

           -   A double-word or a variable shift may give an incorrect result
               if executed immediately after starting an integer division.

           -   A double-word or a variable shift may give an incorrect result
               if executed while an integer multiplication is in progress.

           -   An integer division may give an incorrect result if started in
               a delay slot of a taken branch or a jump.

       --mmffiixx--rr44440000
       --mmnnoo--ffiixx--rr44440000
           Work around certain R4400 CPU errata:

           -   A double-word or a variable shift may give an incorrect result
               if executed immediately after starting an integer division.

       --mmffiixx--rr1100000000
       --mmnnoo--ffiixx--rr1100000000
           Work around certain R10000 errata:

           -   "ll"/"sc" sequences may not behave atomically on revisions
               prior to 3.0.  They may deadlock on revisions 2.6 and earlier.

           This option can only be used if the target architecture supports
           branch-likely instructions.  --mmffiixx--rr1100000000 is the default when
           --mmaarrcchh==rr1100000000 is used; --mmnnoo--ffiixx--rr1100000000 is the default otherwise.

       --mmffiixx--vvrr44112200
       --mmnnoo--ffiixx--vvrr44112200
           Work around certain VR4120 errata:

           -   "dmultu" does not always produce the correct result.

           -   "div" and "ddiv" do not always produce the correct result if
               one of the operands is negative.

           The workarounds for the division errata rely on special functions
           in _l_i_b_g_c_c_._a.  At present, these functions are only provided by the
           "mips64vr*-elf" configurations.

           Other VR4120 errata require a nop to be inserted between certain
           pairs of instructions.  These errata are handled by the assembler,
           not by GCC itself.

       --mmffiixx--vvrr44113300
           Work around the VR4130 "mflo"/"mfhi" errata.  The workarounds are
           implemented by the assembler rather than by GCC, although GCC will
           avoid using "mflo" and "mfhi" if the VR4130 "macc", "macchi",
           "dmacc" and "dmacchi" instructions are available instead.

       --mmffiixx--ssbb11
       --mmnnoo--ffiixx--ssbb11
           Work around certain SB-1 CPU core errata.  (This flag currently
           works around the SB-1 revision 2 "F1" and "F2" floating point
           errata.)

       --mmrr1100kk--ccaacchhee--bbaarrrriieerr==_s_e_t_t_i_n_g
           Specify whether GCC should insert cache barriers to avoid the side-
           effects of speculation on R10K processors.

           In common with many processors, the R10K tries to predict the
           outcome of a conditional branch and speculatively executes
           instructions from the "taken" branch.  It later aborts these
           instructions if the predicted outcome was wrong.  However, on the
           R10K, even aborted instructions can have side effects.

           This problem only affects kernel stores and, depending on the
           system, kernel loads.  As an example, a speculatively-executed
           store may load the target memory into cache and mark the cache line
           as dirty, even if the store itself is later aborted.  If a DMA
           operation writes to the same area of memory before the "dirty" line
           is flushed, the cached data will overwrite the DMA-ed data.  See
           the R10K processor manual for a full description, including other
           potential problems.

           One workaround is to insert cache barrier instructions before every
           memory access that might be speculatively executed and that might
           have side effects even if aborted.  --mmrr1100kk--ccaacchhee--bbaarrrriieerr==_s_e_t_t_i_n_g
           controls GCCâ€™s implementation of this workaround.  It assumes that
           aborted accesses to any byte in the following regions will not have
           side effects:

           1.  the memory occupied by the current functionâ€™s stack frame;

           2.  the memory occupied by an incoming stack argument;

           3.  the memory occupied by an object with a link-time-constant
               address.

           It is the kernelâ€™s responsibility to ensure that speculative
           accesses to these regions are indeed safe.

           If the input program contains a function declaration such as:

                   void foo (void);

           then the implementation of "foo" must allow "j foo" and "jal foo"
           to be executed speculatively.  GCC honors this restriction for
           functions it compiles itself.  It expects non-GCC functions (such
           as hand-written assembly code) to do the same.

           The option has three forms:

           --mmrr1100kk--ccaacchhee--bbaarrrriieerr==llooaadd--ssttoorree
               Insert a cache barrier before a load or store that might be
               speculatively executed and that might have side effects even if
               aborted.

           --mmrr1100kk--ccaacchhee--bbaarrrriieerr==ssttoorree
               Insert a cache barrier before a store that might be
               speculatively executed and that might have side effects even if
               aborted.

           --mmrr1100kk--ccaacchhee--bbaarrrriieerr==nnoonnee
               Disable the insertion of cache barriers.  This is the default
               setting.

       --mmfflluusshh--ffuunncc==_f_u_n_c
       --mmnnoo--fflluusshh--ffuunncc
           Specifies the function to call to flush the I and D caches, or to
           not call any such function.  If called, the function must take the
           same arguments as the common "_flush_func()", that is, the address
           of the memory range for which the cache is being flushed, the size
           of the memory range, and the number 3 (to flush both caches).  The
           default depends on the target GCC was configured for, but commonly
           is either __fflluusshh__ffuunncc or ____ccppuu__fflluusshh.

       mmbbrraanncchh--ccoosstt==_n_u_m
           Set the cost of branches to roughly _n_u_m "simple" instructions.
           This cost is only a heuristic and is not guaranteed to produce
           consistent results across releases.  A zero cost redundantly
           selects the default, which is based on the --mmttuunnee setting.

       --mmbbrraanncchh--lliikkeellyy
       --mmnnoo--bbrraanncchh--lliikkeellyy
           Enable or disable use of Branch Likely instructions, regardless of
           the default for the selected architecture.  By default, Branch
           Likely instructions may be generated if they are supported by the
           selected architecture.  An exception is for the MIPS32 and MIPS64
           architectures and processors which implement those architectures;
           for those, Branch Likely instructions will not be generated by
           default because the MIPS32 and MIPS64 architectures specifically
           deprecate their use.

       --mmffpp--eexxcceeppttiioonnss
       --mmnnoo--ffpp--eexxcceeppttiioonnss
           Specifies whether FP exceptions are enabled.  This affects how we
           schedule FP instructions for some processors.  The default is that
           FP exceptions are enabled.

           For instance, on the SB-1, if FP exceptions are disabled, and we
           are emitting 64-bit code, then we can use both FP pipes.
           Otherwise, we can only use one FP pipe.

       --mmvvrr44113300--aalliiggnn
       --mmnnoo--vvrr44113300--aalliiggnn
           The VR4130 pipeline is two-way superscalar, but can only issue two
           instructions together if the first one is 8-byte aligned.  When
           this option is enabled, GCC will align pairs of instructions that
           it thinks should execute in parallel.

           This option only has an effect when optimizing for the VR4130.  It
           normally makes code faster, but at the expense of making it bigger.
           It is enabled by default at optimization level --OO33.

   MMMMIIXX OOppttiioonnss
       These options are defined for the MMIX:

       --mmlliibbffuunnccss
       --mmnnoo--lliibbffuunnccss
           Specify that intrinsic library functions are being compiled,
           passing all values in registers, no matter the size.

       --mmeeppssiilloonn
       --mmnnoo--eeppssiilloonn
           Generate floating-point comparison instructions that compare with
           respect to the "rE" epsilon register.

       --mmaabbii==mmmmiixxwwaarree
       --mmaabbii==ggnnuu
           Generate code that passes function parameters and return values
           that (in the called function) are seen as registers $0 and up, as
           opposed to the GNU ABI which uses global registers $231 and up.

       --mmzzeerroo--eexxtteenndd
       --mmnnoo--zzeerroo--eexxtteenndd
           When reading data from memory in sizes shorter than 64 bits, use
           (do not use) zero-extending load instructions by default, rather
           than sign-extending ones.

       --mmkknnuutthhddiivv
       --mmnnoo--kknnuutthhddiivv
           Make the result of a division yielding a remainder have the same
           sign as the divisor.  With the default, --mmnnoo--kknnuutthhddiivv, the sign of
           the remainder follows the sign of the dividend.  Both methods are
           arithmetically valid, the latter being almost exclusively used.

       --mmttoopplleevveell--ssyymmbboollss
       --mmnnoo--ttoopplleevveell--ssyymmbboollss
           Prepend (do not prepend) a :: to all global symbols, so the assembly
           code can be used with the "PREFIX" assembly directive.

       --mmeellff
           Generate an executable in the ELF format, rather than the default
           mmmmoo format used by the mmmmiixx simulator.

       --mmbbrraanncchh--pprreeddiicctt
       --mmnnoo--bbrraanncchh--pprreeddiicctt
           Use (do not use) the probable-branch instructions, when static
           branch prediction indicates a probable branch.

       --mmbbaassee--aaddddrreesssseess
       --mmnnoo--bbaassee--aaddddrreesssseess
           Generate (do not generate) code that uses _b_a_s_e _a_d_d_r_e_s_s_e_s.  Using a
           base address automatically generates a request (handled by the
           assembler and the linker) for a constant to be set up in a global
           register.  The register is used for one or more base address
           requests within the range 0 to 255 from the value held in the
           register.  The generally leads to short and fast code, but the
           number of different data items that can be addressed is limited.
           This means that a program that uses lots of static data may require
           --mmnnoo--bbaassee--aaddddrreesssseess.

       --mmssiinnggllee--eexxiitt
       --mmnnoo--ssiinnggllee--eexxiitt
           Force (do not force) generated code to have a single exit point in
           each function.

   MMNN1100330000 OOppttiioonnss
       These --mm options are defined for Matsushita MN10300 architectures:

       --mmmmuulltt--bbuugg
           Generate code to avoid bugs in the multiply instructions for the
           MN10300 processors.  This is the default.

       --mmnnoo--mmuulltt--bbuugg
           Do not generate code to avoid bugs in the multiply instructions for
           the MN10300 processors.

       --mmaamm3333
           Generate code which uses features specific to the AM33 processor.

       --mmnnoo--aamm3333
           Do not generate code which uses features specific to the AM33
           processor.  This is the default.

       --mmrreettuurrnn--ppooiinntteerr--oonn--dd00
           When generating a function which returns a pointer, return the
           pointer in both "a0" and "d0".  Otherwise, the pointer is returned
           only in a0, and attempts to call such functions without a prototype
           would result in errors.  Note that this option is on by default;
           use --mmnnoo--rreettuurrnn--ppooiinntteerr--oonn--dd00 to disable it.

       --mmnnoo--ccrrtt00
           Do not link in the C run-time initialization object file.

       --mmrreellaaxx
           Indicate to the linker that it should perform a relaxation
           optimization pass to shorten branches, calls and absolute memory
           addresses.  This option only has an effect when used on the command
           line for the final link step.

           This option makes symbolic debugging impossible.

   PPDDPP--1111 OOppttiioonnss
       These options are defined for the PDP-11:

       --mmffppuu
           Use hardware FPP floating point.  This is the default.  (FIS
           floating point on the PDP-11/40 is not supported.)

       --mmssoofftt--ffllooaatt
           Do not use hardware floating point.

       --mmaacc00
           Return floating-point results in ac0 (fr0 in Unix assembler
           syntax).

       --mmnnoo--aacc00
           Return floating-point results in memory.  This is the default.

       --mm4400
           Generate code for a PDP-11/40.

       --mm4455
           Generate code for a PDP-11/45.  This is the default.

       --mm1100
           Generate code for a PDP-11/10.

       --mmbbccooppyy--bbuuiillttiinn
           Use inline "movmemhi" patterns for copying memory.  This is the
           default.

       --mmbbccooppyy
           Do not use inline "movmemhi" patterns for copying memory.

       --mmiinntt1166
       --mmnnoo--iinntt3322
           Use 16-bit "int".  This is the default.

       --mmiinntt3322
       --mmnnoo--iinntt1166
           Use 32-bit "int".

       --mmffllooaatt6644
       --mmnnoo--ffllooaatt3322
           Use 64-bit "float".  This is the default.

       --mmffllooaatt3322
       --mmnnoo--ffllooaatt6644
           Use 32-bit "float".

       --mmaabbsshhii
           Use "abshi2" pattern.  This is the default.

       --mmnnoo--aabbsshhii
           Do not use "abshi2" pattern.

       --mmbbrraanncchh--eexxppeennssiivvee
           Pretend that branches are expensive.  This is for experimenting
           with code generation only.

       --mmbbrraanncchh--cchheeaapp
           Do not pretend that branches are expensive.  This is the default.

       --mmsspplliitt
           Generate code for a system with split I&D.

       --mmnnoo--sspplliitt
           Generate code for a system without split I&D.  This is the default.

       --mmuunniixx--aassmm
           Use Unix assembler syntax.  This is the default when configured for
           ppddpp1111--**--bbssdd.

       --mmddeecc--aassmm
           Use DEC assembler syntax.  This is the default when configured for
           any PDP-11 target other than ppddpp1111--**--bbssdd.

   ppiiccooCChhiipp OOppttiioonnss
       These --mm options are defined for picoChip implementations:

       --mmaaee==_a_e___t_y_p_e
           Set the instruction set, register set, and instruction scheduling
           parameters for array element type _a_e___t_y_p_e.  Supported values for
           _a_e___t_y_p_e are AANNYY, MMUULL, and MMAACC.

           --mmaaee==AANNYY selects a completely generic AE type.  Code generated with
           this option will run on any of the other AE types.  The code will
           not be as efficient as it would be if compiled for a specific AE
           type, and some types of operation (e.g., multiplication) will not
           work properly on all types of AE.

           --mmaaee==MMUULL selects a MUL AE type.  This is the most useful AE type
           for compiled code, and is the default.

           --mmaaee==MMAACC selects a DSP-style MAC AE.  Code compiled with this
           option may suffer from poor performance of byte (char)
           manipulation, since the DSP AE does not provide hardware support
           for byte load/stores.

       --mmssyymmbbooll--aass--aaddddrreessss
           Enable the compiler to directly use a symbol name as an address in
           a load/store instruction, without first loading it into a register.
           Typically, the use of this option will generate larger programs,
           which run faster than when the option isnâ€™t used.  However, the
           results vary from program to program, so it is left as a user
           option, rather than being permanently enabled.

       --mmnnoo--iinneeffffiicciieenntt--wwaarrnniinnggss
           Disables warnings about the generation of inefficient code.  These
           warnings can be generated, for example, when compiling code which
           performs byte-level memory operations on the MAC AE type.  The MAC
           AE has no hardware support for byte-level memory operations, so all
           byte load/stores must be synthesized from word load/store
           operations.  This is inefficient and a warning will be generated
           indicating to the programmer that they should rewrite the code to
           avoid byte operations, or to target an AE type which has the
           necessary hardware support.  This option enables the warning to be
           turned off.

   PPoowweerrPPCC OOppttiioonnss
       These are listed under

   IIBBMM RRSS//66000000 aanndd PPoowweerrPPCC OOppttiioonnss
       These --mm options are defined for the IBM RS/6000 and PowerPC:

       --mmppoowweerr
       --mmnnoo--ppoowweerr
       --mmppoowweerr22
       --mmnnoo--ppoowweerr22
       --mmppoowweerrppcc
       --mmnnoo--ppoowweerrppcc
       --mmppoowweerrppcc--ggppoopptt
       --mmnnoo--ppoowweerrppcc--ggppoopptt
       --mmppoowweerrppcc--ggffxxoopptt
       --mmnnoo--ppoowweerrppcc--ggffxxoopptt
       --mmppoowweerrppcc6644
       --mmnnoo--ppoowweerrppcc6644
       --mmmmffccrrff
       --mmnnoo--mmffccrrff
       --mmppooppccnnttbb
       --mmnnoo--ppooppccnnttbb
       --mmppooppccnnttdd
       --mmnnoo--ppooppccnnttdd
       --mmffpprrnndd
       --mmnnoo--ffpprrnndd
       --mmccmmppbb
       --mmnnoo--ccmmppbb
       --mmmmffppggpprr
       --mmnnoo--mmffppggpprr
       --mmhhaarrdd--ddffpp
       --mmnnoo--hhaarrdd--ddffpp
           GCC supports two related instruction set architectures for the
           RS/6000 and PowerPC.  The _P_O_W_E_R instruction set are those
           instructions supported by the rriiooss chip set used in the original
           RS/6000 systems and the _P_o_w_e_r_P_C instruction set is the architecture
           of the Freescale MPC5xx, MPC6xx, MPC8xx microprocessors, and the
           IBM 4xx, 6xx, and follow-on microprocessors.

           Neither architecture is a subset of the other.  However there is a
           large common subset of instructions supported by both.  An MQ
           register is included in processors supporting the POWER
           architecture.

           You use these options to specify which instructions are available
           on the processor you are using.  The default value of these options
           is determined when configuring GCC.  Specifying the --mmccppuu==_c_p_u___t_y_p_e
           overrides the specification of these options.  We recommend you use
           the --mmccppuu==_c_p_u___t_y_p_e option rather than the options listed above.

           The --mmppoowweerr option allows GCC to generate instructions that are
           found only in the POWER architecture and to use the MQ register.
           Specifying --mmppoowweerr22 implies --ppoowweerr and also allows GCC to generate
           instructions that are present in the POWER2 architecture but not
           the original POWER architecture.

           The --mmppoowweerrppcc option allows GCC to generate instructions that are
           found only in the 32-bit subset of the PowerPC architecture.
           Specifying --mmppoowweerrppcc--ggppoopptt implies --mmppoowweerrppcc and also allows GCC to
           use the optional PowerPC architecture instructions in the General
           Purpose group, including floating-point square root.  Specifying
           --mmppoowweerrppcc--ggffxxoopptt implies --mmppoowweerrppcc and also allows GCC to use the
           optional PowerPC architecture instructions in the Graphics group,
           including floating-point select.

           The --mmmmffccrrff option allows GCC to generate the move from condition
           register field instruction implemented on the POWER4 processor and
           other processors that support the PowerPC V2.01 architecture.  The
           --mmppooppccnnttbb option allows GCC to generate the popcount and double
           precision FP reciprocal estimate instruction implemented on the
           POWER5 processor and other processors that support the PowerPC
           V2.02 architecture.  The --mmppooppccnnttdd option allows GCC to generate
           the popcount instruction implemented on the POWER7 processor and
           other processors that support the PowerPC V2.06 architecture.  The
           --mmffpprrnndd option allows GCC to generate the FP round to integer
           instructions implemented on the POWER5+ processor and other
           processors that support the PowerPC V2.03 architecture.  The --mmccmmppbb
           option allows GCC to generate the compare bytes instruction
           implemented on the POWER6 processor and other processors that
           support the PowerPC V2.05 architecture.  The --mmmmffppggpprr option allows
           GCC to generate the FP move to/from general purpose register
           instructions implemented on the POWER6X processor and other
           processors that support the extended PowerPC V2.05 architecture.
           The --mmhhaarrdd--ddffpp option allows GCC to generate the decimal floating
           point instructions implemented on some POWER processors.

           The --mmppoowweerrppcc6644 option allows GCC to generate the additional 64-bit
           instructions that are found in the full PowerPC64 architecture and
           to treat GPRs as 64-bit, doubleword quantities.  GCC defaults to
           --mmnnoo--ppoowweerrppcc6644.

           If you specify both --mmnnoo--ppoowweerr and --mmnnoo--ppoowweerrppcc, GCC will use only
           the instructions in the common subset of both architectures plus
           some special AIX common-mode calls, and will not use the MQ
           register.  Specifying both --mmppoowweerr and --mmppoowweerrppcc permits GCC to use
           any instruction from either architecture and to allow use of the MQ
           register; specify this for the Motorola MPC601.

       --mmnneeww--mmnneemmoonniiccss
       --mmoolldd--mmnneemmoonniiccss
           Select which mnemonics to use in the generated assembler code.
           With --mmnneeww--mmnneemmoonniiccss, GCC uses the assembler mnemonics defined for
           the PowerPC architecture.  With --mmoolldd--mmnneemmoonniiccss it uses the
           assembler mnemonics defined for the POWER architecture.
           Instructions defined in only one architecture have only one
           mnemonic; GCC uses that mnemonic irrespective of which of these
           options is specified.

           GCC defaults to the mnemonics appropriate for the architecture in
           use.  Specifying --mmccppuu==_c_p_u___t_y_p_e sometimes overrides the value of
           these option.  Unless you are building a cross-compiler, you should
           normally not specify either --mmnneeww--mmnneemmoonniiccss or --mmoolldd--mmnneemmoonniiccss, but
           should instead accept the default.

       --mmccppuu==_c_p_u___t_y_p_e
           Set architecture type, register usage, choice of mnemonics, and
           instruction scheduling parameters for machine type _c_p_u___t_y_p_e.
           Supported values for _c_p_u___t_y_p_e are 440011, 440033, 440055, 440055ffpp, 444400, 444400ffpp,
           446644, 446644ffpp, 550055, 660011, 660022, 660033, 660033ee, 660044, 660044ee, 662200, 663300, 774400,
           77440000, 77445500, 775500, 880011, 882211, 882233, 886600, 997700, 88554400, ee330000cc22, ee330000cc33,
           ee550000mmcc, eecc660033ee, GG33, GG44, GG55, ppoowweerr, ppoowweerr22, ppoowweerr33, ppoowweerr44, ppoowweerr55,
           ppoowweerr55++, ppoowweerr66, ppoowweerr66xx, ppoowweerr77, ccoommmmoonn, ppoowweerrppcc, ppoowweerrppcc6644, rriiooss,
           rriiooss11, rriiooss22, rrsscc, and rrss6644.

           --mmccppuu==ccoommmmoonn selects a completely generic processor.  Code
           generated under this option will run on any POWER or PowerPC
           processor.  GCC will use only the instructions in the common subset
           of both architectures, and will not use the MQ register.  GCC
           assumes a generic processor model for scheduling purposes.

           --mmccppuu==ppoowweerr, --mmccppuu==ppoowweerr22, --mmccppuu==ppoowweerrppcc, and --mmccppuu==ppoowweerrppcc6644
           specify generic POWER, POWER2, pure 32-bit PowerPC (i.e., not
           MPC601), and 64-bit PowerPC architecture machine types, with an
           appropriate, generic processor model assumed for scheduling
           purposes.

           The other options specify a specific processor.  Code generated
           under those options will run best on that processor, and may not
           run at all on others.

           The --mmccppuu options automatically enable or disable the following
           options:

           --mmaallttiivveecc  --mmffpprrnndd  --mmhhaarrdd--ffllooaatt  --mmmmffccrrff  --mmmmuullttiippllee
           --mmnneeww--mmnneemmoonniiccss  --mmppooppccnnttbb --mmppooppccnnttdd  --mmppoowweerr  --mmppoowweerr22
           --mmppoowweerrppcc6644 --mmppoowweerrppcc--ggppoopptt  --mmppoowweerrppcc--ggffxxoopptt  --mmssiinnggllee--ffllooaatt
           --mmddoouubbllee--ffllooaatt --mmssiimmppllee--ffppuu --mmssttrriinngg  --mmmmuullhhww  --mmddllmmzzbb  --mmmmffppggpprr
           --mmvvssxx

           The particular options set for any particular CPU will vary between
           compiler versions, depending on what setting seems to produce
           optimal code for that CPU; it doesnâ€™t necessarily reflect the
           actual hardwareâ€™s capabilities.  If you wish to set an individual
           option to a particular value, you may specify it after the --mmccppuu
           option, like --mmccppuu==997700 --mmnnoo--aallttiivveecc.

           On AIX, the --mmaallttiivveecc and --mmppoowweerrppcc6644 options are not enabled or
           disabled by the --mmccppuu option at present because AIX does not have
           full support for these options.  You may still enable or disable
           them individually if youâ€™re sure itâ€™ll work in your environment.

       --mmttuunnee==_c_p_u___t_y_p_e
           Set the instruction scheduling parameters for machine type
           _c_p_u___t_y_p_e, but do not set the architecture type, register usage, or
           choice of mnemonics, as --mmccppuu==_c_p_u___t_y_p_e would.  The same values for
           _c_p_u___t_y_p_e are used for --mmttuunnee as for --mmccppuu.  If both are specified,
           the code generated will use the architecture, registers, and
           mnemonics set by --mmccppuu, but the scheduling parameters set by
           --mmttuunnee.

       --mmccmmooddeell==ssmmaallll
           Generate PowerPC64 code for the small model: The TOC is limited to
           64k.

       --mmccmmooddeell==mmeeddiiuumm
           Generate PowerPC64 code for the medium model: The TOC and other
           static data may be up to a total of 4G in size.

       --mmccmmooddeell==llaarrggee
           Generate PowerPC64 code for the large model: The TOC may be up to
           4G in size.  Other data and code is only limited by the 64-bit
           address space.

       --mmsswwddiivv
       --mmnnoo--sswwddiivv
           Generate code to compute division as reciprocal estimate and
           iterative refinement, creating opportunities for increased
           throughput.  This feature requires: optional PowerPC Graphics
           instruction set for single precision and FRE instruction for double
           precision, assuming divides cannot generate user-visible traps, and
           the domain values not include Infinities, denormals or zero
           denominator.

       --mmaallttiivveecc
       --mmnnoo--aallttiivveecc
           Generate code that uses (does not use) AltiVec instructions, and
           also enable the use of built-in functions that allow more direct
           access to the AltiVec instruction set.  You may also need to set
           --mmaabbii==aallttiivveecc to adjust the current ABI with AltiVec ABI
           enhancements.

       --mmvvrrssaavvee
       --mmnnoo--vvrrssaavvee
           Generate VRSAVE instructions when generating AltiVec code.

       --mmggeenn--cceellll--mmiiccrrooccooddee
           Generate Cell microcode instructions

       --mmwwaarrnn--cceellll--mmiiccrrooccooddee
           Warning when a Cell microcode instruction is going to emitted.  An
           example of a Cell microcode instruction is a variable shift.

       --mmsseeccuurree--pplltt
           Generate code that allows ld and ld.so to build executables and
           shared libraries with non-exec .plt and .got sections.  This is a
           PowerPC 32-bit SYSV ABI option.

       --mmbbssss--pplltt
           Generate code that uses a BSS .plt section that ld.so fills in, and
           requires .plt and .got sections that are both writable and
           executable.  This is a PowerPC 32-bit SYSV ABI option.

       --mmiisseell
       --mmnnoo--iisseell
           This switch enables or disables the generation of ISEL
           instructions.

       --mmiisseell==_y_e_s_/_n_o
           This switch has been deprecated.  Use --mmiisseell and --mmnnoo--iisseell instead.

       --mmssppee
       --mmnnoo--ssppee
           This switch enables or disables the generation of SPE simd
           instructions.

       --mmppaaiirreedd
       --mmnnoo--ppaaiirreedd
           This switch enables or disables the generation of PAIRED simd
           instructions.

       --mmssppee==_y_e_s_/_n_o
           This option has been deprecated.  Use --mmssppee and --mmnnoo--ssppee instead.

       --mmvvssxx
       --mmnnoo--vvssxx
           Generate code that uses (does not use) vector/scalar (VSX)
           instructions, and also enable the use of built-in functions that
           allow more direct access to the VSX instruction set.

       --mmffllooaatt--ggpprrss==_y_e_s_/_s_i_n_g_l_e_/_d_o_u_b_l_e_/_n_o
       --mmffllooaatt--ggpprrss
           This switch enables or disables the generation of floating point
           operations on the general purpose registers for architectures that
           support it.

           The argument _y_e_s or _s_i_n_g_l_e enables the use of single-precision
           floating point operations.

           The argument _d_o_u_b_l_e enables the use of single and double-precision
           floating point operations.

           The argument _n_o disables floating point operations on the general
           purpose registers.

           This option is currently only available on the MPC854x.

       --mm3322
       --mm6644
           Generate code for 32-bit or 64-bit environments of Darwin and SVR4
           targets (including GNU/Linux).  The 32-bit environment sets int,
           long and pointer to 32 bits and generates code that runs on any
           PowerPC variant.  The 64-bit environment sets int to 32 bits and
           long and pointer to 64 bits, and generates code for PowerPC64, as
           for --mmppoowweerrppcc6644.

       --mmffuullll--ttoocc
       --mmnnoo--ffpp--iinn--ttoocc
       --mmnnoo--ssuumm--iinn--ttoocc
       --mmmmiinniimmaall--ttoocc
           Modify generation of the TOC (Table Of Contents), which is created
           for every executable file.  The --mmffuullll--ttoocc option is selected by
           default.  In that case, GCC will allocate at least one TOC entry
           for each unique non-automatic variable reference in your program.
           GCC will also place floating-point constants in the TOC.  However,
           only 16,384 entries are available in the TOC.

           If you receive a linker error message that saying you have
           overflowed the available TOC space, you can reduce the amount of
           TOC space used with the --mmnnoo--ffpp--iinn--ttoocc and --mmnnoo--ssuumm--iinn--ttoocc options.
           --mmnnoo--ffpp--iinn--ttoocc prevents GCC from putting floating-point constants
           in the TOC and --mmnnoo--ssuumm--iinn--ttoocc forces GCC to generate code to
           calculate the sum of an address and a constant at run-time instead
           of putting that sum into the TOC.  You may specify one or both of
           these options.  Each causes GCC to produce very slightly slower and
           larger code at the expense of conserving TOC space.

           If you still run out of space in the TOC even when you specify both
           of these options, specify --mmmmiinniimmaall--ttoocc instead.  This option
           causes GCC to make only one TOC entry for every file.  When you
           specify this option, GCC will produce code that is slower and
           larger but which uses extremely little TOC space.  You may wish to
           use this option only on files that contain less frequently executed
           code.

       --mmaaiixx6644
       --mmaaiixx3322
           Enable 64-bit AIX ABI and calling convention: 64-bit pointers,
           64-bit "long" type, and the infrastructure needed to support them.
           Specifying --mmaaiixx6644 implies --mmppoowweerrppcc6644 and --mmppoowweerrppcc, while --mmaaiixx3322
           disables the 64-bit ABI and implies --mmnnoo--ppoowweerrppcc6644.  GCC defaults
           to --mmaaiixx3322.

       --mmxxll--ccoommppaatt
       --mmnnoo--xxll--ccoommppaatt
           Produce code that conforms more closely to IBM XL compiler
           semantics when using AIX-compatible ABI.  Pass floating-point
           arguments to prototyped functions beyond the register save area
           (RSA) on the stack in addition to argument FPRs.  Do not assume
           that most significant double in 128-bit long double value is
           properly rounded when comparing values and converting to double.
           Use XL symbol names for long double support routines.

           The AIX calling convention was extended but not initially
           documented to handle an obscure K&R C case of calling a function
           that takes the address of its arguments with fewer arguments than
           declared.  IBM XL compilers access floating point arguments which
           do not fit in the RSA from the stack when a subroutine is compiled
           without optimization.  Because always storing floating-point
           arguments on the stack is inefficient and rarely needed, this
           option is not enabled by default and only is necessary when calling
           subroutines compiled by IBM XL compilers without optimization.

       --mmppee
           Support _I_B_M _R_S_/_6_0_0_0 _S_P _P_a_r_a_l_l_e_l _E_n_v_i_r_o_n_m_e_n_t (PE).  Link an
           application written to use message passing with special startup
           code to enable the application to run.  The system must have PE
           installed in the standard location (_/_u_s_r_/_l_p_p_/_p_p_e_._p_o_e_/), or the
           _s_p_e_c_s file must be overridden with the --ssppeeccss== option to specify
           the appropriate directory location.  The Parallel Environment does
           not support threads, so the --mmppee option and the --pptthhrreeaadd option are
           incompatible.

       --mmaalliiggnn--nnaattuurraall
       --mmaalliiggnn--ppoowweerr
           On AIX, 32-bit Darwin, and 64-bit PowerPC GNU/Linux, the option
           --mmaalliiggnn--nnaattuurraall overrides the ABI-defined alignment of larger
           types, such as floating-point doubles, on their natural size-based
           boundary.  The option --mmaalliiggnn--ppoowweerr instructs GCC to follow the
           ABI-specified alignment rules.  GCC defaults to the standard
           alignment defined in the ABI.

           On 64-bit Darwin, natural alignment is the default, and
           --mmaalliiggnn--ppoowweerr is not supported.

       --mmssoofftt--ffllooaatt
       --mmhhaarrdd--ffllooaatt
           Generate code that does not use (uses) the floating-point register
           set.  Software floating point emulation is provided if you use the
           --mmssoofftt--ffllooaatt option, and pass the option to GCC when linking.

       --mmssiinnggllee--ffllooaatt
       --mmddoouubbllee--ffllooaatt
           Generate code for single or double-precision floating point
           operations.  --mmddoouubbllee--ffllooaatt implies --mmssiinnggllee--ffllooaatt.

       --mmssiimmppllee--ffppuu
           Do not generate sqrt and div instructions for hardware floating
           point unit.

       --mmffppuu
           Specify type of floating point unit.  Valid values are _s_p___l_i_t_e
           (equivalent to -msingle-float -msimple-fpu), _d_p___l_i_t_e (equivalent to
           -mdouble-float -msimple-fpu), _s_p___f_u_l_l (equivalent to
           -msingle-float), and _d_p___f_u_l_l (equivalent to -mdouble-float).

       --mmxxiilliinnxx--ffppuu
           Perform optimizations for floating point unit on Xilinx PPC
           405/440.

       --mmmmuullttiippllee
       --mmnnoo--mmuullttiippllee
           Generate code that uses (does not use) the load multiple word
           instructions and the store multiple word instructions.  These
           instructions are generated by default on POWER systems, and not
           generated on PowerPC systems.  Do not use --mmmmuullttiippllee on little
           endian PowerPC systems, since those instructions do not work when
           the processor is in little endian mode.  The exceptions are PPC740
           and PPC750 which permit the instructions usage in little endian
           mode.

       --mmssttrriinngg
       --mmnnoo--ssttrriinngg
           Generate code that uses (does not use) the load string instructions
           and the store string word instructions to save multiple registers
           and do small block moves.  These instructions are generated by
           default on POWER systems, and not generated on PowerPC systems.  Do
           not use --mmssttrriinngg on little endian PowerPC systems, since those
           instructions do not work when the processor is in little endian
           mode.  The exceptions are PPC740 and PPC750 which permit the
           instructions usage in little endian mode.

       --mmuuppddaattee
       --mmnnoo--uuppddaattee
           Generate code that uses (does not use) the load or store
           instructions that update the base register to the address of the
           calculated memory location.  These instructions are generated by
           default.  If you use --mmnnoo--uuppddaattee, there is a small window between
           the time that the stack pointer is updated and the address of the
           previous frame is stored, which means code that walks the stack
           frame across interrupts or signals may get corrupted data.

       --mmaavvooiidd--iinnddeexxeedd--aaddddrreesssseess
       --mmnnoo--aavvooiidd--iinnddeexxeedd--aaddddrreesssseess
           Generate code that tries to avoid (not avoid) the use of indexed
           load or store instructions. These instructions can incur a
           performance penalty on Power6 processors in certain situations,
           such as when stepping through large arrays that cross a 16M
           boundary.  This option is enabled by default when targetting Power6
           and disabled otherwise.

       --mmffuusseedd--mmaadddd
       --mmnnoo--ffuusseedd--mmaadddd
           Generate code that uses (does not use) the floating point multiply
           and accumulate instructions.  These instructions are generated by
           default if hardware floating is used.

       --mmmmuullhhww
       --mmnnoo--mmuullhhww
           Generate code that uses (does not use) the half-word multiply and
           multiply-accumulate instructions on the IBM 405, 440 and 464
           processors.  These instructions are generated by default when
           targetting those processors.

       --mmddllmmzzbb
       --mmnnoo--ddllmmzzbb
           Generate code that uses (does not use) the string-search ddllmmzzbb
           instruction on the IBM 405, 440 and 464 processors.  This
           instruction is generated by default when targetting those
           processors.

       --mmnnoo--bbiitt--aalliiggnn
       --mmbbiitt--aalliiggnn
           On System V.4 and embedded PowerPC systems do not (do) force
           structures and unions that contain bit-fields to be aligned to the
           base type of the bit-field.

           For example, by default a structure containing nothing but 8
           "unsigned" bit-fields of length 1 would be aligned to a 4 byte
           boundary and have a size of 4 bytes.  By using --mmnnoo--bbiitt--aalliiggnn, the
           structure would be aligned to a 1 byte boundary and be one byte in
           size.

       --mmnnoo--ssttrriicctt--aalliiggnn
       --mmssttrriicctt--aalliiggnn
           On System V.4 and embedded PowerPC systems do not (do) assume that
           unaligned memory references will be handled by the system.

       --mmrreellooccaattaabbllee
       --mmnnoo--rreellooccaattaabbllee
           On embedded PowerPC systems generate code that allows (does not
           allow) the program to be relocated to a different address at
           runtime.  If you use --mmrreellooccaattaabbllee on any module, all objects
           linked together must be compiled with --mmrreellooccaattaabbllee or
           --mmrreellooccaattaabbllee--lliibb.

       --mmrreellooccaattaabbllee--lliibb
       --mmnnoo--rreellooccaattaabbllee--lliibb
           On embedded PowerPC systems generate code that allows (does not
           allow) the program to be relocated to a different address at
           runtime.  Modules compiled with --mmrreellooccaattaabbllee--lliibb can be linked
           with either modules compiled without --mmrreellooccaattaabbllee and
           --mmrreellooccaattaabbllee--lliibb or with modules compiled with the --mmrreellooccaattaabbllee
           options.

       --mmnnoo--ttoocc
       --mmttoocc
           On System V.4 and embedded PowerPC systems do not (do) assume that
           register 2 contains a pointer to a global area pointing to the
           addresses used in the program.

       --mmlliittttllee
       --mmlliittttllee--eennddiiaann
           On System V.4 and embedded PowerPC systems compile code for the
           processor in little endian mode.  The --mmlliittttllee--eennddiiaann option is the
           same as --mmlliittttllee.

       --mmbbiigg
       --mmbbiigg--eennddiiaann
           On System V.4 and embedded PowerPC systems compile code for the
           processor in big endian mode.  The --mmbbiigg--eennddiiaann option is the same
           as --mmbbiigg.

       --mmddyynnaammiicc--nnoo--ppiicc
           On Darwin and Mac OS X systems, compile code so that it is not
           relocatable, but that its external references are relocatable.  The
           resulting code is suitable for applications, but not shared
           libraries.

       --mmpprriioorriittiizzee--rreessttrriicctteedd--iinnssnnss==_p_r_i_o_r_i_t_y
           This option controls the priority that is assigned to dispatch-slot
           restricted instructions during the second scheduling pass.  The
           argument _p_r_i_o_r_i_t_y takes the value _0_/_1_/_2 to assign
           _n_o_/_h_i_g_h_e_s_t_/_s_e_c_o_n_d_-_h_i_g_h_e_s_t priority to dispatch slot restricted
           instructions.

       --mmsscchheedd--ccoossttllyy--ddeepp==_d_e_p_e_n_d_e_n_c_e___t_y_p_e
           This option controls which dependences are considered costly by the
           target during instruction scheduling.  The argument _d_e_p_e_n_d_e_n_c_e___t_y_p_e
           takes one of the following values: _n_o: no dependence is costly,
           _a_l_l: all dependences are costly, _t_r_u_e___s_t_o_r_e___t_o___l_o_a_d: a true
           dependence from store to load is costly, _s_t_o_r_e___t_o___l_o_a_d: any
           dependence from store to load is costly, _n_u_m_b_e_r: any dependence
           which latency >= _n_u_m_b_e_r is costly.

       --mmiinnsseerrtt--sscchheedd--nnooppss==_s_c_h_e_m_e
           This option controls which nop insertion scheme will be used during
           the second scheduling pass.  The argument _s_c_h_e_m_e takes one of the
           following values: _n_o: Donâ€™t insert nops.  _p_a_d: Pad with nops any
           dispatch group which has vacant issue slots, according to the
           schedulerâ€™s grouping.  _r_e_g_r_o_u_p___e_x_a_c_t: Insert nops to force costly
           dependent insns into separate groups.  Insert exactly as many nops
           as needed to force an insn to a new group, according to the
           estimated processor grouping.  _n_u_m_b_e_r: Insert nops to force costly
           dependent insns into separate groups.  Insert _n_u_m_b_e_r nops to force
           an insn to a new group.

       --mmccaallll--ssyyssvv
           On System V.4 and embedded PowerPC systems compile code using
           calling conventions that adheres to the March 1995 draft of the
           System V Application Binary Interface, PowerPC processor
           supplement.  This is the default unless you configured GCC using
           ppoowweerrppcc--**--eeaabbiiaaiixx.

       --mmccaallll--ssyyssvv--eeaabbii
           Specify both --mmccaallll--ssyyssvv and --mmeeaabbii options.

       --mmccaallll--ssyyssvv--nnooeeaabbii
           Specify both --mmccaallll--ssyyssvv and --mmnnoo--eeaabbii options.

       --mmccaallll--ssoollaarriiss
           On System V.4 and embedded PowerPC systems compile code for the
           Solaris operating system.

       --mmccaallll--lliinnuuxx
           On System V.4 and embedded PowerPC systems compile code for the
           Linux-based GNU system.

       --mmccaallll--ggnnuu
           On System V.4 and embedded PowerPC systems compile code for the
           Hurd-based GNU system.

       --mmccaallll--nneettbbssdd
           On System V.4 and embedded PowerPC systems compile code for the
           NetBSD operating system.

       --mmaaiixx--ssttrruucctt--rreettuurrnn
           Return all structures in memory (as specified by the AIX ABI).

       --mmssvvrr44--ssttrruucctt--rreettuurrnn
           Return structures smaller than 8 bytes in registers (as specified
           by the SVR4 ABI).

       --mmaabbii==_a_b_i_-_t_y_p_e
           Extend the current ABI with a particular extension, or remove such
           extension.  Valid values are _a_l_t_i_v_e_c, _n_o_-_a_l_t_i_v_e_c, _s_p_e, _n_o_-_s_p_e,
           _i_b_m_l_o_n_g_d_o_u_b_l_e, _i_e_e_e_l_o_n_g_d_o_u_b_l_e.

       --mmaabbii==ssppee
           Extend the current ABI with SPE ABI extensions.  This does not
           change the default ABI, instead it adds the SPE ABI extensions to
           the current ABI.

       --mmaabbii==nnoo--ssppee
           Disable Booke SPE ABI extensions for the current ABI.

       --mmaabbii==iibbmmlloonnggddoouubbllee
           Change the current ABI to use IBM extended precision long double.
           This is a PowerPC 32-bit SYSV ABI option.

       --mmaabbii==iieeeeeelloonnggddoouubbllee
           Change the current ABI to use IEEE extended precision long double.
           This is a PowerPC 32-bit Linux ABI option.

       --mmpprroottoottyyppee
       --mmnnoo--pprroottoottyyppee
           On System V.4 and embedded PowerPC systems assume that all calls to
           variable argument functions are properly prototyped.  Otherwise,
           the compiler must insert an instruction before every non prototyped
           call to set or clear bit 6 of the condition code register (_C_R) to
           indicate whether floating point values were passed in the floating
           point registers in case the function takes a variable arguments.
           With --mmpprroottoottyyppee, only calls to prototyped variable argument
           functions will set or clear the bit.

       --mmssiimm
           On embedded PowerPC systems, assume that the startup module is
           called _s_i_m_-_c_r_t_0_._o and that the standard C libraries are _l_i_b_s_i_m_._a
           and _l_i_b_c_._a.  This is the default for ppoowweerrppcc--**--eeaabbiissiimm
           configurations.

       --mmmmvvmmee
           On embedded PowerPC systems, assume that the startup module is
           called _c_r_t_0_._o and the standard C libraries are _l_i_b_m_v_m_e_._a and
           _l_i_b_c_._a.

       --mmaaddss
           On embedded PowerPC systems, assume that the startup module is
           called _c_r_t_0_._o and the standard C libraries are _l_i_b_a_d_s_._a and _l_i_b_c_._a.

       --mmyyeelllloowwkknniiffee
           On embedded PowerPC systems, assume that the startup module is
           called _c_r_t_0_._o and the standard C libraries are _l_i_b_y_k_._a and _l_i_b_c_._a.

       --mmvvxxwwoorrkkss
           On System V.4 and embedded PowerPC systems, specify that you are
           compiling for a VxWorks system.

       --mmeemmbb
           On embedded PowerPC systems, set the _P_P_C___E_M_B bit in the ELF flags
           header to indicate that eeaabbii extended relocations are used.

       --mmeeaabbii
       --mmnnoo--eeaabbii
           On System V.4 and embedded PowerPC systems do (do not) adhere to
           the Embedded Applications Binary Interface (eabi) which is a set of
           modifications to the System V.4 specifications.  Selecting --mmeeaabbii
           means that the stack is aligned to an 8 byte boundary, a function
           "__eabi" is called to from "main" to set up the eabi environment,
           and the --mmssddaattaa option can use both "r2" and "r13" to point to two
           separate small data areas.  Selecting --mmnnoo--eeaabbii means that the
           stack is aligned to a 16 byte boundary, do not call an
           initialization function from "main", and the --mmssddaattaa option will
           only use "r13" to point to a single small data area.  The --mmeeaabbii
           option is on by default if you configured GCC using one of the
           ppoowweerrppcc**--**--eeaabbii** options.

       --mmssddaattaa==eeaabbii
           On System V.4 and embedded PowerPC systems, put small initialized
           "const" global and static data in the ..ssddaattaa22 section, which is
           pointed to by register "r2".  Put small initialized non-"const"
           global and static data in the ..ssddaattaa section, which is pointed to
           by register "r13".  Put small uninitialized global and static data
           in the ..ssbbssss section, which is adjacent to the ..ssddaattaa section.  The
           --mmssddaattaa==eeaabbii option is incompatible with the --mmrreellooccaattaabbllee option.
           The --mmssddaattaa==eeaabbii option also sets the --mmeemmbb option.

       --mmssddaattaa==ssyyssvv
           On System V.4 and embedded PowerPC systems, put small global and
           static data in the ..ssddaattaa section, which is pointed to by register
           "r13".  Put small uninitialized global and static data in the ..ssbbssss
           section, which is adjacent to the ..ssddaattaa section.  The --mmssddaattaa==ssyyssvv
           option is incompatible with the --mmrreellooccaattaabbllee option.

       --mmssddaattaa==ddeeffaauulltt
       --mmssddaattaa
           On System V.4 and embedded PowerPC systems, if --mmeeaabbii is used,
           compile code the same as --mmssddaattaa==eeaabbii, otherwise compile code the
           same as --mmssddaattaa==ssyyssvv.

       --mmssddaattaa==ddaattaa
           On System V.4 and embedded PowerPC systems, put small global data
           in the ..ssddaattaa section.  Put small uninitialized global data in the
           ..ssbbssss section.  Do not use register "r13" to address small data
           however.  This is the default behavior unless other --mmssddaattaa options
           are used.

       --mmssddaattaa==nnoonnee
       --mmnnoo--ssddaattaa
           On embedded PowerPC systems, put all initialized global and static
           data in the ..ddaattaa section, and all uninitialized data in the ..bbssss
           section.

       --GG _n_u_m
           On embedded PowerPC systems, put global and static items less than
           or equal to _n_u_m bytes into the small data or bss sections instead
           of the normal data or bss section.  By default, _n_u_m is 8.  The --GG
           _n_u_m switch is also passed to the linker.  All modules should be
           compiled with the same --GG _n_u_m value.

       --mmrreeggnnaammeess
       --mmnnoo--rreeggnnaammeess
           On System V.4 and embedded PowerPC systems do (do not) emit
           register names in the assembly language output using symbolic
           forms.

       --mmlloonnggccaallll
       --mmnnoo--lloonnggccaallll
           By default assume that all calls are far away so that a longer more
           expensive calling sequence is required.  This is required for calls
           further than 32 megabytes (33,554,432 bytes) from the current
           location.  A short call will be generated if the compiler knows the
           call cannot be that far away.  This setting can be overridden by
           the "shortcall" function attribute, or by "#pragma longcall(0)".

           Some linkers are capable of detecting out-of-range calls and
           generating glue code on the fly.  On these systems, long calls are
           unnecessary and generate slower code.  As of this writing, the AIX
           linker can do this, as can the GNU linker for PowerPC/64.  It is
           planned to add this feature to the GNU linker for 32-bit PowerPC
           systems as well.

           On Darwin/PPC systems, "#pragma longcall" will generate "jbsr
           callee, L42", plus a "branch island" (glue code).  The two target
           addresses represent the callee and the "branch island".  The
           Darwin/PPC linker will prefer the first address and generate a "bl
           callee" if the PPC "bl" instruction will reach the callee directly;
           otherwise, the linker will generate "bl L42" to call the "branch
           island".  The "branch island" is appended to the body of the
           calling function; it computes the full 32-bit address of the callee
           and jumps to it.

           On Mach-O (Darwin) systems, this option directs the compiler emit
           to the glue for every direct call, and the Darwin linker decides
           whether to use or discard it.

           In the future, we may cause GCC to ignore all longcall
           specifications when the linker is known to generate glue.

       --pptthhrreeaadd
           Adds support for multithreading with the _p_t_h_r_e_a_d_s library.  This
           option sets flags for both the preprocessor and linker.

   SS//339900 aanndd zzSSeerriieess OOppttiioonnss
       These are the --mm options defined for the S/390 and zSeries
       architecture.

       --mmhhaarrdd--ffllooaatt
       --mmssoofftt--ffllooaatt
           Use (do not use) the hardware floating-point instructions and
           registers for floating-point operations.  When --mmssoofftt--ffllooaatt is
           specified, functions in _l_i_b_g_c_c_._a will be used to perform floating-
           point operations.  When --mmhhaarrdd--ffllooaatt is specified, the compiler
           generates IEEE floating-point instructions.  This is the default.

       --mmhhaarrdd--ddffpp
       --mmnnoo--hhaarrdd--ddffpp
           Use (do not use) the hardware decimal-floating-point instructions
           for decimal-floating-point operations.  When --mmnnoo--hhaarrdd--ddffpp is
           specified, functions in _l_i_b_g_c_c_._a will be used to perform decimal-
           floating-point operations.  When --mmhhaarrdd--ddffpp is specified, the
           compiler generates decimal-floating-point hardware instructions.
           This is the default for --mmaarrcchh==zz99--eecc or higher.

       --mmlloonngg--ddoouubbllee--6644
       --mmlloonngg--ddoouubbllee--112288
           These switches control the size of "long double" type. A size of
           64bit makes the "long double" type equivalent to the "double" type.
           This is the default.

       --mmbbaacckkcchhaaiinn
       --mmnnoo--bbaacckkcchhaaiinn
           Store (do not store) the address of the callerâ€™s frame as backchain
           pointer into the calleeâ€™s stack frame.  A backchain may be needed
           to allow debugging using tools that do not understand DWARF-2 call
           frame information.  When --mmnnoo--ppaacckkeedd--ssttaacckk is in effect, the
           backchain pointer is stored at the bottom of the stack frame; when
           --mmppaacckkeedd--ssttaacckk is in effect, the backchain is placed into the
           topmost word of the 96/160 byte register save area.

           In general, code compiled with --mmbbaacckkcchhaaiinn is call-compatible with
           code compiled with --mmmmoo--bbaacckkcchhaaiinn; however, use of the backchain
           for debugging purposes usually requires that the whole binary is
           built with --mmbbaacckkcchhaaiinn.  Note that the combination of --mmbbaacckkcchhaaiinn,
           --mmppaacckkeedd--ssttaacckk and --mmhhaarrdd--ffllooaatt is not supported.  In order to
           build a linux kernel use --mmssoofftt--ffllooaatt.

           The default is to not maintain the backchain.

       --mmppaacckkeedd--ssttaacckk
       --mmnnoo--ppaacckkeedd--ssttaacckk
           Use (do not use) the packed stack layout.  When --mmnnoo--ppaacckkeedd--ssttaacckk
           is specified, the compiler uses the all fields of the 96/160 byte
           register save area only for their default purpose; unused fields
           still take up stack space.  When --mmppaacckkeedd--ssttaacckk is specified,
           register save slots are densely packed at the top of the register
           save area; unused space is reused for other purposes, allowing for
           more efficient use of the available stack space.  However, when
           --mmbbaacckkcchhaaiinn is also in effect, the topmost word of the save area is
           always used to store the backchain, and the return address register
           is always saved two words below the backchain.

           As long as the stack frame backchain is not used, code generated
           with --mmppaacckkeedd--ssttaacckk is call-compatible with code generated with
           --mmnnoo--ppaacckkeedd--ssttaacckk.  Note that some non-FSF releases of GCC 2.95 for
           S/390 or zSeries generated code that uses the stack frame backchain
           at run time, not just for debugging purposes.  Such code is not
           call-compatible with code compiled with --mmppaacckkeedd--ssttaacckk.  Also, note
           that the combination of --mmbbaacckkcchhaaiinn, --mmppaacckkeedd--ssttaacckk and
           --mmhhaarrdd--ffllooaatt is not supported.  In order to build a linux kernel
           use --mmssoofftt--ffllooaatt.

           The default is to not use the packed stack layout.

       --mmssmmaallll--eexxeecc
       --mmnnoo--ssmmaallll--eexxeecc
           Generate (or do not generate) code using the "bras" instruction to
           do subroutine calls.  This only works reliably if the total
           executable size does not exceed 64k.  The default is to use the
           "basr" instruction instead, which does not have this limitation.

       --mm6644
       --mm3311
           When --mm3311 is specified, generate code compliant to the GNU/Linux
           for S/390 ABI.  When --mm6644 is specified, generate code compliant to
           the GNU/Linux for zSeries ABI.  This allows GCC in particular to
           generate 64-bit instructions.  For the ss339900 targets, the default is
           --mm3311, while the ss339900xx targets default to --mm6644.

       --mmzzaarrcchh
       --mmeessaa
           When --mmzzaarrcchh is specified, generate code using the instructions
           available on z/Architecture.  When --mmeessaa is specified, generate
           code using the instructions available on ESA/390.  Note that --mmeessaa
           is not possible with --mm6644.  When generating code compliant to the
           GNU/Linux for S/390 ABI, the default is --mmeessaa.  When generating
           code compliant to the GNU/Linux for zSeries ABI, the default is
           --mmzzaarrcchh.

       --mmmmvvccllee
       --mmnnoo--mmvvccllee
           Generate (or do not generate) code using the "mvcle" instruction to
           perform block moves.  When --mmnnoo--mmvvccllee is specified, use a "mvc"
           loop instead.  This is the default unless optimizing for size.

       --mmddeebbuugg
       --mmnnoo--ddeebbuugg
           Print (or do not print) additional debug information when
           compiling.  The default is to not print debug information.

       --mmaarrcchh==_c_p_u_-_t_y_p_e
           Generate code that will run on _c_p_u_-_t_y_p_e, which is the name of a
           system representing a certain processor type.  Possible values for
           _c_p_u_-_t_y_p_e are gg55, gg66, zz990000, zz999900, zz99--110099, zz99--eecc and zz1100.  When
           generating code using the instructions available on z/Architecture,
           the default is --mmaarrcchh==zz990000.  Otherwise, the default is --mmaarrcchh==gg55.

       --mmttuunnee==_c_p_u_-_t_y_p_e
           Tune to _c_p_u_-_t_y_p_e everything applicable about the generated code,
           except for the ABI and the set of available instructions.  The list
           of _c_p_u_-_t_y_p_e values is the same as for --mmaarrcchh.  The default is the
           value used for --mmaarrcchh.

       --mmttppff--ttrraaccee
       --mmnnoo--ttppff--ttrraaccee
           Generate code that adds (does not add) in TPF OS specific branches
           to trace routines in the operating system.  This option is off by
           default, even when compiling for the TPF OS.

       --mmffuusseedd--mmaadddd
       --mmnnoo--ffuusseedd--mmaadddd
           Generate code that uses (does not use) the floating point multiply
           and accumulate instructions.  These instructions are generated by
           default if hardware floating point is used.

       --mmwwaarrnn--ffrraammeessiizzee==_f_r_a_m_e_s_i_z_e
           Emit a warning if the current function exceeds the given frame
           size.  Because this is a compile time check it doesnâ€™t need to be a
           real problem when the program runs.  It is intended to identify
           functions which most probably cause a stack overflow.  It is useful
           to be used in an environment with limited stack size e.g. the linux
           kernel.

       --mmwwaarrnn--ddyynnaammiiccssttaacckk
           Emit a warning if the function calls alloca or uses dynamically
           sized arrays.  This is generally a bad idea with a limited stack
           size.

       --mmssttaacckk--gguuaarrdd==_s_t_a_c_k_-_g_u_a_r_d
       --mmssttaacckk--ssiizzee==_s_t_a_c_k_-_s_i_z_e
           If these options are provided the s390 back end emits additional
           instructions in the function prologue which trigger a trap if the
           stack size is _s_t_a_c_k_-_g_u_a_r_d bytes above the _s_t_a_c_k_-_s_i_z_e (remember that
           the stack on s390 grows downward).  If the _s_t_a_c_k_-_g_u_a_r_d option is
           omitted the smallest power of 2 larger than the frame size of the
           compiled function is chosen.  These options are intended to be used
           to help debugging stack overflow problems.  The additionally
           emitted code causes only little overhead and hence can also be used
           in production like systems without greater performance degradation.
           The given values have to be exact powers of 2 and _s_t_a_c_k_-_s_i_z_e has to
           be greater than _s_t_a_c_k_-_g_u_a_r_d without exceeding 64k.  In order to be
           efficient the extra code makes the assumption that the stack starts
           at an address aligned to the value given by _s_t_a_c_k_-_s_i_z_e.  The _s_t_a_c_k_-
           _g_u_a_r_d option can only be used in conjunction with _s_t_a_c_k_-_s_i_z_e.

   SSccoorree OOppttiioonnss
       These options are defined for Score implementations:

       --mmeebb
           Compile code for big endian mode.  This is the default.

       --mmeell
           Compile code for little endian mode.

       --mmnnhhwwlloooopp
           Disable generate bcnz instruction.

       --mmuullss
           Enable generate unaligned load and store instruction.

       --mmmmaacc
           Enable the use of multiply-accumulate instructions. Disabled by
           default.

       --mmssccoorree55
           Specify the SCORE5 as the target architecture.

       --mmssccoorree55uu
           Specify the SCORE5U of the target architecture.

       --mmssccoorree77
           Specify the SCORE7 as the target architecture. This is the default.

       --mmssccoorree77dd
           Specify the SCORE7D as the target architecture.

   SSHH OOppttiioonnss
       These --mm options are defined for the SH implementations:

       --mm11 Generate code for the SH1.

       --mm22 Generate code for the SH2.

       --mm22ee
           Generate code for the SH2e.

       --mm33 Generate code for the SH3.

       --mm33ee
           Generate code for the SH3e.

       --mm44--nnooffppuu
           Generate code for the SH4 without a floating-point unit.

       --mm44--ssiinnggllee--oonnllyy
           Generate code for the SH4 with a floating-point unit that only
           supports single-precision arithmetic.

       --mm44--ssiinnggllee
           Generate code for the SH4 assuming the floating-point unit is in
           single-precision mode by default.

       --mm44 Generate code for the SH4.

       --mm44aa--nnooffppuu
           Generate code for the SH4al-dsp, or for a SH4a in such a way that
           the floating-point unit is not used.

       --mm44aa--ssiinnggllee--oonnllyy
           Generate code for the SH4a, in such a way that no double-precision
           floating point operations are used.

       --mm44aa--ssiinnggllee
           Generate code for the SH4a assuming the floating-point unit is in
           single-precision mode by default.

       --mm44aa
           Generate code for the SH4a.

       --mm44aall
           Same as --mm44aa--nnooffppuu, except that it implicitly passes --ddsspp to the
           assembler.  GCC doesnâ€™t generate any DSP instructions at the
           moment.

       --mmbb Compile code for the processor in big endian mode.

       --mmll Compile code for the processor in little endian mode.

       --mmddaalliiggnn
           Align doubles at 64-bit boundaries.  Note that this changes the
           calling conventions, and thus some functions from the standard C
           library will not work unless you recompile it first with --mmddaalliiggnn.

       --mmrreellaaxx
           Shorten some address references at link time, when possible; uses
           the linker option --rreellaaxx.

       --mmbbiiggttaabbllee
           Use 32-bit offsets in "switch" tables.  The default is to use
           16-bit offsets.

       --mmbbiittooppss
           Enable the use of bit manipulation instructions on SH2A.

       --mmffmmoovvdd
           Enable the use of the instruction "fmovd".

       --mmhhiittaacchhii
           Comply with the calling conventions defined by Renesas.

       --mmrreenneessaass
           Comply with the calling conventions defined by Renesas.

       --mmnnoo--rreenneessaass
           Comply with the calling conventions defined for GCC before the
           Renesas conventions were available.  This option is the default for
           all targets of the SH toolchain except for sshh--ssyymmbbiiaanneellff.

       --mmnnoommaaccssaavvee
           Mark the "MAC" register as call-clobbered, even if --mmhhiittaacchhii is
           given.

       --mmiieeeeee
           Increase IEEE-compliance of floating-point code.  At the moment,
           this is equivalent to --ffnnoo--ffiinniittee--mmaatthh--oonnllyy.  When generating 16
           bit SH opcodes, getting IEEE-conforming results for comparisons of
           NANs / infinities incurs extra overhead in every floating point
           comparison, therefore the default is set to --ffffiinniittee--mmaatthh--oonnllyy.

       --mmiinnlliinnee--iicc__iinnvvaalliiddaattee
           Inline code to invalidate instruction cache entries after setting
           up nested function trampolines.  This option has no effect if
           -musermode is in effect and the selected code generation option
           (e.g. -m4) does not allow the use of the icbi instruction.  If the
           selected code generation option does not allow the use of the icbi
           instruction, and -musermode is not in effect, the inlined code will
           manipulate the instruction cache address array directly with an
           associative write.  This not only requires privileged mode, but it
           will also fail if the cache line had been mapped via the TLB and
           has become unmapped.

       --mmiissiizzee
           Dump instruction size and location in the assembly code.

       --mmppaaddssttrruucctt
           This option is deprecated.  It pads structures to multiple of 4
           bytes, which is incompatible with the SH ABI.

       --mmssppaaccee
           Optimize for space instead of speed.  Implied by --OOss.

       --mmpprreeffeerrggoott
           When generating position-independent code, emit function calls
           using the Global Offset Table instead of the Procedure Linkage
           Table.

       --mmuusseerrmmooddee
           Donâ€™t generate privileged mode only code; implies
           -mno-inline-ic_invalidate if the inlined code would not work in
           user mode.  This is the default when the target is "sh-*-linux*".

       --mmuullttccoosstt==_n_u_m_b_e_r
           Set the cost to assume for a multiply insn.

       --mmddiivv==_s_t_r_a_t_e_g_y
           Set the division strategy to use for SHmedia code.  _s_t_r_a_t_e_g_y must
           be one of: call, call2, fp, inv, inv:minlat, inv20u, inv20l,
           inv:call, inv:call2, inv:fp .  "fp" performs the operation in
           floating point.  This has a very high latency, but needs only a few
           instructions, so it might be a good choice if your code has enough
           easily exploitable ILP to allow the compiler to schedule the
           floating point instructions together with other instructions.
           Division by zero causes a floating point exception.  "inv" uses
           integer operations to calculate the inverse of the divisor, and
           then multiplies the dividend with the inverse.  This strategy
           allows cse and hoisting of the inverse calculation.  Division by
           zero calculates an unspecified result, but does not trap.
           "inv:minlat" is a variant of "inv" where if no cse / hoisting
           opportunities have been found, or if the entire operation has been
           hoisted to the same place, the last stages of the inverse
           calculation are intertwined with the final multiply to reduce the
           overall latency, at the expense of using a few more instructions,
           and thus offering fewer scheduling opportunities with other code.
           "call" calls a library function that usually implements the
           inv:minlat strategy.  This gives high code density for
           m5-*media-nofpu compilations.  "call2" uses a different entry point
           of the same library function, where it assumes that a pointer to a
           lookup table has already been set up, which exposes the pointer
           load to cse / code hoisting optimizations.  "inv:call", "inv:call2"
           and "inv:fp" all use the "inv" algorithm for initial code
           generation, but if the code stays unoptimized, revert to the
           "call", "call2", or "fp" strategies, respectively.  Note that the
           potentially-trapping side effect of division by zero is carried by
           a separate instruction, so it is possible that all the integer
           instructions are hoisted out, but the marker for the side effect
           stays where it is.  A recombination to fp operations or a call is
           not possible in that case.  "inv20u" and "inv20l" are variants of
           the "inv:minlat" strategy.  In the case that the inverse
           calculation was nor separated from the multiply, they speed up
           division where the dividend fits into 20 bits (plus sign where
           applicable), by inserting a test to skip a number of operations in
           this case; this test slows down the case of larger dividends.
           inv20u assumes the case of a such a small dividend to be unlikely,
           and inv20l assumes it to be likely.

       --mmddiivvssii33__lliibbffuunncc==_n_a_m_e
           Set the name of the library function used for 32 bit signed
           division to _n_a_m_e.  This only affect the name used in the call and
           inv:call division strategies, and the compiler will still expect
           the same sets of input/output/clobbered registers as if this option
           was not present.

       --mmffiixxeedd--rraannggee==_r_e_g_i_s_t_e_r_-_r_a_n_g_e
           Generate code treating the given register range as fixed registers.
           A fixed register is one that the register allocator can not use.
           This is useful when compiling kernel code.  A register range is
           specified as two registers separated by a dash.  Multiple register
           ranges can be specified separated by a comma.

       --mmaaddjjuusstt--uunnrroollll
           Throttle unrolling to avoid thrashing target registers.  This
           option only has an effect if the gcc code base supports the
           TARGET_ADJUST_UNROLL_MAX target hook.

       --mmiinnddeexxeedd--aaddddrreessssiinngg
           Enable the use of the indexed addressing mode for
           SHmedia32/SHcompact.  This is only safe if the hardware and/or OS
           implement 32 bit wrap-around semantics for the indexed addressing
           mode.  The architecture allows the implementation of processors
           with 64 bit MMU, which the OS could use to get 32 bit addressing,
           but since no current hardware implementation supports this or any
           other way to make the indexed addressing mode safe to use in the 32
           bit ABI, the default is -mno-indexed-addressing.

       --mmggeettttrrccoosstt==_n_u_m_b_e_r
           Set the cost assumed for the gettr instruction to _n_u_m_b_e_r.  The
           default is 2 if --mmpptt--ffiixxeedd is in effect, 100 otherwise.

       --mmpptt--ffiixxeedd
           Assume pt* instructions wonâ€™t trap.  This will generally generate
           better scheduled code, but is unsafe on current hardware.  The
           current architecture definition says that ptabs and ptrel trap when
           the target anded with 3 is 3.  This has the unintentional effect of
           making it unsafe to schedule ptabs / ptrel before a branch, or
           hoist it out of a loop.  For example, __do_global_ctors, a part of
           libgcc that runs constructors at program startup, calls functions
           in a list which is delimited by -1.  With the -mpt-fixed option,
           the ptabs will be done before testing against -1.  That means that
           all the constructors will be run a bit quicker, but when the loop
           comes to the end of the list, the program crashes because ptabs
           loads -1 into a target register.  Since this option is unsafe for
           any hardware implementing the current architecture specification,
           the default is -mno-pt-fixed.  Unless the user specifies a specific
           cost with --mmggeettttrrccoosstt, -mno-pt-fixed also implies --mmggeettttrrccoosstt==110000;
           this deters register allocation using target registers for storing
           ordinary integers.

       --mmiinnvvaalliidd--ssyymmbboollss
           Assume symbols might be invalid.  Ordinary function symbols
           generated by the compiler will always be valid to load with
           movi/shori/ptabs or movi/shori/ptrel, but with assembler and/or
           linker tricks it is possible to generate symbols that will cause
           ptabs / ptrel to trap.  This option is only meaningful when
           --mmnnoo--pptt--ffiixxeedd is in effect.  It will then prevent cross-basic-block
           cse, hoisting and most scheduling of symbol loads.  The default is
           --mmnnoo--iinnvvaalliidd--ssyymmbboollss.

   SSPPAARRCC OOppttiioonnss
       These --mm options are supported on the SPARC:

       --mmnnoo--aapppp--rreeggss
       --mmaapppp--rreeggss
           Specify --mmaapppp--rreeggss to generate output using the global registers 2
           through 4, which the SPARC SVR4 ABI reserves for applications.
           This is the default.

           To be fully SVR4 ABI compliant at the cost of some performance
           loss, specify --mmnnoo--aapppp--rreeggss.  You should compile libraries and
           system software with this option.

       --mmffppuu
       --mmhhaarrdd--ffllooaatt
           Generate output containing floating point instructions.  This is
           the default.

       --mmnnoo--ffppuu
       --mmssoofftt--ffllooaatt
           Generate output containing library calls for floating point.
           WWaarrnniinngg:: the requisite libraries are not available for all SPARC
           targets.  Normally the facilities of the machineâ€™s usual C compiler
           are used, but this cannot be done directly in cross-compilation.
           You must make your own arrangements to provide suitable library
           functions for cross-compilation.  The embedded targets ssppaarrcc--**--aaoouutt
           and ssppaarrcclliittee--**--** do provide software floating point support.

           --mmssoofftt--ffllooaatt changes the calling convention in the output file;
           therefore, it is only useful if you compile _a_l_l of a program with
           this option.  In particular, you need to compile _l_i_b_g_c_c_._a, the
           library that comes with GCC, with --mmssoofftt--ffllooaatt in order for this to
           work.

       --mmhhaarrdd--qquuaadd--ffllooaatt
           Generate output containing quad-word (long double) floating point
           instructions.

       --mmssoofftt--qquuaadd--ffllooaatt
           Generate output containing library calls for quad-word (long
           double) floating point instructions.  The functions called are
           those specified in the SPARC ABI.  This is the default.

           As of this writing, there are no SPARC implementations that have
           hardware support for the quad-word floating point instructions.
           They all invoke a trap handler for one of these instructions, and
           then the trap handler emulates the effect of the instruction.
           Because of the trap handler overhead, this is much slower than
           calling the ABI library routines.  Thus the --mmssoofftt--qquuaadd--ffllooaatt
           option is the default.

       --mmnnoo--uunnaalliiggnneedd--ddoouubblleess
       --mmuunnaalliiggnneedd--ddoouubblleess
           Assume that doubles have 8 byte alignment.  This is the default.

           With --mmuunnaalliiggnneedd--ddoouubblleess, GCC assumes that doubles have 8 byte
           alignment only if they are contained in another type, or if they
           have an absolute address.  Otherwise, it assumes they have 4 byte
           alignment.  Specifying this option avoids some rare compatibility
           problems with code generated by other compilers.  It is not the
           default because it results in a performance loss, especially for
           floating point code.

       --mmnnoo--ffaasstteerr--ssttrruuccttss
       --mmffaasstteerr--ssttrruuccttss
           With --mmffaasstteerr--ssttrruuccttss, the compiler assumes that structures should
           have 8 byte alignment.  This enables the use of pairs of "ldd" and
           "std" instructions for copies in structure assignment, in place of
           twice as many "ld" and "st" pairs.  However, the use of this
           changed alignment directly violates the SPARC ABI.  Thus, itâ€™s
           intended only for use on targets where the developer acknowledges
           that their resulting code will not be directly in line with the
           rules of the ABI.

       --mmiimmppuurree--tteexxtt
           --mmiimmppuurree--tteexxtt, used in addition to --sshhaarreedd, tells the compiler to
           not pass --zz tteexxtt to the linker when linking a shared object.  Using
           this option, you can link position-dependent code into a shared
           object.

           --mmiimmppuurree--tteexxtt suppresses the "relocations remain against
           allocatable but non-writable sections" linker error message.
           However, the necessary relocations will trigger copy-on-write, and
           the shared object is not actually shared across processes.  Instead
           of using --mmiimmppuurree--tteexxtt, you should compile all source code with
           --ffppiicc or --ffPPIICC.

           This option is only available on SunOS and Solaris.

       --mmccppuu==_c_p_u___t_y_p_e
           Set the instruction set, register set, and instruction scheduling
           parameters for machine type _c_p_u___t_y_p_e.  Supported values for
           _c_p_u___t_y_p_e are vv77, ccyypprreessss, vv88, ssuuppeerrssppaarrcc, ssppaarrcclliittee, ff993300, ff993344,
           hhyyppeerrssppaarrcc, ssppaarrcclliittee8866xx, ssppaarrcclleett, ttsscc770011, vv99, uullttrraassppaarrcc,
           uullttrraassppaarrcc33, nniiaaggaarraa and nniiaaggaarraa22.

           Default instruction scheduling parameters are used for values that
           select an architecture and not an implementation.  These are vv77,
           vv88, ssppaarrcclliittee, ssppaarrcclleett, vv99.

           Here is a list of each supported architecture and their supported
           implementations.

                       v7:             cypress
                       v8:             supersparc, hypersparc
                       sparclite:      f930, f934, sparclite86x
                       sparclet:       tsc701
                       v9:             ultrasparc, ultrasparc3, niagara, niagara2

           By default (unless configured otherwise), GCC generates code for
           the V7 variant of the SPARC architecture.  With --mmccppuu==ccyypprreessss, the
           compiler additionally optimizes it for the Cypress CY7C602 chip, as
           used in the SPARCStation/SPARCServer 3xx series.  This is also
           appropriate for the older SPARCStation 1, 2, IPX etc.

           With --mmccppuu==vv88, GCC generates code for the V8 variant of the SPARC
           architecture.  The only difference from V7 code is that the
           compiler emits the integer multiply and integer divide instructions
           which exist in SPARC-V8 but not in SPARC-V7.  With
           --mmccppuu==ssuuppeerrssppaarrcc, the compiler additionally optimizes it for the
           SuperSPARC chip, as used in the SPARCStation 10, 1000 and 2000
           series.

           With --mmccppuu==ssppaarrcclliittee, GCC generates code for the SPARClite variant
           of the SPARC architecture.  This adds the integer multiply, integer
           divide step and scan ("ffs") instructions which exist in SPARClite
           but not in SPARC-V7.  With --mmccppuu==ff993300, the compiler additionally
           optimizes it for the Fujitsu MB86930 chip, which is the original
           SPARClite, with no FPU.  With --mmccppuu==ff993344, the compiler additionally
           optimizes it for the Fujitsu MB86934 chip, which is the more recent
           SPARClite with FPU.

           With --mmccppuu==ssppaarrcclleett, GCC generates code for the SPARClet variant of
           the SPARC architecture.  This adds the integer multiply,
           multiply/accumulate, integer divide step and scan ("ffs")
           instructions which exist in SPARClet but not in SPARC-V7.  With
           --mmccppuu==ttsscc770011, the compiler additionally optimizes it for the TEMIC
           SPARClet chip.

           With --mmccppuu==vv99, GCC generates code for the V9 variant of the SPARC
           architecture.  This adds 64-bit integer and floating-point move
           instructions, 3 additional floating-point condition code registers
           and conditional move instructions.  With --mmccppuu==uullttrraassppaarrcc, the
           compiler additionally optimizes it for the Sun UltraSPARC I/II/IIi
           chips.  With --mmccppuu==uullttrraassppaarrcc33, the compiler additionally optimizes
           it for the Sun UltraSPARC III/III+/IIIi/IIIi+/IV/IV+ chips.  With
           --mmccppuu==nniiaaggaarraa, the compiler additionally optimizes it for Sun
           UltraSPARC T1 chips.  With --mmccppuu==nniiaaggaarraa22, the compiler
           additionally optimizes it for Sun UltraSPARC T2 chips.

       --mmttuunnee==_c_p_u___t_y_p_e
           Set the instruction scheduling parameters for machine type
           _c_p_u___t_y_p_e, but do not set the instruction set or register set that
           the option --mmccppuu==_c_p_u___t_y_p_e would.

           The same values for --mmccppuu==_c_p_u___t_y_p_e can be used for --mmttuunnee==_c_p_u___t_y_p_e,
           but the only useful values are those that select a particular cpu
           implementation.  Those are ccyypprreessss, ssuuppeerrssppaarrcc, hhyyppeerrssppaarrcc, ff993300,
           ff993344, ssppaarrcclliittee8866xx, ttsscc770011, uullttrraassppaarrcc, uullttrraassppaarrcc33, nniiaaggaarraa, and
           nniiaaggaarraa22.

       --mmvv88pplluuss
       --mmnnoo--vv88pplluuss
           With --mmvv88pplluuss, GCC generates code for the SPARC-V8+ ABI.  The
           difference from the V8 ABI is that the global and out registers are
           considered 64-bit wide.  This is enabled by default on Solaris in
           32-bit mode for all SPARC-V9 processors.

       --mmvviiss
       --mmnnoo--vviiss
           With --mmvviiss, GCC generates code that takes advantage of the
           UltraSPARC Visual Instruction Set extensions.  The default is
           --mmnnoo--vviiss.

       These --mm options are supported in addition to the above on SPARC-V9
       processors in 64-bit environments:

       --mmlliittttllee--eennddiiaann
           Generate code for a processor running in little-endian mode.  It is
           only available for a few configurations and most notably not on
           Solaris and Linux.

       --mm3322
       --mm6644
           Generate code for a 32-bit or 64-bit environment.  The 32-bit
           environment sets int, long and pointer to 32 bits.  The 64-bit
           environment sets int to 32 bits and long and pointer to 64 bits.

       --mmccmmooddeell==mmeeddllooww
           Generate code for the Medium/Low code model: 64-bit addresses,
           programs must be linked in the low 32 bits of memory.  Programs can
           be statically or dynamically linked.

       --mmccmmooddeell==mmeeddmmiidd
           Generate code for the Medium/Middle code model: 64-bit addresses,
           programs must be linked in the low 44 bits of memory, the text and
           data segments must be less than 2GB in size and the data segment
           must be located within 2GB of the text segment.

       --mmccmmooddeell==mmeeddaannyy
           Generate code for the Medium/Anywhere code model: 64-bit addresses,
           programs may be linked anywhere in memory, the text and data
           segments must be less than 2GB in size and the data segment must be
           located within 2GB of the text segment.

       --mmccmmooddeell==eemmbbmmeeddaannyy
           Generate code for the Medium/Anywhere code model for embedded
           systems: 64-bit addresses, the text and data segments must be less
           than 2GB in size, both starting anywhere in memory (determined at
           link time).  The global register %g4 points to the base of the data
           segment.  Programs are statically linked and PIC is not supported.

       --mmssttaacckk--bbiiaass
       --mmnnoo--ssttaacckk--bbiiaass
           With --mmssttaacckk--bbiiaass, GCC assumes that the stack pointer, and frame
           pointer if present, are offset by -2047 which must be added back
           when making stack frame references.  This is the default in 64-bit
           mode.  Otherwise, assume no such offset is present.

       These switches are supported in addition to the above on Solaris:

       --tthhrreeaaddss
           Add support for multithreading using the Solaris threads library.
           This option sets flags for both the preprocessor and linker.  This
           option does not affect the thread safety of object code produced by
           the compiler or that of libraries supplied with it.

       --pptthhrreeaaddss
           Add support for multithreading using the POSIX threads library.
           This option sets flags for both the preprocessor and linker.  This
           option does not affect the thread safety of object code produced
           by the compiler or that of libraries supplied with it.

       --pptthhrreeaadd
           This is a synonym for --pptthhrreeaaddss.

   SSPPUU OOppttiioonnss
       These --mm options are supported on the SPU:

       --mmwwaarrnn--rreelloocc
       --mmeerrrroorr--rreelloocc
           The loader for SPU does not handle dynamic relocations.  By
           default, GCC will give an error when it generates code that
           requires a dynamic relocation.  --mmnnoo--eerrrroorr--rreelloocc disables the
           error, --mmwwaarrnn--rreelloocc will generate a warning instead.

       --mmssaaffee--ddmmaa
       --mmuunnssaaffee--ddmmaa
           Instructions which initiate or test completion of DMA must not be
           reordered with respect to loads and stores of the memory which is
           being accessed.  Users typically address this problem using the
           volatile keyword, but that can lead to inefficient code in places
           where the memory is known to not change.  Rather than mark the
           memory as volatile we treat the DMA instructions as potentially
           effecting all memory.  With --mmuunnssaaffee--ddmmaa users must use the
           volatile keyword to protect memory accesses.

       --mmbbrraanncchh--hhiinnttss
           By default, GCC will generate a branch hint instruction to avoid
           pipeline stalls for always taken or probably taken branches.  A
           hint will not be generated closer than 8 instructions away from its
           branch.  There is little reason to disable them, except for
           debugging purposes, or to make an object a little bit smaller.

       --mmssmmaallll--mmeemm
       --mmllaarrggee--mmeemm
           By default, GCC generates code assuming that addresses are never
           larger than 18 bits.  With --mmllaarrggee--mmeemm code is generated that
           assumes a full 32 bit address.

       --mmssttddmmaaiinn
           By default, GCC links against startup code that assumes the SPU-
           style main function interface (which has an unconventional
           parameter list).  With --mmssttddmmaaiinn, GCC will link your program
           against startup code that assumes a C99-style interface to "main",
           including a local copy of "argv" strings.

       --mmffiixxeedd--rraannggee==_r_e_g_i_s_t_e_r_-_r_a_n_g_e
           Generate code treating the given register range as fixed registers.
           A fixed register is one that the register allocator can not use.
           This is useful when compiling kernel code.  A register range is
           specified as two registers separated by a dash.  Multiple register
           ranges can be specified separated by a comma.

       --mmdduuaall--nnooppss
       --mmdduuaall--nnooppss==_n
           By default, GCC will insert nops to increase dual issue when it
           expects it to increase performance.  _n can be a value from 0 to 10.
           A smaller _n will insert fewer nops.  10 is the default, 0 is the
           same as --mmnnoo--dduuaall--nnooppss.  Disabled with --OOss.

       --mmhhiinntt--mmaaxx--nnooppss==_n
           Maximum number of nops to insert for a branch hint.  A branch hint
           must be at least 8 instructions away from the branch it is
           effecting.  GCC will insert up to _n nops to enforce this, otherwise
           it will not generate the branch hint.

       --mmhhiinntt--mmaaxx--ddiissttaannccee==_n
           The encoding of the branch hint instruction limits the hint to be
           within 256 instructions of the branch it is effecting.  By default,
           GCC makes sure it is within 125.

       --mmssaaffee--hhiinnttss
           Work around a hardware bug which causes the SPU to stall
           indefinitely.  By default, GCC will insert the "hbrp" instruction
           to make sure this stall wonâ€™t happen.

   OOppttiioonnss ffoorr SSyysstteemm VV
       These additional options are available on System V Release 4 for
       compatibility with other compilers on those systems:

       --GG  Create a shared object.  It is recommended that --ssyymmbboolliicc or
           --sshhaarreedd be used instead.

       --QQyy Identify the versions of each tool used by the compiler, in a
           ".ident" assembler directive in the output.

       --QQnn Refrain from adding ".ident" directives to the output file (this is
           the default).

       --YYPP,,_d_i_r_s
           Search the directories _d_i_r_s, and no others, for libraries specified
           with --ll.

       --YYmm,,_d_i_r
           Look in the directory _d_i_r to find the M4 preprocessor.  The
           assembler uses this option.

   VV885500 OOppttiioonnss
       These --mm options are defined for V850 implementations:

       --mmlloonngg--ccaallllss
       --mmnnoo--lloonngg--ccaallllss
           Treat all calls as being far away (near).  If calls are assumed to
           be far away, the compiler will always load the functions address up
           into a register, and call indirect through the pointer.

       --mmnnoo--eepp
       --mmeepp
           Do not optimize (do optimize) basic blocks that use the same index
           pointer 4 or more times to copy pointer into the "ep" register, and
           use the shorter "sld" and "sst" instructions.  The --mmeepp option is
           on by default if you optimize.

       --mmnnoo--pprroolloogg--ffuunnccttiioonn
       --mmpprroolloogg--ffuunnccttiioonn
           Do not use (do use) external functions to save and restore
           registers at the prologue and epilogue of a function.  The external
           functions are slower, but use less code space if more than one
           function saves the same number of registers.  The --mmpprroolloogg--ffuunnccttiioonn
           option is on by default if you optimize.

       --mmssppaaccee
           Try to make the code as small as possible.  At present, this just
           turns on the --mmeepp and --mmpprroolloogg--ffuunnccttiioonn options.

       --mmttddaa==_n
           Put static or global variables whose size is _n bytes or less into
           the tiny data area that register "ep" points to.  The tiny data
           area can hold up to 256 bytes in total (128 bytes for byte
           references).

       --mmssddaa==_n
           Put static or global variables whose size is _n bytes or less into
           the small data area that register "gp" points to.  The small data
           area can hold up to 64 kilobytes.

       --mmzzddaa==_n
           Put static or global variables whose size is _n bytes or less into
           the first 32 kilobytes of memory.

       --mmvv885500
           Specify that the target processor is the V850.

       --mmbbiigg--sswwiittcchh
           Generate code suitable for big switch tables.  Use this option only
           if the assembler/linker complain about out of range branches within
           a switch table.

       --mmaapppp--rreeggss
           This option will cause r2 and r5 to be used in the code generated
           by the compiler.  This setting is the default.

       --mmnnoo--aapppp--rreeggss
           This option will cause r2 and r5 to be treated as fixed registers.

       --mmvv885500ee11
           Specify that the target processor is the V850E1.  The preprocessor
           constants ____vv885500ee11____ and ____vv885500ee____ will be defined if this option
           is used.

       --mmvv885500ee
           Specify that the target processor is the V850E.  The preprocessor
           constant ____vv885500ee____ will be defined if this option is used.

           If neither --mmvv885500 nor --mmvv885500ee nor --mmvv885500ee11 are defined then a
           default target processor will be chosen and the relevant ____vv885500**____
           preprocessor constant will be defined.

           The preprocessor constants ____vv885500 and ____vv885511____ are always defined,
           regardless of which processor variant is the target.

       --mmddiissaabbllee--ccaalllltt
           This option will suppress generation of the CALLT instruction for
           the v850e and v850e1 flavors of the v850 architecture.  The default
           is --mmnnoo--ddiissaabbllee--ccaalllltt which allows the CALLT instruction to be
           used.

   VVAAXX OOppttiioonnss
       These --mm options are defined for the VAX:

       --mmuunniixx
           Do not output certain jump instructions ("aobleq" and so on) that
           the Unix assembler for the VAX cannot handle across long ranges.

       --mmggnnuu
           Do output those jump instructions, on the assumption that you will
           assemble with the GNU assembler.

       --mmgg Output code for g-format floating point numbers instead of
           d-format.

   VVxxWWoorrkkss OOppttiioonnss
       The options in this section are defined for all VxWorks targets.
       Options specific to the target hardware are listed with the other
       options for that target.

       --mmrrttpp
           GCC can generate code for both VxWorks kernels and real time
           processes (RTPs).  This option switches from the former to the
           latter.  It also defines the preprocessor macro "__RTP__".

       --nnoonn--ssttaattiicc
           Link an RTP executable against shared libraries rather than static
           libraries.  The options --ssttaattiicc and --sshhaarreedd can also be used for
           RTPs; --ssttaattiicc is the default.

       --BBssttaattiicc
       --BBddyynnaammiicc
           These options are passed down to the linker.  They are defined for
           compatibility with Diab.

       --XXbbiinndd--llaazzyy
           Enable lazy binding of function calls.  This option is equivalent
           to --WWll,,--zz,,nnooww and is defined for compatibility with Diab.

       --XXbbiinndd--nnooww
           Disable lazy binding of function calls.  This option is the default
           and is defined for compatibility with Diab.

   xx8866--6644 OOppttiioonnss
       These are listed under

   XXssttoorrmmyy1166 OOppttiioonnss
       These options are defined for Xstormy16:

       --mmssiimm
           Choose startup files and linker script suitable for the simulator.

   XXtteennssaa OOppttiioonnss
       These options are supported for Xtensa targets:

       --mmccoonnsstt1166
       --mmnnoo--ccoonnsstt1166
           Enable or disable use of "CONST16" instructions for loading
           constant values.  The "CONST16" instruction is currently not a
           standard option from Tensilica.  When enabled, "CONST16"
           instructions are always used in place of the standard "L32R"
           instructions.  The use of "CONST16" is enabled by default only if
           the "L32R" instruction is not available.

       --mmffuusseedd--mmaadddd
       --mmnnoo--ffuusseedd--mmaadddd
           Enable or disable use of fused multiply/add and multiply/subtract
           instructions in the floating-point option.  This has no effect if
           the floating-point option is not also enabled.  Disabling fused
           multiply/add and multiply/subtract instructions forces the compiler
           to use separate instructions for the multiply and add/subtract
           operations.  This may be desirable in some cases where strict IEEE
           754-compliant results are required: the fused multiply add/subtract
           instructions do not round the intermediate result, thereby
           producing results with _m_o_r_e bits of precision than specified by the
           IEEE standard.  Disabling fused multiply add/subtract instructions
           also ensures that the program output is not sensitive to the
           compilerâ€™s ability to combine multiply and add/subtract operations.

       --mmsseerriiaalliizzee--vvoollaattiillee
       --mmnnoo--sseerriiaalliizzee--vvoollaattiillee
           When this option is enabled, GCC inserts "MEMW" instructions before
           "volatile" memory references to guarantee sequential consistency.
           The default is --mmsseerriiaalliizzee--vvoollaattiillee.  Use --mmnnoo--sseerriiaalliizzee--vvoollaattiillee
           to omit the "MEMW" instructions.

       --mmtteexxtt--sseeccttiioonn--lliitteerraallss
       --mmnnoo--tteexxtt--sseeccttiioonn--lliitteerraallss
           Control the treatment of literal pools.  The default is
           --mmnnoo--tteexxtt--sseeccttiioonn--lliitteerraallss, which places literals in a separate
           section in the output file.  This allows the literal pool to be
           placed in a data RAM/ROM, and it also allows the linker to combine
           literal pools from separate object files to remove redundant
           literals and improve code size.  With --mmtteexxtt--sseeccttiioonn--lliitteerraallss, the
           literals are interspersed in the text section in order to keep them
           as close as possible to their references.  This may be necessary
           for large assembly files.

       --mmttaarrggeett--aalliiggnn
       --mmnnoo--ttaarrggeett--aalliiggnn
           When this option is enabled, GCC instructs the assembler to
           automatically align instructions to reduce branch penalties at the
           expense of some code density.  The assembler attempts to widen
           density instructions to align branch targets and the instructions
           following call instructions.  If there are not enough preceding
           safe density instructions to align a target, no widening will be
           performed.  The default is --mmttaarrggeett--aalliiggnn.  These options do not
           affect the treatment of auto-aligned instructions like "LOOP",
           which the assembler will always align, either by widening density
           instructions or by inserting no-op instructions.

       --mmlloonnggccaallllss
       --mmnnoo--lloonnggccaallllss
           When this option is enabled, GCC instructs the assembler to
           translate direct calls to indirect calls unless it can determine
           that the target of a direct call is in the range allowed by the
           call instruction.  This translation typically occurs for calls to
           functions in other source files.  Specifically, the assembler
           translates a direct "CALL" instruction into an "L32R" followed by a
           "CALLX" instruction.  The default is --mmnnoo--lloonnggccaallllss.  This option
           should be used in programs where the call target can potentially be
           out of range.  This option is implemented in the assembler, not the
           compiler, so the assembly code generated by GCC will still show
           direct call instructions---look at the disassembled object code to
           see the actual instructions.  Note that the assembler will use an
           indirect call for every cross-file call, not just those that really
           will be out of range.

   zzSSeerriieess OOppttiioonnss
       These are listed under

   OOppttiioonnss ffoorr CCooddee GGeenneerraattiioonn CCoonnvveennttiioonnss
       These machine-independent options control the interface conventions
       used in code generation.

       Most of them have both positive and negative forms; the negative form
       of --ffffoooo would be --ffnnoo--ffoooo.  In the table below, only one of the forms
       is listed---the one which is not the default.  You can figure out the
       other form by either removing nnoo-- or adding it.

       --ffbboouunnddss--cchheecckk
           For front-ends that support it, generate additional code to check
           that indices used to access arrays are within the declared range.
           This is currently only supported by the Java and Fortran front-
           ends, where this option defaults to true and false respectively.

       --ffttrraappvv
           This option generates traps for signed overflow on addition,
           subtraction, multiplication operations.

       --ffwwrraappvv
           This option instructs the compiler to assume that signed arithmetic
           overflow of addition, subtraction and multiplication wraps around
           using twos-complement representation.  This flag enables some
           optimizations and disables others.  This option is enabled by
           default for the Java front-end, as required by the Java language
           specification.

       --ffeexxcceeppttiioonnss
           Enable exception handling.  Generates extra code needed to
           propagate exceptions.  For some targets, this implies GCC will
           generate frame unwind information for all functions, which can
           produce significant data size overhead, although it does not affect
           execution.  If you do not specify this option, GCC will enable it
           by default for languages like C++ which normally require exception
           handling, and disable it for languages like C that do not normally
           require it.  However, you may need to enable this option when
           compiling C code that needs to interoperate properly with exception
           handlers written in C++.  You may also wish to disable this option
           if you are compiling older C++ programs that donâ€™t use exception
           handling.

       --ffnnoonn--ccaallll--eexxcceeppttiioonnss
           Generate code that allows trapping instructions to throw
           exceptions.  Note that this requires platform-specific runtime
           support that does not exist everywhere.  Moreover, it only allows
           _t_r_a_p_p_i_n_g instructions to throw exceptions, i.e. memory references
           or floating point instructions.  It does not allow exceptions to be
           thrown from arbitrary signal handlers such as "SIGALRM".

       --ffuunnwwiinndd--ttaabblleess
           Similar to --ffeexxcceeppttiioonnss, except that it will just generate any
           needed static data, but will not affect the generated code in any
           other way.  You will normally not enable this option; instead, a
           language processor that needs this handling would enable it on your
           behalf.

       --ffaassyynncchhrroonnoouuss--uunnwwiinndd--ttaabblleess
           Generate unwind table in dwarf2 format, if supported by target
           machine.  The table is exact at each instruction boundary, so it
           can be used for stack unwinding from asynchronous events (such as
           debugger or garbage collector).

       --ffppcccc--ssttrruucctt--rreettuurrnn
           Return "short" "struct" and "union" values in memory like longer
           ones, rather than in registers.  This convention is less efficient,
           but it has the advantage of allowing intercallability between GCC-
           compiled files and files compiled with other compilers,
           particularly the Portable C Compiler (pcc).

           The precise convention for returning structures in memory depends
           on the target configuration macros.

           Short structures and unions are those whose size and alignment
           match that of some integer type.

           WWaarrnniinngg:: code compiled with the --ffppcccc--ssttrruucctt--rreettuurrnn switch is not
           binary compatible with code compiled with the --ffrreegg--ssttrruucctt--rreettuurrnn
           switch.  Use it to conform to a non-default application binary
           interface.

       --ffrreegg--ssttrruucctt--rreettuurrnn
           Return "struct" and "union" values in registers when possible.
           This is more efficient for small structures than
           --ffppcccc--ssttrruucctt--rreettuurrnn.

           If you specify neither --ffppcccc--ssttrruucctt--rreettuurrnn nor --ffrreegg--ssttrruucctt--rreettuurrnn,
           GCC defaults to whichever convention is standard for the target.
           If there is no standard convention, GCC defaults to
           --ffppcccc--ssttrruucctt--rreettuurrnn, except on targets where GCC is the principal
           compiler.  In those cases, we can choose the standard, and we chose
           the more efficient register return alternative.

           WWaarrnniinngg:: code compiled with the --ffrreegg--ssttrruucctt--rreettuurrnn switch is not
           binary compatible with code compiled with the --ffppcccc--ssttrruucctt--rreettuurrnn
           switch.  Use it to conform to a non-default application binary
           interface.

       --ffsshhoorrtt--eennuummss
           Allocate to an "enum" type only as many bytes as it needs for the
           declared range of possible values.  Specifically, the "enum" type
           will be equivalent to the smallest integer type which has enough
           room.

           WWaarrnniinngg:: the --ffsshhoorrtt--eennuummss switch causes GCC to generate code that
           is not binary compatible with code generated without that switch.
           Use it to conform to a non-default application binary interface.

       --ffsshhoorrtt--ddoouubbllee
           Use the same size for "double" as for "float".

           WWaarrnniinngg:: the --ffsshhoorrtt--ddoouubbllee switch causes GCC to generate code that
           is not binary compatible with code generated without that switch.
           Use it to conform to a non-default application binary interface.

       --ffsshhoorrtt--wwcchhaarr
           Override the underlying type for wwcchhaarr__tt to be sshhoorrtt uunnssiiggnneedd iinntt
           instead of the default for the target.  This option is useful for
           building programs to run under WINE.

           WWaarrnniinngg:: the --ffsshhoorrtt--wwcchhaarr switch causes GCC to generate code that
           is not binary compatible with code generated without that switch.
           Use it to conform to a non-default application binary interface.

       --ffnnoo--ccoommmmoonn
           In C code, controls the placement of uninitialized global
           variables.  Unix C compilers have traditionally permitted multiple
           definitions of such variables in different compilation units by
           placing the variables in a common block.  This is the behavior
           specified by --ffccoommmmoonn, and is the default for GCC on most targets.
           On the other hand, this behavior is not required by ISO C, and on
           some targets may carry a speed or code size penalty on variable
           references.  The --ffnnoo--ccoommmmoonn option specifies that the compiler
           should place uninitialized global variables in the data section of
           the object file, rather than generating them as common blocks.
           This has the effect that if the same variable is declared (without
           "extern") in two different compilations, you will get a multiple-
           definition error when you link them.  In this case, you must
           compile with --ffccoommmmoonn instead.  Compiling with --ffnnoo--ccoommmmoonn is
           useful on targets for which it provides better performance, or if
           you wish to verify that the program will work on other systems
           which always treat uninitialized variable declarations this way.

       --ffnnoo--iiddeenntt
           Ignore the ##iiddeenntt directive.

       --ffiinnhhiibbiitt--ssiizzee--ddiirreeccttiivvee
           Donâ€™t output a ".size" assembler directive, or anything else that
           would cause trouble if the function is split in the middle, and the
           two halves are placed at locations far apart in memory.  This
           option is used when compiling _c_r_t_s_t_u_f_f_._c; you should not need to
           use it for anything else.

       --ffvveerrbboossee--aassmm
           Put extra commentary information in the generated assembly code to
           make it more readable.  This option is generally only of use to
           those who actually need to read the generated assembly code
           (perhaps while debugging the compiler itself).

           --ffnnoo--vveerrbboossee--aassmm, the default, causes the extra information to be
           omitted and is useful when comparing two assembler files.

       --ffrreeccoorrdd--ggcccc--sswwiittcchheess
           This switch causes the command line that was used to invoke the
           compiler to be recorded into the object file that is being created.
           This switch is only implemented on some targets and the exact
           format of the recording is target and binary file format dependent,
           but it usually takes the form of a section containing ASCII text.
           This switch is related to the --ffvveerrbboossee--aassmm switch, but that switch
           only records information in the assembler output file as comments,
           so it never reaches the object file.

       --ffppiicc
           Generate position-independent code (PIC) suitable for use in a
           shared library, if supported for the target machine.  Such code
           accesses all constant addresses through a global offset table
           (GOT).  The dynamic loader resolves the GOT entries when the
           program starts (the dynamic loader is not part of GCC; it is part
           of the operating system).  If the GOT size for the linked
           executable exceeds a machine-specific maximum size, you get an
           error message from the linker indicating that --ffppiicc does not work;
           in that case, recompile with --ffPPIICC instead.  (These maximums are 8k
           on the SPARC and 32k on the m68k and RS/6000.  The 386 has no such
           limit.)

           Position-independent code requires special support, and therefore
           works only on certain machines.  For the 386, GCC supports PIC for
           System V but not for the Sun 386i.  Code generated for the IBM
           RS/6000 is always position-independent.

           When this flag is set, the macros "__pic__" and "__PIC__" are
           defined to 1.

       --ffPPIICC
           If supported for the target machine, emit position-independent
           code, suitable for dynamic linking and avoiding any limit on the
           size of the global offset table.  This option makes a difference on
           the m68k, PowerPC and SPARC.

           Position-independent code requires special support, and therefore
           works only on certain machines.

           When this flag is set, the macros "__pic__" and "__PIC__" are
           defined to 2.

       --ffppiiee
       --ffPPIIEE
           These options are similar to --ffppiicc and --ffPPIICC, but generated
           position independent code can be only linked into executables.
           Usually these options are used when --ppiiee GCC option will be used
           during linking.

           --ffppiiee and --ffPPIIEE both define the macros "__pie__" and "__PIE__".
           The macros have the value 1 for --ffppiiee and 2 for --ffPPIIEE.

       --ffnnoo--jjuummpp--ttaabblleess
           Do not use jump tables for switch statements even where it would be
           more efficient than other code generation strategies.  This option
           is of use in conjunction with --ffppiicc or --ffPPIICC for building code
           which forms part of a dynamic linker and cannot reference the
           address of a jump table.  On some targets, jump tables do not
           require a GOT and this option is not needed.

       --ffffiixxeedd--_r_e_g
           Treat the register named _r_e_g as a fixed register; generated code
           should never refer to it (except perhaps as a stack pointer, frame
           pointer or in some other fixed role).

           _r_e_g must be the name of a register.  The register names accepted
           are machine-specific and are defined in the "REGISTER_NAMES" macro
           in the machine description macro file.

           This flag does not have a negative form, because it specifies a
           three-way choice.

       --ffccaallll--uusseedd--_r_e_g
           Treat the register named _r_e_g as an allocable register that is
           clobbered by function calls.  It may be allocated for temporaries
           or variables that do not live across a call.  Functions compiled
           this way will not save and restore the register _r_e_g.

           It is an error to used this flag with the frame pointer or stack
           pointer.  Use of this flag for other registers that have fixed
           pervasive roles in the machineâ€™s execution model will produce
           disastrous results.

           This flag does not have a negative form, because it specifies a
           three-way choice.

       --ffccaallll--ssaavveedd--_r_e_g
           Treat the register named _r_e_g as an allocable register saved by
           functions.  It may be allocated even for temporaries or variables
           that live across a call.  Functions compiled this way will save and
           restore the register _r_e_g if they use it.

           It is an error to used this flag with the frame pointer or stack
           pointer.  Use of this flag for other registers that have fixed
           pervasive roles in the machineâ€™s execution model will produce
           disastrous results.

           A different sort of disaster will result from the use of this flag
           for a register in which function values may be returned.

           This flag does not have a negative form, because it specifies a
           three-way choice.

       --ffppaacckk--ssttrruucctt[[==_n]]
           Without a value specified, pack all structure members together
           without holes.  When a value is specified (which must be a small
           power of two), pack structure members according to this value,
           representing the maximum alignment (that is, objects with default
           alignment requirements larger than this will be output potentially
           unaligned at the next fitting location.

           WWaarrnniinngg:: the --ffppaacckk--ssttrruucctt switch causes GCC to generate code that
           is not binary compatible with code generated without that switch.
           Additionally, it makes the code suboptimal.  Use it to conform to a
           non-default application binary interface.

       --ffiinnssttrruummeenntt--ffuunnccttiioonnss
           Generate instrumentation calls for entry and exit to functions.
           Just after function entry and just before function exit, the
           following profiling functions will be called with the address of
           the current function and its call site.  (On some platforms,
           "__builtin_return_address" does not work beyond the current
           function, so the call site information may not be available to the
           profiling functions otherwise.)

                   void __cyg_profile_func_enter (void *this_fn,
                                                  void *call_site);
                   void __cyg_profile_func_exit  (void *this_fn,
                                                  void *call_site);

           The first argument is the address of the start of the current
           function, which may be looked up exactly in the symbol table.

           This instrumentation is also done for functions expanded inline in
           other functions.  The profiling calls will indicate where,
           conceptually, the inline function is entered and exited.  This
           means that addressable versions of such functions must be
           available.  If all your uses of a function are expanded inline,
           this may mean an additional expansion of code size.  If you use
           eexxtteerrnn iinnlliinnee in your C code, an addressable version of such
           functions must be provided.  (This is normally the case anyways,
           but if you get lucky and the optimizer always expands the functions
           inline, you might have gotten away without providing static
           copies.)

           A function may be given the attribute "no_instrument_function", in
           which case this instrumentation will not be done.  This can be
           used, for example, for the profiling functions listed above, high-
           priority interrupt routines, and any functions from which the
           profiling functions cannot safely be called (perhaps signal
           handlers, if the profiling routines generate output or allocate
           memory).

       --ffiinnssttrruummeenntt--ffuunnccttiioonnss--eexxcclluuddee--ffiillee--lliisstt==_f_i_l_e,,_f_i_l_e,,......
           Set the list of functions that are excluded from instrumentation
           (see the description of "-finstrument-functions").  If the file
           that contains a function definition matches with one of _f_i_l_e, then
           that function is not instrumented.  The match is done on
           substrings: if the _f_i_l_e parameter is a substring of the file name,
           it is considered to be a match.

           For example,
           "-finstrument-functions-exclude-file-list=/bits/stl,include/sys"
           will exclude any inline function defined in files whose pathnames
           contain "/bits/stl" or "include/sys".

           If, for some reason, you want to include letter ',' in one of _s_y_m,
           write ','. For example,
           "-finstrument-functions-exclude-file-list=',,tmp'" (note the single
           quote surrounding the option).

       --ffiinnssttrruummeenntt--ffuunnccttiioonnss--eexxcclluuddee--ffuunnccttiioonn--lliisstt==_s_y_m,,_s_y_m,,......
           This is similar to "-finstrument-functions-exclude-file-list", but
           this option sets the list of function names to be excluded from
           instrumentation.  The function name to be matched is its user-
           visible name, such as "vector<int> blah(const vector<int> &)", not
           the internal mangled name (e.g., "_Z4blahRSt6vectorIiSaIiEE").  The
           match is done on substrings: if the _s_y_m parameter is a substring of
           the function name, it is considered to be a match.

       --ffssttaacckk--cchheecckk
           Generate code to verify that you do not go beyond the boundary of
           the stack.  You should specify this flag if you are running in an
           environment with multiple threads, but only rarely need to specify
           it in a single-threaded environment since stack overflow is
           automatically detected on nearly all systems if there is only one
           stack.

           Note that this switch does not actually cause checking to be done;
           the operating system or the language runtime must do that.  The
           switch causes generation of code to ensure that they see the stack
           being extended.

           You can additionally specify a string parameter: "no" means no
           checking, "generic" means force the use of old-style checking,
           "specific" means use the best checking method and is equivalent to
           bare --ffssttaacckk--cchheecckk.

           Old-style checking is a generic mechanism that requires no specific
           target support in the compiler but comes with the following
           drawbacks:

           1.  Modified allocation strategy for large objects: they will
               always be allocated dynamically if their size exceeds a fixed
               threshold.

           2.  Fixed limit on the size of the static frame of functions: when
               it is topped by a particular function, stack checking is not
               reliable and a warning is issued by the compiler.

           3.  Inefficiency: because of both the modified allocation strategy
               and the generic implementation, the performances of the code
               are hampered.

           Note that old-style stack checking is also the fallback method for
           "specific" if no target support has been added in the compiler.

       --ffssttaacckk--lliimmiitt--rreeggiisstteerr==_r_e_g
       --ffssttaacckk--lliimmiitt--ssyymmbbooll==_s_y_m
       --ffnnoo--ssttaacckk--lliimmiitt
           Generate code to ensure that the stack does not grow beyond a
           certain value, either the value of a register or the address of a
           symbol.  If the stack would grow beyond the value, a signal is
           raised.  For most targets, the signal is raised before the stack
           overruns the boundary, so it is possible to catch the signal
           without taking special precautions.

           For instance, if the stack starts at absolute address 00xx8800000000000000
           and grows downwards, you can use the flags
           --ffssttaacckk--lliimmiitt--ssyymmbbooll==____ssttaacckk__lliimmiitt and
           --WWll,,----ddeeffssyymm,,____ssttaacckk__lliimmiitt==00xx77ffffee00000000 to enforce a stack limit of
           128KB.  Note that this may only work with the GNU linker.

       --ffaarrgguummeenntt--aalliiaass
       --ffaarrgguummeenntt--nnooaalliiaass
       --ffaarrgguummeenntt--nnooaalliiaass--gglloobbaall
       --ffaarrgguummeenntt--nnooaalliiaass--aannyytthhiinngg
           Specify the possible relationships among parameters and between
           parameters and global data.

           --ffaarrgguummeenntt--aalliiaass specifies that arguments (parameters) may alias
           each other and may alias global storage.--ffaarrgguummeenntt--nnooaalliiaass
           specifies that arguments do not alias each other, but may alias
           global storage.--ffaarrgguummeenntt--nnooaalliiaass--gglloobbaall specifies that arguments
           do not alias each other and do not alias global storage.
           --ffaarrgguummeenntt--nnooaalliiaass--aannyytthhiinngg specifies that arguments do not alias
           any other storage.

           Each language will automatically use whatever option is required by
           the language standard.  You should not need to use these options
           yourself.

       --fflleeaaddiinngg--uunnddeerrssccoorree
           This option and its counterpart, --ffnnoo--lleeaaddiinngg--uunnddeerrssccoorree, forcibly
           change the way C symbols are represented in the object file.  One
           use is to help link with legacy assembly code.

           WWaarrnniinngg:: the --fflleeaaddiinngg--uunnddeerrssccoorree switch causes GCC to generate
           code that is not binary compatible with code generated without that
           switch.  Use it to conform to a non-default application binary
           interface.  Not all targets provide complete support for this
           switch.

       --ffttllss--mmooddeell==_m_o_d_e_l
           Alter the thread-local storage model to be used.  The _m_o_d_e_l
           argument should be one of "global-dynamic", "local-dynamic",
           "initial-exec" or "local-exec".

           The default without --ffppiicc is "initial-exec"; with --ffppiicc the default
           is "global-dynamic".

       --ffvviissiibbiilliittyy==_d_e_f_a_u_l_t_|_i_n_t_e_r_n_a_l_|_h_i_d_d_e_n_|_p_r_o_t_e_c_t_e_d
           Set the default ELF image symbol visibility to the specified
           option---all symbols will be marked with this unless overridden
           within the code.  Using this feature can very substantially improve
           linking and load times of shared object libraries, produce more
           optimized code, provide near-perfect API export and prevent symbol
           clashes.  It is ssttrroonnggllyy recommended that you use this in any
           shared objects you distribute.

           Despite the nomenclature, "default" always means public ie;
           available to be linked against from outside the shared object.
           "protected" and "internal" are pretty useless in real-world usage
           so the only other commonly used option will be "hidden".  The
           default if --ffvviissiibbiilliittyy isnâ€™t specified is "default", i.e., make
           every symbol public---this causes the same behavior as previous
           versions of GCC.

           A good explanation of the benefits offered by ensuring ELF symbols
           have the correct visibility is given by "How To Write Shared
           Libraries" by Ulrich Drepper (which can be found at
           <hhttttpp::////ppeeooppllee..rreeddhhaatt..ccoomm//~~ddrreeppppeerr//>)---however a superior solution
           made possible by this option to marking things hidden when the
           default is public is to make the default hidden and mark things
           public.  This is the norm with DLLâ€™s on Windows and with
           --ffvviissiibbiilliittyy==hhiiddddeenn and "__attribute__ ((visibility("default")))"
           instead of "__declspec(dllexport)" you get almost identical
           semantics with identical syntax.  This is a great boon to those
           working with cross-platform projects.

           For those adding visibility support to existing code, you may find
           ##pprraaggmmaa GGCCCC vviissiibbiilliittyy of use.  This works by you enclosing the
           declarations you wish to set visibility for with (for example)
           ##pprraaggmmaa GGCCCC vviissiibbiilliittyy ppuusshh((hhiiddddeenn)) and ##pprraaggmmaa GGCCCC vviissiibbiilliittyy ppoopp.
           Bear in mind that symbol visibility should be viewed aass ppaarrtt ooff tthhee
           AAPPII iinntteerrffaaccee ccoonnttrraacctt and thus all new code should always specify
           visibility when it is not the default ie; declarations only for use
           within the local DSO should aallwwaayyss be marked explicitly as hidden
           as so to avoid PLT indirection overheads---making this abundantly
           clear also aids readability and self-documentation of the code.
           Note that due to ISO C++ specification requirements, operator new
           and operator delete must always be of default visibility.

           Be aware that headers from outside your project, in particular
           system headers and headers from any other library you use, may not
           be expecting to be compiled with visibility other than the default.
           You may need to explicitly say ##pprraaggmmaa GGCCCC vviissiibbiilliittyy ppuusshh((ddeeffaauulltt))
           before including any such headers.

           eexxtteerrnn declarations are not affected by --ffvviissiibbiilliittyy, so a lot of
           code can be recompiled with --ffvviissiibbiilliittyy==hhiiddddeenn with no
           modifications.  However, this means that calls to eexxtteerrnn functions
           with no explicit visibility will use the PLT, so it is more
           effective to use ____aattttrriibbuuttee ((((vviissiibbiilliittyy)))) and/or ##pprraaggmmaa GGCCCC
           vviissiibbiilliittyy to tell the compiler which eexxtteerrnn declarations should be
           treated as hidden.

           Note that --ffvviissiibbiilliittyy does affect C++ vague linkage entities. This
           means that, for instance, an exception class that will be thrown
           between DSOs must be explicitly marked with default visibility so
           that the ttyyppee__iinnffoo nodes will be unified between the DSOs.

           An overview of these techniques, their benefits and how to use them
           is at <hhttttpp::////ggcccc..ggnnuu..oorrgg//wwiikkii//VViissiibbiilliittyy>.

EENNVVIIRROONNMMEENNTT
       This section describes several environment variables that affect how
       GCC operates.  Some of them work by specifying directories or prefixes
       to use when searching for various kinds of files.  Some are used to
       specify other aspects of the compilation environment.

       Note that you can also specify places to search using options such as
       --BB, --II and --LL.  These take precedence over places specified using
       environment variables, which in turn take precedence over those
       specified by the configuration of GCC.

       LLAANNGG
       LLCC__CCTTYYPPEE
       LLCC__MMEESSSSAAGGEESS
       LLCC__AALLLL
           These environment variables control the way that GCC uses
           localization information that allow GCC to work with different
           national conventions.  GCC inspects the locale categories LLCC__CCTTYYPPEE
           and LLCC__MMEESSSSAAGGEESS if it has been configured to do so.  These locale
           categories can be set to any value supported by your installation.
           A typical value is eenn__GGBB..UUTTFF--88 for English in the United Kingdom
           encoded in UTF-8.

           The LLCC__CCTTYYPPEE environment variable specifies character
           classification.  GCC uses it to determine the character boundaries
           in a string; this is needed for some multibyte encodings that
           contain quote and escape characters that would otherwise be
           interpreted as a string end or escape.

           The LLCC__MMEESSSSAAGGEESS environment variable specifies the language to use
           in diagnostic messages.

           If the LLCC__AALLLL environment variable is set, it overrides the value
           of LLCC__CCTTYYPPEE and LLCC__MMEESSSSAAGGEESS; otherwise, LLCC__CCTTYYPPEE and LLCC__MMEESSSSAAGGEESS
           default to the value of the LLAANNGG environment variable.  If none of
           these variables are set, GCC defaults to traditional C English
           behavior.

       TTMMPPDDIIRR
           If TTMMPPDDIIRR is set, it specifies the directory to use for temporary
           files.  GCC uses temporary files to hold the output of one stage of
           compilation which is to be used as input to the next stage: for
           example, the output of the preprocessor, which is the input to the
           compiler proper.

       GGCCCC__EEXXEECC__PPRREEFFIIXX
           If GGCCCC__EEXXEECC__PPRREEFFIIXX is set, it specifies a prefix to use in the
           names of the subprograms executed by the compiler.  No slash is
           added when this prefix is combined with the name of a subprogram,
           but you can specify a prefix that ends with a slash if you wish.

           If GGCCCC__EEXXEECC__PPRREEFFIIXX is not set, GCC will attempt to figure out an
           appropriate prefix to use based on the pathname it was invoked
           with.

           If GCC cannot find the subprogram using the specified prefix, it
           tries looking in the usual places for the subprogram.

           The default value of GGCCCC__EEXXEECC__PPRREEFFIIXX is _p_r_e_f_i_x_/_l_i_b_/_g_c_c_/ where
           _p_r_e_f_i_x is the prefix to the installed compiler. In many cases
           _p_r_e_f_i_x is the value of "prefix" when you ran the _c_o_n_f_i_g_u_r_e script.

           Other prefixes specified with --BB take precedence over this prefix.

           This prefix is also used for finding files such as _c_r_t_0_._o that are
           used for linking.

           In addition, the prefix is used in an unusual way in finding the
           directories to search for header files.  For each of the standard
           directories whose name normally begins with //uussrr//llooccaall//lliibb//ggcccc
           (more precisely, with the value of GGCCCC__IINNCCLLUUDDEE__DDIIRR), GCC tries
           replacing that beginning with the specified prefix to produce an
           alternate directory name.  Thus, with --BBffoooo//, GCC will search
           _f_o_o_/_b_a_r where it would normally search _/_u_s_r_/_l_o_c_a_l_/_l_i_b_/_b_a_r.  These
           alternate directories are searched first; the standard directories
           come next. If a standard directory begins with the configured
           _p_r_e_f_i_x then the value of _p_r_e_f_i_x is replaced by GGCCCC__EEXXEECC__PPRREEFFIIXX when
           looking for header files.

       CCOOMMPPIILLEERR__PPAATTHH
           The value of CCOOMMPPIILLEERR__PPAATTHH is a colon-separated list of
           directories, much like PPAATTHH.  GCC tries the directories thus
           specified when searching for subprograms, if it canâ€™t find the
           subprograms using GGCCCC__EEXXEECC__PPRREEFFIIXX.

       LLIIBBRRAARRYY__PPAATTHH
           The value of LLIIBBRRAARRYY__PPAATTHH is a colon-separated list of directories,
           much like PPAATTHH.  When configured as a native compiler, GCC tries
           the directories thus specified when searching for special linker
           files, if it canâ€™t find them using GGCCCC__EEXXEECC__PPRREEFFIIXX.  Linking using
           GCC also uses these directories when searching for ordinary
           libraries for the --ll option (but directories specified with --LL come
           first).

       LLAANNGG
           This variable is used to pass locale information to the compiler.
           One way in which this information is used is to determine the
           character set to be used when character literals, string literals
           and comments are parsed in C and C++.  When the compiler is
           configured to allow multibyte characters, the following values for
           LLAANNGG are recognized:

           CC--JJIISS
               Recognize JIS characters.

           CC--SSJJIISS
               Recognize SJIS characters.

           CC--EEUUCCJJPP
               Recognize EUCJP characters.

           If LLAANNGG is not defined, or if it has some other value, then the
           compiler will use mblen and mbtowc as defined by the default locale
           to recognize and translate multibyte characters.

       Some additional environments variables affect the behavior of the
       preprocessor.

       CCPPAATTHH
       CC__IINNCCLLUUDDEE__PPAATTHH
       CCPPLLUUSS__IINNCCLLUUDDEE__PPAATTHH
       OOBBJJCC__IINNCCLLUUDDEE__PPAATTHH
           Each variableâ€™s value is a list of directories separated by a
           special character, much like PPAATTHH, in which to look for header
           files.  The special character, "PATH_SEPARATOR", is target-
           dependent and determined at GCC build time.  For Microsoft Windows-
           based targets it is a semicolon, and for almost all other targets
           it is a colon.

           CCPPAATTHH specifies a list of directories to be searched as if
           specified with --II, but after any paths given with --II options on the
           command line.  This environment variable is used regardless of
           which language is being preprocessed.

           The remaining environment variables apply only when preprocessing
           the particular language indicated.  Each specifies a list of
           directories to be searched as if specified with --iissyysstteemm, but after
           any paths given with --iissyysstteemm options on the command line.

           In all these variables, an empty element instructs the compiler to
           search its current working directory.  Empty elements can appear at
           the beginning or end of a path.  For instance, if the value of
           CCPPAATTHH is ":/special/include", that has the same effect as
           --II.. --II//ssppeecciiaall//iinncclluuddee.

       DDEEPPEENNDDEENNCCIIEESS__OOUUTTPPUUTT
           If this variable is set, its value specifies how to output
           dependencies for Make based on the non-system header files
           processed by the compiler.  System header files are ignored in the
           dependency output.

           The value of DDEEPPEENNDDEENNCCIIEESS__OOUUTTPPUUTT can be just a file name, in which
           case the Make rules are written to that file, guessing the target
           name from the source file name.  Or the value can have the form
           _f_i_l_e _t_a_r_g_e_t, in which case the rules are written to file _f_i_l_e using
           _t_a_r_g_e_t as the target name.

           In other words, this environment variable is equivalent to
           combining the options --MMMM and --MMFF, with an optional --MMTT switch too.

       SSUUNNPPRROO__DDEEPPEENNDDEENNCCIIEESS
           This variable is the same as DDEEPPEENNDDEENNCCIIEESS__OOUUTTPPUUTT (see above),
           except that system header files are not ignored, so it implies --MM
           rather than --MMMM.  However, the dependence on the main input file is
           omitted.

BBUUGGSS
       For instructions on reporting bugs, see
       <hhttttpp::////bbuuggzziillllaa..rreeddhhaatt..ccoomm//bbuuggzziillllaa>.

FFOOOOTTNNOOTTEESS
       1.  On some systems, ggcccc --sshhaarreedd needs to build supplementary stub code
           for constructors to work.  On multi-libbed systems, ggcccc --sshhaarreedd
           must select the correct support libraries to link against.  Failing
           to supply the correct flags may lead to subtle defects.  Supplying
           them in cases where they are not necessary is innocuous.

SSEEEE AALLSSOO
       _g_p_l(7), _g_f_d_l(7), _f_s_f_-_f_u_n_d_i_n_g(7), _c_p_p(1), _g_c_o_v(1), _a_s(1), _l_d(1), _g_d_b(1),
       _a_d_b(1), _d_b_x(1), _s_d_b(1) and the Info entries for _g_c_c, _c_p_p, _a_s, _l_d,
       _b_i_n_u_t_i_l_s and _g_d_b.

AAUUTTHHOORR
       See the Info entry for ggcccc, or
       <hhttttpp::////ggcccc..ggnnuu..oorrgg//oonnlliinneeddooccss//ggcccc//CCoonnttrriibbuuttoorrss..hhttmmll>, for contributors
       to GCC.

CCOOPPYYRRIIGGHHTT
       Copyright (c) 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998,
       1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009 Free
       Software Foundation, Inc.

       Permission is granted to copy, distribute and/or modify this document
       under the terms of the GNU Free Documentation License, Version 1.2 or
       any later version published by the Free Software Foundation; with the
       Invariant Sections being "GNU General Public License" and "Funding Free
       Software", the Front-Cover texts being (a) (see below), and with the
       Back-Cover Texts being (b) (see below).  A copy of the license is
       included in the _g_f_d_l(7) man page.

       (a) The FSFâ€™s Front-Cover Text is:

            A GNU Manual

       (b) The FSFâ€™s Back-Cover Text is:

            You have freedom to copy and modify this GNU Manual, like GNU
            software.  Copies published by the Free Software Foundation raise
            funds for GNU development.



gcc-4.4.7                         2012-03-13                            GCC(1)
